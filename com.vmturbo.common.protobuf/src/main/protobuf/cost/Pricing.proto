syntax = "proto2";
package cost;

option java_package = "com.vmturbo.common.protobuf.cost";

import "PricingDTO.proto";
import "cost/Cost.proto";

// The price table is used to help calculate costs for entities in the
// topology that use cloud services, or to evaluate the effects of cloud-related moves/provisions
// in the market.
//
// The price table is extracted out of price data coming from the cost probe for a particular
// service provider, so each service provider will have its own price table. However:
// 1) One service provider may have different services (e.g. EC2, RDS for AWS), and the cost
//    probe should send the merged prices for all these services together. This means that
//    the price table for that service provider will contain prices for all services.
// 2) Price tables for different service providers could also be combined into one,
//    since IDs for all sold products should be different between service providers.
//
// This table contains PRICES - the amounts that the cloud providers say you need
// to pay for specific services (e.g. for a particular compute instance).
// We use the prices to calculate "bottom-up" costs - the amounts that the user will need to
// pay for a specific entity in the topology.
//
// Note: Bottom-up costs are our estimates of the costs for entities in the cloud based on the
// information that we have in the system (such as this price table, any discounts, and
// already-purchased reserved instances bought). This is different from top-down costs - which
// are the amounts that the user actually got charged, discovered by the billing probes.
// Bottom-up costs are essentially our estimates of what the top-down costs will be.
message PriceTable {
    // The on-demand prices, arranged by region ID.
    // See OnDemandPriceTable for more details.
    map<int64, OnDemandPriceTable> on_demand_price_by_region_id = 1;

    // The spot instance prices, arranged by region ID.
    // See SpotInstancePriceTable for more details.
    map<int64, SpotInstancePriceTable> spot_price_by_region_id = 10;

    // A list of on-demand license prices grouped by OS type.
    repeated common_dto.LicensePriceByOsEntry on_demand_license_prices = 20;

    // A list of reserved license prices grouped by OS type.
    repeated common_dto.LicensePriceByOsEntry reserved_license_prices = 30;
}

// The pricing information for reserved instances.
//
// This is kept separate from the main pricing table, because reserved instance pricing is only
// used to generate reserved instance buy recommendations, which happens outside the market.
message ReservedInstancePrice {
    // The pricing table for reserved instances.
    // See ReservedInstancePriceTable for more details.
    optional ReservedInstancePriceTable pricing_table = 1;
}

// The pricing table for reserved instances. This pricing table is GLOBAL, because
// region ID is factored into the reserved instance spec.
//
// Reserved instances are basically discounted on-demand instances with
// an upfront cost and a term. So instead of paying on-demand, you buy
// "in bulk".
//
// Note: AWS and Azure have reserved instance, and Google has a similar
// concept called "Committed Use Discounts".
message ReservedInstancePriceTable {

    // The prices for reserved instances, arranged by the ID of the reserved instance spec.
    // The spec is made up of all the configurable fields that affect the price of the instance,
    // so each spec resolves to exactly one price.
    map<int64, common_dto.ReservedInstancePrice> ri_prices_by_spec_id = 1;
}

// The pricing table for on-demand instances within a particular region.
//
// On-demand instances are the "default" pay-per-use option for all cloud providers.
message OnDemandPriceTable {

    // The prices for compute tiers in this region, arranged by tier ID.
    map<int64, common_dto.ComputeTierPriceList> compute_prices_by_tier_id = 1;

    // The prices for database instances in this region, arranged by instance ID.
    map<int64, common_dto.DatabaseTierPriceList> db_prices_by_instance_id = 2;

    // The prices for IPs in this region
    optional common_dto.IpPriceList ip_prices = 3;

    // The prices for cloud storage in this region, arranged by tier ID.
    map<int64, common_dto.StorageTierPriceList> cloud_storage_prices_by_tier_id = 4;
}

// The pricing table for spot instances.
//
// Spot instances are acquired via bids for unused capacity in a data center.
// They are cheaper than on-demand instances, but volatile - if someone bids
// higher, you lose the instance.
//
// Note: Spot instances are called Low-Priority VMs in Azure, and Preemptible VMs in
//       Google Cloud.
message SpotInstancePriceTable {
    // At the time of this writing the spot price is always hourly, and
    // is set per-region-per-instance.
    map<int64, common_dto.Price> spot_price_by_instance_id = 1;
}

message GetPriceTableRequest {
}

message GetPriceTableResponse {
    // The global price table is a merging of all the per-target price tables.
    // We can merge all of them safely because the individual tiers have globally unique IDs.
    optional PriceTable global_price_table = 1;
}


// a segment of a probe price table delivery
message ProbePriceTableSegment {
    oneof segment_contents {
        ProbePriceTableHeader header = 1;
        ProbePriceTableChunk probe_price_table = 2;
        ProbeRISpecPriceChunk probe_ri_spec_prices = 3;
    }

    message ProbePriceTableHeader {
        // the checksum of the data in this request
        optional int64 checksum = 1;

        // the time the request was created
        optional int64 created_time = 2;
    }

    // a chunk containing a probe's price table.
    message ProbePriceTableChunk {
        optional string probe_type = 1;
        optional PriceTable price_table = 2;
    }

    // a chunk of RI Spec Prices from a probe type. We may see several of these spread across
    // several ProbePriceTableSegments
    message ProbeRISpecPriceChunk {
        optional string probe_type = 1;
        repeated ReservedInstanceSpecPrice reserved_instance_spec_prices = 20;
    }
}

message ReservedInstanceSpecPrice {
    optional ReservedInstanceSpecInfo ri_spec_info = 1;

    optional common_dto.ReservedInstancePrice price = 2;
}

message UploadPriceTablesResponse {
}

message GetPriceTableChecksumRequest {
}

message GetPriceTableChecksumResponse {
    optional int64 price_table_checksum = 1;
}

// The pricing service is the interface to upload and retrieve pricing data from the cost
// component.
service PricingService {
    // Get the current "global" price table.
    rpc GetPriceTable(GetPriceTableRequest) returns (GetPriceTableResponse);

    // request for the checksum of the current price table data
    rpc GetPriceTableChecksum(GetPriceTableChecksumRequest) returns (GetPriceTableChecksumResponse);

    // Upload the most recent price table discovered by a particular cost probe.
    //
    // Returns INVALID_ARGUMENT if the request is missing fields.
    rpc UpdatePriceTables(stream ProbePriceTableSegment) returns (UploadPriceTablesResponse);
}
