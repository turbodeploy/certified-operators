syntax = "proto2";

package repository;

option java_package = "com.vmturbo.common.protobuf.repository";
option java_outer_classname = "SupplyChainProto";

import "common/EnvironmentTypeEnum.proto";

// The response to a supply chain request consists of a series of supply chain nodes
// that express graph of connections in the supply chain.
message SupplyChainNode {

    // A list of node members of a particular state.
    message MemberList {
        repeated int64 member_oids = 1;
    }

    // The entity type in this node of the supply chain. A node in
    // the chain may contain only one type of entity.
    optional string entity_type = 1;

    // The depth of this node.
    optional int32 supply_chain_depth = 2;

    // list of entity types that provide resources to the the entity types
    // at this node in the supply chain.
    repeated string connected_provider_types = 3;

    // list of entity types that consume resources from the entity types
    // at this node in the supply chain.
    repeated string connected_consumer_types = 4;

    // A map from entity state -> members of that state.
    map<int32, MemberList> members_by_state = 6;
}

// A description of a supply chain returned by the service.
message SupplyChain {
    // A list of supply chain nodes.
    // There will only be one node for every entity type in the returned supply chain.
    repeated SupplyChainNode supply_chain_nodes = 1;

    // The entities specified in the request that were not found - and whose supply chains
    // are therefore not included in the returned supply chain.
    repeated int64 missing_starting_entities = 10;
}

// Request the supply chain. A supply chain request may optionally specify a contextId and
// startingVertexId.
message GetSupplyChainRequest {
    // The ID of the topology context whose supply chains are being requested.
    // If no context is supplied, returns the supply chain for the current live context.
    optional int64 context_id = 1;

    // The OIDs of the vertices to start from when constructing the supply chain.
    // The supply chains from each individual OID are merged into a single result.
    // If no starting vertex is specified, the global supply chain is retrieved.
    repeated int64 starting_entity_oid = 2;

    // The list of entity types to include in the resultant supplychain. If this
    // list is empty, then no filtering is done and SupplyChainNodes pertaining
    // to any entity type are included.
    repeated string entity_types_to_include = 3;

    // Only include entities in a particular environment type in the supply chain.
    // If not set, return all entities regardless of environment type.
    optional .common.EnvironmentType environment_type = 4;

    // If true, the user's scoping restrictions will be enforced, and the resulting supply chain
    // be filtered according to the user's entity access scope.
    optional bool enforce_user_scope = 5 [default = true];
}

// The response to a "GetSupplyChain" request.
message GetSupplyChainResponse {
    // The supply chain.
    // Should be set in a successful request.
    optional SupplyChain supply_chain = 1;
}

// A supply chain seed defines the starting point of a supply chain query,
// and provides ways to limit the entities considered to be part of the
// supply chain.
message SupplyChainSeed {
    // The OID of the seed. This can be any arbitrary number.
    // Use this number to identify which response corresponds to which seed.
    optional int64 seed_oid = 1;

    // The OIDs of the vertices to start from when constructing the supply chain.
    // The supply chains from each individual OID are merged into a single result.
    // If no starting vertex is specified, the global supply chain is retrieved.
    repeated int64 starting_entity_oid = 2;

    // The list of entity types to include in the resultant supplychain. If this
    // list is empty, then no filtering is done and SupplyChainNodes pertaining
    // to any entity type are included.
    repeated string entity_types_to_include = 3;

    // Only include entities in a particular environment type in the supply chain.
    // If not set, return all entities regardless of environment type.
    optional .common.EnvironmentType environment_type = 4;
}

message GetMultiSupplyChainsRequest {
    // The ID of the topology context whose supply chains are being requested.
    // If no context is supplied, returns the supply chain for the current live context.
    optional int64 context_id = 1;

    // A list of "supply chain seeds" - each seed is a request for a supply chain.
    repeated SupplyChainSeed seeds = 2;
}

// The response to a GetMultiSupplyChainsRequest.
// There is one response for every seed in the request.
message GetMultiSupplyChainsResponse {
    // The OID of the SupplyChainSeed this response pertains to.
    optional int64 seed_oid = 1;

    // The supply chain for this seed.
    // May be unset (empty) if there was an error retrieving the supply chain.
    //
    // Note - Missing starting entities in the seed do not constitute an error. If some of those
    // entities are missing, there will be a partial supply chain, and the missing entities
    // will be listed in SupplyChain.missing_starting_entities.
    optional SupplyChain supply_chain = 2;

    // If the supply chain for this seed could not be retrieved, this is a description
    // of the error/reason. We use this instead of the regular error mechanism because
    // the failure for a single seed should not fail the entire call.
    optional string error = 10;
}

// A service for fetching information about supply chains.
// The supply chain is a concept that expresses the links between entities in a topology.
service SupplyChainService {
    // Retrieve the supply chain.
    rpc GetSupplyChain(GetSupplyChainRequest) returns (GetSupplyChainResponse);

    // Retrieve multiple supply chains in one call.
    // This is equivalent to calling GetSupplyChain multiple times, but it provides an easier way
    // to do it from the client's perspective and allows for optimizations on the server.
    //
    // The response streams back each supply chain once it's computed.
    rpc GetMultiSupplyChains(GetMultiSupplyChainsRequest) returns (stream GetMultiSupplyChainsResponse);
}