syntax = "proto2";

package repository;

option java_package = "com.vmturbo.common.protobuf.repository";

import "common/Pagination.proto";
import "CommonDTO.proto";
import "topology/TopologyDTO.proto";
import "stats/Stats.proto";

message DeleteTopologyRequest {
    // the id of the topology to delete
    optional int64 topology_id = 1;
    // For plan topology, the topologyContextId=planId.
    optional int64 topology_context_id = 2;
}

message RepositoryOperationResponse {
    required RepositoryOperationResponseCode response_code = 1;

    optional string error = 2;
}

message RetrieveTopologyRequest {
    // The id of the topology to retrieve
    required int64 topology_id = 1;

    // A filter to restrict the entities that are returned.
    // If not set, use the default instance (which should match all entities).
    optional TopologyEntityFilter entity_filter = 2;
}

message TopologyEntityFilter {
    // If set, return only entities that are unplaced. An entity is considered unplaced
    // if it has any CommoditiesBoughtFromProvider where the provider is not set.
    optional bool unplaced_only = 1 [default = false];
}

message RetrieveTopologyResponse {
    repeated topology.TopologyEntityDTO entities = 1;
}

// Request for retrieving topology entities.
message RetrieveTopologyEntitiesRequest {
    // Id of topology.
    optional int64 topology_id = 1;
    // Context id of topology.
    optional int64 topology_context_id = 2;
    // List of id which need to retrieve.
    repeated int64 entity_oids = 3;
    // Type of topology means source topology or projected topology need to retrieve from.
    optional TopologyType topology_type = 4;
	// The type of entity to fetch
	repeated common_dto.EntityDTO.EntityType entity_type = 5;

    enum TopologyType {
        // Means source topology.
        SOURCE = 1;
        // Means projected topology.
        PROJECTED = 2;
    }
}

// Response of retrieve topology entities.
message RetrieveTopologyEntitiesResponse {
    // Returned topology entity dto which only contains partial fields. Even though it missing all
    // Market setting fields but we do not need them.
    repeated topology.TopologyEntityDTO entities = 1;
}

enum RepositoryOperationResponseCode {
    // Operation completed successfully
    OK = 1;

    // Operation failed
    FAILED = 2;
}

message EntityFilter {
    // The entities to retrieve.
    // If empty, will not return any entities.
    repeated int64 entity_ids = 1;
}

// A request to return per-entity stats from a plan topology - projected or plan source
message PlanTopologyStatsRequest {
    // the ID of the plan topology to fetch stats from
    optional int64 topology_id = 1;

    // The filter to apply to the stats. If not set, retrieve all stats.
    optional stats.StatsFilter filter = 2;

    // The filter to apply to the entities in the topology. If not set, retrieve all entities.
    optional EntityFilter entity_filter = 3;

    // If present, limit the ServiceEntities processed to the given type.
    optional string related_entity_type = 4;

    // The pagination parameters outlying the sort order, and previous cursor (if any).
    // If not set, use the default instance of PaginationParameters. The backend
    // will enforce a default ordering and limit, and retrieve the first page.
    optional common.PaginationParameters pagination_params = 10;
}

message PlanTopologyStatsResponse {
    // Stats for the retrieved entities.
    // The stats are arranged in the order requested in the pagination parameters in
    // the request.
    repeated PlanEntityStats entity_stats = 1;

    // The response containing the cursor to retrieve the next page of results.
    optional common.PaginationResponse paginationResponse = 10;
}

// Return the plan stats for an entity. Includes the {@link TopologyEntityDTO} if requested.
// The stats returned will be from either plan source or plan projected topologies, depending
// on the topology_id in the {@link PlanTopologyStatsRequest}.
message PlanEntityStats {
    // Stats per entity including the Entity definition, if requested
    optional topology.TopologyEntityDTO plan_entity = 1;

    // the StatsSnapshots from the selected plan source, either plan source or plan projected,
    // for the given entity
    optional stats.EntityStats plan_entity_stats = 2;
}


service RepositoryService {
    rpc DeleteTopology(DeleteTopologyRequest) returns (RepositoryOperationResponse);
    rpc RetrieveTopology(RetrieveTopologyRequest) returns (stream RetrieveTopologyResponse);

    // Try to get topology entities from Repository, and note that the returned TopologyEntityDTO contains
    // only partial fields, because some fields not stored at ServiceEntityRepoDTO.
    rpc RetrieveTopologyEntities(RetrieveTopologyEntitiesRequest) returns (RetrieveTopologyEntitiesResponse);

    // Fetch the stats related to a given plan execution. The request includes a StatsFilter specifying
    // a startDate and endDate. If the startDate is in the past, then this call will include a
    // StatsSnapshot containing the stats from the Plan Source topology.
    //
    // TODO: fetching from the plan source topology is not yet implemented; the plan source topology
    // is not yet persisted and so cannot be retrieved.
    //
    // If the endDate is in the future, then the responses will include a StatSnapshot with
    // the stats from the Plan Projected topology.
    //
    // The stats in each StatSnapshot returned will be restricted to commodities in the commodity_name
    // list in the StatsFilter parameter, if any. Otherwise, all stats will be returned.
    //
    // The stats in each StatSnapshot returned will be restricted to the entity type specified
    // in the StatsFilter related_entity_type, if any. Otherwise, stats from entities of all types
    // will be returned.
    //
    // @param PlanStatsRequest the specification of the plan ID and StatsFilter for this query
    // @returns a sequence of StatSnapshot, including the Plan Topology
    rpc GetPlanTopologyStats(PlanTopologyStatsRequest) returns (PlanTopologyStatsResponse);
}


