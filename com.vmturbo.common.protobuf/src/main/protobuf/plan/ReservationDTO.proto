syntax = "proto2";
package plan;

option java_package = "com.vmturbo.common.protobuf.plan";

import "plan/Scenario.proto";
import "topology/TopologyDTO.proto";
import "plan/TemplateDTO.proto";
import "market/InitialPlacement.proto";

// Reservation describes user-specified reservation information, such as templates, constraints and
// also contains all reservation instances and placement information which are created by internal
// application.
message Reservation {
    // Id of reservation
    optional int64 id = 1;

    // Name of reservation
    optional string name = 2;

    // Start date (milliseconds since Unix epoch) of reservation.
    optional int64 start_date = 3;

    // End date (milliseconds since Unix epoch) of reservation. When end date comes, it will
    // automatically try to deploy this reservation.
    //TODO: When expiration date comes, perform deployment.
    optional int64 expiration_date = 4;

    // Status of reservation.
    optional ReservationStatus status = 5;

    // Contains all reservation instance group by different templates.
    optional ReservationTemplateCollection reservation_template_collection = 6;

    // Contains all specified constraints when creating the reservation.
    optional ConstraintInfoCollection constraint_info_collection = 7;

    // reservation set for delayed deletion. if true keep reservation in historical cache.
    optional bool deployed = 8  [default = false];

    // Specification to determine what the type of behavior Placement entities should take.
    optional ReservationMode reservation_mode = 9;

    // Specification to determine what group type entities should be placed on corresponding to
    // the Mode of the reservation.
    optional ReservationGrouping reservation_grouping = 10;
}

// ReservationChange describes a reservation whose status has changed.
// Meant to be lightweight since we will batch send multiple reservation records.
message ReservationChange {
    // Id of reservation.
    optional int64 id = 1;

    // Status of reservation.
    optional ReservationStatus status = 2;
}

// ReservationChanges describes a list of reservations whose statuses have changed.
message ReservationChanges {
    // A list of reservation status changes.
    repeated ReservationChange reservation_change = 1;
}

// If current date is before start date, status is FUTURE. If current date is equal or after
// start date, status is RESERVED.
//ie: current date     start_date
//    ----------------|--------------
//    FUTURE           RESERVED
// If the reservation's template was deleted, status is INVALID.
enum ReservationStatus {
    // FUTURE means that reservation's start day is after current date.
    FUTURE = 1;
    // RESERVED means that reservation is active now which start day is on or before current date.
    RESERVED = 2;
    // INVALID means that the reservation's template was deleted.
    INVALID = 3;
    // initial status of reservations created with start date same as current date
    UNFULFILLED = 4;
    //  reservation part of the current reservation plan
    INPROGRESS = 5;
    // reservation was part of  reservation plan and there is not enough space currently
    PLACEMENT_FAILED = 6;
    // initial state of reservation
    INITIAL = 7;
}

// Reservation Mode specification to determine what the type of behavior Placement entities should
// take.
enum ReservationMode {

    // Entities of the same reservation may be placed across multiple ReservationGroupings.
    NO_GROUPING = 1;

    // Entities of the same reservation will be placed within the same ReservationGrouping.
    AFFINITY = 2;
}

// Reservation Grouping specification to determine what group type entities should be placed on
// corresponding to the Mode of the reservation.
enum ReservationGrouping {

    // Do not restrict ReservationMode behavior on a specific grouping level.
    NONE = 1;

    // Restrict ReservationMode behavior on a Cluster level.
    CLUSTER = 2;
}

message ReservationTemplateCollection {
    // A list of reservation template which contains reservation instance for each different template.
    repeated ReservationTemplate reservation_template = 1;

    // ReservationTemplate represents, for one type of template, the count of template and also
    // all reservation instances belong to this type of template.
    message ReservationTemplate {
        // Count of templates.
        optional int64 count = 1;

        // Id of template.
        optional int64 template_id = 2;

        // A list of reservation instance which contains placement information.
        repeated ReservationInstance reservation_instance = 3;

        // template
        optional Template template = 4;

        message ReservationInstance {
            // Id of reservation instance entity.
            optional int64 entity_id = 1;

            // A list of placement information of reservation instance.
            repeated PlacementInfo placement_info = 2;

            // Name of entity
            optional string name = 3;

            // details of why a reservation instance was unplaced.
            repeated .topology.TopologyEntityDTO.UnplacementReason unplaced_reason = 4;

            // Contains placement information of reservation instance.
            message PlacementInfo {
                // The provider id of this reservation instance.
                optional int64 provider_id = 1;

                // The entity type of provider.
                optional int32 provider_type = 2;

                // a list of commodities bought from this provider.
                repeated .topology.CommodityBoughtDTO commodity_bought = 3;

                optional int64 placement_info_id = 4;

                optional int64 cluster_id = 5;

                // Used for storing cluster stats.
                reserved 6;
            }
        }
    }
}

message ConstraintInfoCollection {
    // A list of constraint information which contains details for different type of constraint.
    repeated ReservationConstraintInfo reservation_constraint_info = 1;
}

message InitialPlacementRequest {
    // ScenarioInfo contains list of ScenarioChanges for this initial placement request, later on
    // if it needs, it also could include plan scope as well.
    optional ScenarioInfo scenario_info = 1;
}

message InitialPlacementResponse {
    // the id of initial placement plan, the caller will use it to check plan status.
    optional int64 plan_id = 1;
}

// Request for get all reservations.
message GetAllReservationsRequest {

}

// Request for get reservation by Id.
message GetReservationByIdRequest {
    // Id of the request reservation.
    optional int64 reservation_id = 1;
    optional bool apiCallBlock = 2;
}

// Reqeust for create a new reservation.
message CreateReservationRequest {
    // Reservation needs to store.
    optional Reservation reservation = 1;
}

// Request for delete a existing reservation.
message DeleteReservationByIdRequest {
    // Id of reservation needs to delete.
    optional int64 reservation_id = 1;
    // reservation set for delayed deletion. if true keep reservation in historical cache.
    optional bool deployed = 2 [default = false];
}

// Request for get reservations by status.
message GetReservationByStatusRequest {
    // status need to filter by.
    optional ReservationStatus status = 1;
}

// Reqeust for update a reservation.
message UpdateReservationByIdRequest {
    // Id of reservation needs to update.
    optional int64 reservation_id = 1;

    // Reservation needs to store.
    optional Reservation reservation = 2;
}

// Request for update a list of reservations.
message UpdateReservationsRequest {
    // A list of reservations need to update.
    repeated Reservation reservation = 1;
}

// Request for update future and expired reservations.
message UpdateFutureAndExpiredReservationsRequest {
    // A list of reservations need to update.
}

message UpdateConstraintMapRequest {
    repeated ReservationConstraintInfo reservationContraintInfo = 1;
}

message UpdateConstraintMapResponse {
    required int64 count = 1;
}

message UpdateFutureAndExpiredReservationsResponse {
    // The number of reservations that are activated by the RPC.
    // If this number is greater than 0, the reservation service will be kicking off
    // another reservation plan to place the activated reservations.
    optional int64 activated_reservations = 1;

    // The number of reservations that are now expired, and got deleted.
    optional int64 expired_reservations_removed = 2;
}

message GetBuyersOfExistingReservationsRequest {

}

message GetBuyersOfExistingReservationsResponse {
    repeated .market.InitialPlacementBuyer initialPlacementBuyer = 1;
}

// A service responsible for Reservation related request.
service ReservationService {

    // Get all reservations.
    rpc GetAllReservations(GetAllReservationsRequest) returns (stream Reservation);

    // Get reservation by reservation Id.
    rpc GetReservationById(GetReservationByIdRequest) returns (Reservation);

    // Get reservation by reservation status.
    rpc GetReservationByStatus(GetReservationByStatusRequest) returns (stream Reservation);

    // Create a new reservation.
    rpc CreateReservation(CreateReservationRequest) returns (Reservation);

    // Update future and expired reservation.
    rpc UpdateFutureAndExpiredReservations(UpdateFutureAndExpiredReservationsRequest)
        returns (UpdateFutureAndExpiredReservationsResponse);

    // Delete a existing reservation.
    rpc DeleteReservationById(DeleteReservationByIdRequest) returns (Reservation);

    // Update a existing resertion with a new reservation.
    rpc UpdateReservationById (UpdateReservationByIdRequest) returns (Reservation);

    // Update a list of reservations together.
    rpc UpdateReservations (UpdateReservationsRequest) returns (stream Reservation);

    // Update a existing resertion with a new reservation.
    rpc UpdateConstraintMap (UpdateConstraintMapRequest) returns (UpdateConstraintMapResponse);

    //Get all the initial placement buyers to be sent to market.
    rpc GetBuyersOfExistingReservations (GetBuyersOfExistingReservationsRequest) returns (GetBuyersOfExistingReservationsResponse);
}