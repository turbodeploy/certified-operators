syntax = "proto2";
package plan;

option java_package = "com.vmturbo.common.protobuf.plan";

// A Plan Destination is an endpoint to which a plan can be exported. Probes that
// support the Plan Export interface include plan destinations in discovery to
// identify the endpoints to which they can export plans.
message PlanDestination {
    // plan destination identifier -- Assigned by Plan Orchestrator.
    optional int64 oid = 1;

    // The ID provided by the probe. (Discovered).
    optional string external_id = 2;

    // A name for the destination, for display to users. (Discovered)
    optional string display_name = 3;

    // Generic properties for the destination, provided by the probe.
    // These are round-tripped back to the probe when requesting an
    // export to this destination. (Discovered)
    map<string, string> property_map = 4;

    // The target which discovered the destination, and to which exports to the
    // destination should be sent. (Discovered)
    optional int64 target_id = 5;

    // Whether the destination already has a plan exported to it, if known.
    // The UI can use this to warn the user that a new export to this destination
    // will overwrite a previous one. (Discovered)
    optional bool has_exported_data = 6;

    // Criteria defining which plans can be exported to this destination. (Discovered)
    optional PlanDestinationCriteria criteria = 7;

    // The status of the most recent export to this destination. (Managed by Plan Orchestrator)
    optional PlanExportStatus status = 8;

    // The plan market last exported to this destination. (Managed by Plan Orchestrator)
    optional int64 market_id = 9;
}

message PlanDestinationCriteria {
    // If supplied, this destination is only valid for plans involving this account.
    optional int64 account_id = 1;
}

message PlanExportStatus {
    // The state of the plan destination and any current export operation.
    required PlanExportState state = 1;

    // Current export progress (percentage 0..100)
    required int32 progress = 2;

    // A string describing the state of any export to this destination
    optional string description = 3;

    // Indicates the current export status of an export operation to the destination.
    enum PlanExportState {
        // No export had been attempted yet.
        NONE = 0;

        // Last export request was rejected.
        REJECTED = 1;

        // An export is in progress.
        IN_PROGRESS = 2;

        // Last export finished successfully.
        SUCCEEDED = 3;

        // Last export terminated due to error.
        FAILED = 4;
    }
}

// A notification about events relating to plan export or plan destinations, broadcast from the
// plan orchestrator to any components that care to listen.
message PlanExportNotification {
    // The destination changed status. This happens as the export continues through its stages,
    // until it eventually reaches a terminal state (SUCCEEDED, FAILED, REJECTED).
    message DestinationUpdate {
        required PlanDestination updatedDestination = 1;
    }

    // The type of notification.
    oneof type {
        // The destination changed state.
        DestinationUpdate destinationStateUpdate = 1;

        // The plan changed state/status.
        DestinationUpdate destinationProgressUpdate = 2;
    }
}

message PlanDestinationID {
    optional int64 id = 1;
}

message GetPlanDestinationResponse {
    // If present, the destination associated with the input ID.
    // If not present, the requested destination does not exist.
    optional PlanDestination destination = 1;
}

// Response from uploading plan destinations.
message StoreDiscoveredPlanDestinationsResponse {}

// Query some or all plan destinations.
message GetPlanDestinationsRequest {
    // If given, only get destinations associated with the given BusinessAccount.
    optional int64 account_id = 1;
}

message PlanExportRequest {
    required int64 destination_id = 1;
    required int64 market_id = 2;
}

message PlanExportResponse {
    // If present, the destination associated with the input ID. The state and
    // description fields will indicate if the request succeeded (IN_PROGRESS)
    // or if there was a problem (REJECTED, FAILED).
    // If not present, the requested destination does not even exist.
    optional PlanDestination destination = 1;
}

// A service responsible for plan export and plan destination operations.
service PlanExportService {
    // Get a specific Plan Destination by ID
    rpc GetPlanDestination(PlanDestinationID) returns (GetPlanDestinationResponse);

    // Get destinations matching a query
    rpc GetPlanDestinations(GetPlanDestinationsRequest) returns (stream PlanDestination);

    // Stores discovered plan destinations
    rpc StoreDiscoveredPlanDestinations (stream PlanDestination) returns (StoreDiscoveredPlanDestinationsResponse);

    // Initiate a plan export
    rpc StartPlanExport(PlanExportRequest) returns (PlanExportResponse);
}
