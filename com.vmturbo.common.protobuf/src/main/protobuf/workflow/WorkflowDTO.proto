syntax = "proto2";
package workflow;

option java_package = "com.vmturbo.common.protobuf.workflow";

import "action/ActionDTO.proto";

// A 'Workflow' represents an executable unit provided by an Orchestration target. The Workflow
// is discovered and recorded in Action Executor. Later, the Workflow may be associated with
// an Automation Policy which, when applied, will contact the Orchestration target to effect
// the action execution.
// the message 'Workflow', containing a WorkflowInfo, will be defined in the next story.
message Workflow {
    optional int64 id = 1;
    optional WorkflowInfo workflowInfo = 2;
}

// A WorkflowInfo captures the information discovered from an Orchestration target.
message WorkflowInfo {
    // The internal name of the workflow discovered from the target.
    optional string name = 1;

    // The user-facing name of the workflow discovered from the target.
    optional string displayName = 2;

    // The ID of the target that discovered the workflow.
    // This field will always be set.
    optional int64 target_id = 3;

    // Data to define the parameters which this workflow expects as defined using the target's ui.
    repeated WorkflowParameter workflow_param = 4;

    // Data to define the properties that define this workflow
    repeated WorkflowProperty workflow_property = 6;

    // Human readable descripton of the workflow discovered from the target
    optional string description = 5;

    // following properties apply to Action Script workflows

    // Entity type to which this workflow may apply; missing means all
    optional int32 entity_type = 7;

    // full path to action script executable on remote server (required for action scripts)
    optional string script_path = 8;

    // Action type to which workflow may apply; missing means all
    optional action.ActionType action_type = 9;

    // phase of action execution to which this workflow may apply ; missing means all
    optional action.ActionPhase action_phase = 10;

    // time limit for execution of this workflow; missing means default applies
    optional int64 time_limit_seconds = 11;

    // Determines if the action is sent to the workflow target using public API message format
    optional bool apiMessageFormatEnabled = 12[default = false];

    // the type of workflow
    optional OrchestratorType type = 13;

    // the information about workflow that is specific to its type
    oneof type_specific_info {
        WebhookInfo webhook_info = 14;
    }

    // information about the webhook
    message WebhookInfo {
        // the endpoint that webhook made call to
        optional string url = 1;
        // the type of http method made to webhook
        optional HttpMethod http_method = 2;
        // the template for the body of workflow
        optional string template = 3;

        // the type of http method made to webhook
        enum HttpMethod {
            GET = 1;
            POST = 2;
            PUT = 3;
            DELETE = 4;
        }

        // Flag set to true when self-signed certificates are trusted.
        optional bool trust_self_signed_certificates = 4;
    }
}

// A descriptor for an input parameter to a workflow as specified by the workflow author.
// Note that, in the current Turbonomic implementation, only a fixed dictionary of parameters for
// certain EntityTypes and Action Types are defined and populated (see WorkflowExecutor).
// It is up to the workflow author to be aware of these parameters and make appropriate use of them.
message WorkflowParameter {
    // The name of the input parameter.
    optional string name = 1;
    // A human-readable description of the function of this input parameter.
    optional string description = 2;
    // The datatype of the input parameter - the set of legal datatype string values isn't known.
    required string type = 3 [default = "String"];
    // Is this parameter mandatory?
    optional bool mandatory = 4 [default = true];
}

// A descriptor for a key/value pair for a Workflow Property
message WorkflowProperty {
    // The name of the property
    optional string name = 1;
    // the string value of the property
    optional string value = 2;
}

// A request to persist the workflows discovered from the given target_id. This request represents
// all the Workflows to be associated with this target. In other words, any prior workflow
// associated with this target should be discarded.
message StoreDiscoveredWorkflowsRequest {
    // the OID of the target from which these workflows were discovered
    optional int64 target_id = 1;
    // the workflows discovered from this target
    repeated WorkflowInfo discovered_workflow = 2;
}

// Reserved for future filtering queries, organizing workflows by Orchestrator (target) Type.
// Copied from com.vmturbo.api.enums.OrchestratorType - but the enum value AWS_Service_Catalog("AWS")
// is under "negotiation", so it is omitted here.
enum OrchestratorType {
    // Cisco UCS Director
    UCSD = 1;
    // Turbonomic ActionScript
    ACTION_SCRIPT = 2;
    // ServiceNow workflow
    SERVICENOW = 3;
    // ActionStream kafka workflow
    ACTIONSTREAM_KAFKA = 4;
    // Webhook workflow
    WEBHOOK = 5;
}
// The response to a request to store discovered workflows
message StoreDiscoveredWorkflowsResponse { }

// Request to fetch a single workflow given the ID
message FetchWorkflowRequest {
    // the ID of the workflow to request
    optional int64 id = 1;
}

// Request to fetch all the workflows satisfying this request
// TODO: currently no filtering or paging implemented
message FetchWorkflowsRequest {
    // the type of orchestrator to filter on; if absent, return all
    optional OrchestratorType orchestrator_type = 1;

    // the targets discovered these workflows
    repeated int64 target_id = 3;
}

// Response for fetching a single workflow by id.  If the workflow is not found, the 'workflow'
// field will be empty.
message FetchWorkflowResponse {
    // the Workflow fetched
    optional Workflow workflow = 1;
}

// Response for fetching multiple workflows.
message FetchWorkflowsResponse {
    // the Workflows fetched
    repeated Workflow workflows = 1;
    // TODO: support paginated results when the request supports pagination
}

// Request for creating workflow
message CreateWorkflowRequest {
    // the information about the workflow to create
    optional Workflow workflow = 1;
}

// Response for creating a workflow
message CreateWorkflowResponse {
    // the information about the created workflow
    optional Workflow workflow = 1;
}

// Request for updating a workflow
message UpdateWorkflowRequest {
    // id of workflow to update
    optional int64 id = 1;
    // the updated workflow information
    optional Workflow workflow = 2;
}

// Response for updating a workflow
message UpdateWorkflowResponse {
    // the updated workflow
    optional Workflow workflow = 1;
}

// Request for deleting workflow
message DeleteWorkflowRequest {
    // id of workflow to delete
    optional int64 id = 1;
}

// Response for deleting a workflow
message DeleteWorkflowResponse {
}

service DiscoveredWorkflowService {
    // Store workflows discovered from a single Orchestration target
    rpc StoreDiscoveredWorkflows(StoreDiscoveredWorkflowsRequest) returns (StoreDiscoveredWorkflowsResponse);
}

// Access to the Workflows store.
service WorkflowService {
    // Retrieve workflows from the Workflows store
    // TODO: implement paging
    rpc FetchWorkflows(FetchWorkflowsRequest) returns (FetchWorkflowsResponse);

    // Retrieve an individual workflow by ID; if not found, then the 'workflow' field will
    // be empty.
    rpc FetchWorkflow(FetchWorkflowRequest) returns (FetchWorkflowResponse);

    // creates a workflow
    rpc createWorkflow(CreateWorkflowRequest) returns (CreateWorkflowResponse);

    // updates a workflow
    rpc updateWorkflow(UpdateWorkflowRequest) returns (UpdateWorkflowResponse);

    // delete a workflow
    rpc deleteWorkflow(DeleteWorkflowRequest) returns (DeleteWorkflowResponse);
}
