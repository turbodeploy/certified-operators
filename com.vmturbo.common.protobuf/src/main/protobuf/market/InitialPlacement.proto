syntax = "proto2";

package market;

option java_package = "com.vmturbo.common.protobuf.market";

import "topology/TopologyDTO.proto";

message FindInitialPlacementRequest {
    // Placement related information.
    repeated InitialPlacementDTO initialPlacement = 1;
}

message InitialPlacementDTO {
    // List of buyers.
    repeated InitialPlacementBuyer initialPlacementBuyer = 1;

  // Specification to determine what the type of behavior Placement entities should take.
  optional .topology.ReservationMode reservation_mode = 2;

  // Specification to determine what group type entities should be placed on corresponding to
  // the Mode of the reservation.
  optional .topology.ReservationGrouping reservation_grouping = 3;

  // The reservation id.
  optional int64 id = 4;

  // The potential providers for this placement restricting initial placement to these providers
  // based on the passed providers' entity type.
  repeated int64 providers = 5;
}

message InitialPlacementBuyer {
    // The id of reservation entity.
    optional int64 buyerId = 1;

    // A list of shopping lists.
    repeated InitialPlacementCommoditiesBoughtFromProvider initialPlacementCommoditiesBoughtFromProvider = 2;

    message InitialPlacementCommoditiesBoughtFromProvider {

        optional int64 commoditiesBoughtFromProviderId = 1;

        // list of commodities bought group
        optional .topology.TopologyEntityDTO.CommoditiesBoughtFromProvider commoditiesBoughtFromProvider = 2;
    }
    // The reservation id, a reservation may contain many reservation entities.
    optional int64 reservationId = 3;

    // reservation set for delayed deletion. if true keep reservation in historical cache.
    optional bool deployed = 4  [default = false];
}

message InitialPlacementBuyerPlacementInfo {

    optional int64 buyer_id = 1;

    optional int64 commoditiesBoughtFromProviderId = 2;

    oneof initial_placement_result {

        InitialPlacementSuccess initial_placement_success = 3;
        InitialPlacementFailure initial_placement_failure = 4;
    }
}

message InitialPlacementSuccess {
    required int64 provider_oid = 1;
    optional .topology.CommodityType cluster = 2;
}

message InitialPlacementFailure {
    repeated .topology.TopologyEntityDTO.UnplacementReason unplaced_reason = 1;
}

message FindInitialPlacementResponse {
    repeated InitialPlacementBuyerPlacementInfo initialPlacementBuyerPlacementInfo = 1;
}

message DeleteInitialPlacementBuyerRequest {
    repeated int64 buyerId = 1;
    // reservation set for delayed deletion. if true keep reservation in historical cache.
    optional bool deployed = 2  [default = false];
}

message DeleteInitialPlacementBuyerResponse {
    optional bool result = 1;
}

message GetProvidersOfExistingReservationsRequest {

}

message GetProvidersOfExistingReservationsResponse {
    repeated InitialPlacementBuyerPlacementInfo initialPlacementBuyerPlacementInfo = 1;
}

message UpdateHistoricalCachedEconomyRequest {

}

message UpdateHistoricalCachedEconomyResponse {
}

service InitialPlacementService {
    rpc FindInitialPlacement (FindInitialPlacementRequest) returns (FindInitialPlacementResponse);
    rpc DeleteInitialPlacementBuyer (DeleteInitialPlacementBuyerRequest) returns (DeleteInitialPlacementBuyerResponse);
    rpc GetProvidersOfExistingReservations (GetProvidersOfExistingReservationsRequest) returns (GetProvidersOfExistingReservationsResponse);
    rpc UpdateHistoricalCachedEconomy (UpdateHistoricalCachedEconomyRequest) returns (UpdateHistoricalCachedEconomyResponse);
}
