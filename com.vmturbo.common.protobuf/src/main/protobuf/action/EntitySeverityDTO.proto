syntax = "proto2";
package action;

option java_package = "com.vmturbo.common.protobuf.action";

import "action/ActionDTO.proto";
import "common/Pagination.proto";

// A description of the severity for an entity.
// Entity Severity is calculated by finding the most severe action among
// all currently recommended actions that affect a given service entity.
message EntitySeverity {
    // The ID of the entity whose severity this is.
    optional int64 entity_id = 1;

    // The severity of the corresponding entity.
    optional Severity severity = 2;
}

// How many entities map to a specific type of severity.
message SeverityCount {
    // The severity in question.
    optional Severity severity = 1;

    // The number of entities that map to this severity.
    optional int64 entity_count = 2;
}

// A message used to address multiple actions within a topology context.
message MultiEntityRequest {
    // The topology context the actions belongs to.
    // There is one real-time topology context, and a context per-plan.
    optional int64 topology_context_id = 1;

    // The IDs of the entities being addressed.
    repeated int64 entity_ids = 2;

    // If not set pagination parameters, the response will contains all request entity oids.
    // If use the default instance of PaginationParameters. The backend
    // will enforce a default ordering and limit, and retrieve the first page.
    optional common.PaginationParameters pagination_params = 3;
}

message EntitySeveritiesResponse {
    repeated EntitySeverity entity_severity = 1;

    optional common.PaginationResponse pagination_response = 2;
}

message SeverityCountsResponse {
    // The counts for entities in the request to GetSeverityCounts known to the
    // service are mapped to a specific severity.
    repeated SeverityCount counts = 1;

    // Entities unknown to the service are counted in the unknown_entity_count.
    optional int64 unknown_entity_count = 2;
}

// A service responsible for retrieving entity severities.
service EntitySeverityService {
    // Get severity information for service entities by the service entity ids
    rpc GetEntitySeverities(MultiEntityRequest) returns (EntitySeveritiesResponse);

    // Get the counts of how many severities in the request map to corresponding severities.
    //
    // There will be one entry per-contained severity. If no entities in the request
    // matched a given severity, there will be no entry for that severity rather than
    // an entry with 0.
    //
    // If the request contained an entity unknown to the service, that unknown entity will
    // be mapped to an UNKNOWN level severity.
    rpc GetSeverityCounts(MultiEntityRequest) returns (SeverityCountsResponse);
}