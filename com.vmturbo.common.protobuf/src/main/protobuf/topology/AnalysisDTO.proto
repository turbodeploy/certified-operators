syntax = "proto2";
package topology;

option java_package = "com.vmturbo.common.protobuf.topology";

import "plan/Scenario.proto";
import "plan/PlanProject.proto";

message StartAnalysisRequest {
    // The ID of the plan this analysis request
    // should be associated with.
    required int64 plan_id = 1;

    // The type of plan project that is requesting the analysis.
    //
    // At the time of this writing (Nov 28 2017), not all plans are formally associated
    // with a plan project. In the future, every plan will be part of some
    // plan project.
    optional plan.PlanProjectType plan_project_type = 5 [default = USER];

    // The ID of the topology to run the analysis on.
    // If not set, run the analysis on the real-time
    // topology.
    optional int64 topology_id = 2;

    // The requested changes to the topology.
    // The changes will be applied on a best-effort basis.
    // For example, requests to add a clone of a non-existing entity
    // will be ignored.
    repeated plan.ScenarioChange scenario_change = 3;

    // The scope of the plan, if one was specified.
    optional plan.PlanScope plan_scope = 4;

    // The type of the plan initiated.
    optional string plan_type = 6;

    // The sub-type of the plan initiated.
    optional string plan_sub_type = 7;

    // Plan global setting
    optional plan.PlanGlobalSetting __deprecated_plan_global_setting = 8 [deprecated = true];

    // A map of entity types to entity OIDs to represent a scoped user.
    map<int32, EntityOids> user_scope_entities_by_type = 9;
}

message StartAnalysisResponse {
    // The ID of the topology that the topology processor will construct and broadcast.
    optional int64 topology_id = 1;
}

message EntityOids {
    // The oids of the entities.
    repeated int64 entity_oids = 1;
}

// The Analysis service is the interface to trigger analyses in
// the system.
service AnalysisService {
    // Trigger an analysis. The Topology Processor will process the request,
    // make changes to the desired topology, and broadcast the topology
    // to all listeners (just like in the real-time case). Updates about
    // the results of the analysis will come in via notifications from various
    // components in the system.
    rpc StartAnalysis(StartAnalysisRequest) returns (StartAnalysisResponse);
}