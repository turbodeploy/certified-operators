syntax = "proto2";
package topology;

option java_package = "com.vmturbo.common.protobuf.topology";

import "plan/PlanDTO.proto";

message TopologyEntityDTO {

    // type of entity
    required int32 entityType = 1;

    // object identifier
    required int64 oid = 2;

    // name to display in the UI
    optional string displayName = 3;

    // list of commodities sold
    repeated CommoditySoldDTO commoditySoldList = 4;

    // list of commodities bought group
    repeated CommoditiesBoughtFromProvider commodities_bought_from_providers = 5;

    // The commodities bought by this entity from a given provider. An entity may buy multiples sets
    // of commodities from the same provider and may not have providers. Consider the following potential
    // CommodityBoughtGroupings:
    // ["host1" -> { FOO, BAR }] and ["host1" -> { FOO }, "host1" -> { BAR }] and [ -> { QUX }]
    // In the top expression, the entity must buy FOO and BAR commodities from THE SAME provider and
    // that provider is currently "host1". If the market were to try to have this entity buy BAR commodity
    // from "host2" instead of "host1", the entity would also have to buy its FOO from "host2" as well.
    // In the second expression, the entity also must buy FOO and BAR commodities, but those are permitted
    // to come from DIFFERENT providers, it just happens that at this moment in time they are coming
    // from the same "host1" provider. So if the market were to decide to have this entity buy BAR
    // from "host2", it could continue to buy FOO from "host1" without issue.
    // In the third expressions, the entity want to but QUX, but it doesn't have a particular supplider.
    message CommoditiesBoughtFromProvider {
        // id of provider, it could be empty when the entity is currently unplaced, or not have a
        // supplier for a particular set of commodities that it is buying
        optional int64 provider_id = 1;

        // entity type of provider. it represents commodities should bought
        // from which kind of entity type. Right now, it will not been used by Market, but in future,
        // this value could be useful in Market.
        // TODO: To make sure provider entity type is always non-empty.
        optional int32 provider_entity_type = 2;

        // a list of commodities bought from this provider
        repeated CommodityBoughtDTO commodity_bought = 3;

        // Whether the group of commodities bought can be moved from one provider to another provider.
        // If unset, the movable value for an entity will be calculated based on its entityType from
        // the list of movable types in AnalysisUtil.
        optional bool movable = 4;
    }

    // entity state
    optional EntityState entityState = 6 [default = POWERED_ON];

    // entity properties in free (string <-> string) form, used for probe-defined values.
    map<string, string> entityPropertyMap = 7;

    // Contains all settings for market analysis purpose.
    optional AnalysisSettings analysis_settings = 8;

    message AnalysisSettings {
        // Whether the entity could be a potential provider for consumers.
        optional bool is_available_as_provider = 1 [default = true];

        // ShopsTogether is set by the Probe and will be passed to Market.
        optional bool shop_together = 2 [default = false];

        // Whether the Market can clone this entity.
        // If unset, the clonable value for an entity will be calculated based on its entityType from
        // the list of ENABLE_PROVISION in EntitySettings.
        optional bool cloneable = 3;

        // Whether the Market can suspend this entity. And it's default value should be true.
        // If unset, the suspendable value for an entity will be calculated in Market component based
        // on its entityType from the list of ENABLE_SUSPEND types in EntitySettings.
        optional bool suspendable = 4 [default = true];

        // The desired utilization target value. Together with the
        // desired_utilization_range below, they describe the min and max
        // desired utilization values.
        optional float desired_utilization_target = 5 ;

        // The desired utilization target range
        optional float desired_utilization_range = 6 ;
    }

    optional Origin origin = 10;
    optional Edit edit = 11;

    // The Origin tracks where and how an entity came to be included in the topology.
    // An entity can have one of three possible Origins:
    //   1) discovered from a probe target (or multiple targets).
    //   2) created by a Placement Reservation
    //   3) Added as part of a plan scenario, such as an entity added by an "add workload" config,
    //      or headroom vm's added for cluster headroom calculation.
    message Origin {
        oneof origin_type {
            DiscoveryOrigin discovery_origin = 1;
            ReservationOrigin reservation_origin = 2;
            PlanOrigin plan_origin = 3;
        }
    }

    // An entity that was discovered by a probe.
    message DiscoveryOrigin {
        // The ids of the one or more targets that discovered this entity.
        //
        // If more than one target is present in the list, those targets may or may not be associated
        // with the same type of probe.
        //
        // An example where the targets belong to the same type of probe: 3 VC targets discover
        // the same shared storage
        //
        // An example where the targets belong to different types of probe: 1 VC target and 1 NetApp target
        // discover the same storage device.
        //
        // The id of at least one target will always be in this list.
        // No guarantees are made about the order of the targets in the list.
        repeated int64 discovering_target_ids = 1;

        // The time that the data for this entity was last updated.
        //
        // If the entity was discovered by multiple targets, this time is the time at which the
        // most recent update across all those targets provided new information for this entity.
        //
        // Important note: This is the time that TopologyProcessor received this data from the probe,
        // not the actual time that the probe retrieved the information from the target.
        //
        // This field may be used as a heuristic for the recency of the data in the absence of better information.
        // The time is in "computer time" and not necessarily UTC, however, times on TopologyEntityDTOs
        // are comparable. See documentation in Java's System#currentTimeMillis() for further details.
        optional int64 last_updated_time = 2;
    }

    // an entity that was created via a Placement reservation. Has a reference to it's reservation
    // id.
    message ReservationOrigin {
        required int64 reservation_id = 1;
    }

    // an entity can be created by a plan configuration to support plan scenarios, such as "Add
    // Workload", "Replace". Phantom Entities are also created in special situations, such as for
    // calculating headroom in the cluster headroom plan. The plan origin for these entities will
    // refer to the plan id the entity was added to support.
    message PlanOrigin {
        required int64 plan_id = 1;
    }

    // if the entity has met a (potentially grisly) end, describe it. Currently there are only two
    // edits being tracked:
    //   1) Removed -- the entity was Removed as part of a "remove" or "decommission" plan scenario
    //   2) Replaced -- the entity was Replaced in a plan scenario change.
    // We have discussed other possible types of edits in the future, such as "change workload", but
    // those are not necessary for modeling at this time and have alternate approaches available as
    // well.
    message Edit {
        oneof change_type {
            Removed removed = 1;
            Replaced replaced = 2;
        }
    }

    // this entity was Removed as part of a place scenario configuration.
    message Removed {
        required int64 plan_id = 1; // the plan calling for the entity's removal
    }

    // this entity was Replaced by another entity as part of a place scenario configuration.
    // We could potentially track the "replaced by" entity id here too, but that requires additional
    // complexity. We don't seem to need it yet, so leaving it out.
    message Replaced {
        required int64 plan_id = 1; // the plan calling for the entity's replacement
    }
}

// Message to hold original topology broadcast message.
message Topology {
    // The ID of the topology
    required int64 topology_id = 1;

    oneof segment {
        Start start = 2;
        Data data = 3;
        End end = 4;
    }

    // Marker message, declaring the start of topology broadcast
    message Start {
        // The basic information of topology
        optional TopologyInfo topology_info = 1;
    };
    // Message to hold real data of the topology - it is the chunk
    message Data {
        // The entities in the topology
        repeated TopologyEntityDTO entities = 1;
    }
    // Message to appear at the very end of topology broadcast
    message End {
        // Total number of entities sent (can be used for integrity checks)
        required uint64 total_count = 1;
    }
}

// Message to hold topology, projected by market.
message ProjectedTopology {
    // GeneratedId of the topology created after the plan
    required int64 topology_id = 1;

    oneof segment {
        Start start = 2;
        Data data = 3;
        End end = 4;
    }

    // Marker message, declaring the start of topology broadcast
    message Start {
        // The basic information of the source topology
        optional TopologyInfo source_topology_info = 1;
    };
    // Message to hold real data of the topology - it is the chunk
    message Data {
        // The entities in the topology
        repeated TopologyEntityDTO entities = 1;
    }
    // Message to appear at the very end of topology broadcast
    message End {
        // Total number of entities sent (can be used for integrity checks)
        required uint64 total_count = 1;
    }
}

// Message to hold basic fields of topology
message TopologyInfo {
    // The ID of the topology
    optional int64 topology_id = 1;

    // For a plan it is the plan ID, for real time topology it is a number that uniquely identifies the source topology processor
    optional int64 topology_context_id = 2;

    // The time of the topology created.
    optional int64 creation_time = 3;

    // The type of topology
    optional TopologyType topology_type = 4 [default = REALTIME];

    // If the topology is to be scoped, the OIDs specified here seed the scoping expansion.
    repeated int64 scope_seed_oids = 5;

    // Plan-specific topology information.
    // Present IFF TopologyType is PLAN.
    optional PlanTopologyInfo plan_info = 6;
}

// Information specific to a topology generated for the purpose of a plan.
message PlanTopologyInfo {
    // The type of the plan project that initiated the topology broadcast.
    optional plan.PlanProjectType plan_type = 1 [default = USER];
}

enum EntityState {
    POWERED_ON = 0;
    POWERED_OFF = 1;
    SUSPENDED = 2;
    MAINTENANCE = 3;
    FAILOVER = 4;
    UNKNOWN = 5;
}

enum TopologyType {
    REALTIME = 0;
    PLAN = 1;
}

message CommodityType {
    // type of commodity
    required int32 type = 1;

    // the key of this commodity type
    optional string key = 2;
}

message CommodityBoughtDTO {

    required CommodityType commodityType = 1;

    optional double used = 2 [default = 0.0];

    optional double peak = 3 [default = 0.0];

    // Whether the commodity is active or not
    optional bool active = 4 [default = true];
}

message CommoditySoldDTO {

    required CommodityType commodityType = 1;

    optional double used = 2 [default = 0.0];

    optional double peak = 3 [default = 0.0];

    optional double capacity = 4 [default = 100];

    optional double effectiveCapacityPercentage = 5 [default = 100];

    optional double reservedCapacity = 6 [default = 0.0];

    optional bool isResizeable = 7 [default = true];

    optional bool isThin = 8 [default = true];

    // For DSPM_ACCESS commodity this is the id of the PhysicalMachine associated with the Storage
    // that sells this commodity. For DATASTORE commodity this is the id of the Storage associated
    // with the PhysicalMachine that sells this commodity.
    optional int64 accesses = 9;

    // Whether the commodity is active or not
    optional bool active = 10 [default = true];

    // related to resize increment
    optional float capacity_increment = 11 [default = 1.0];

    // The historic max value(within the data retention period)
    optional double max_quantity = 12;
}

// A request to assemble the current topology and broadcast it to all listeners for the topology.
message TopologyBroadcastRequest {
    // Currently no properties.
}

// The response to a request to broadcast the topology.
message TopologyBroadcastResponse {
    // Currently no properties.
    // TODO: Make topology broadcasts a first-class object similar to all TP operations (discovery, action, etc).
}

service TopologyService {
    // Request that the topology processor broadcast the latest topology to all its listeners.
    rpc RequestTopologyBroadcast(TopologyBroadcastRequest) returns (TopologyBroadcastResponse);
}
