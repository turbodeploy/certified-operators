<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.vmturbo</groupId>
        <artifactId>com.vmturbo.components</artifactId>
        <version>${revision}</version>
        <relativePath>../com.vmturbo.components/pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>com.vmturbo.group</artifactId>

    <properties>
        <swagger.component.name>Group</swagger.component.name>
        <maven.build.timestamp.format>yyyyMMddHHmmssSSS</maven.build.timestamp.format>

        <java.version>1.8</java.version>
        <guava-retrying.version>2.0.0</guava-retrying.version>
        <immutables.version>2.3.10</immutables.version>
        <immutables-javaslang.version>0.1.0</immutables-javaslang.version>
        <ical4j.version>3.0.10</ical4j.version>

        <!-- TODO: user and password configuration should NOT be checked into source control -->
        <db.url>jdbc:mysql://localhost:3306</db.url>
        <db.username>root</db.username>
        <db.password>vmturbo</db.password>
        <db.schema>group_component_build_${maven.build.timestamp}</db.schema><!-- group is a keyword in SQL, so name it group_component-->
        <db.outputSchema>group_component</db.outputSchema>
        <db.driver>org.mariadb.jdbc.Driver</db.driver>

        <it.suite.name>group_it_test</it.suite.name>
        <pre-integration-test-phase>pre-integration-test</pre-integration-test-phase>
        <integration-test-phase>integration-test</integration-test-phase>
    </properties>

    <dependencies>
        <!-- Common Dependencies shared with Legacy -->

        <!-- XL project dependencies -->
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.group.api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>action-orchestrator-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.repository.api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>common-protobuf</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>auth-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>topology-processor-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>identity</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.plan.orchestrator.api</artifactId>
        </dependency>
        <!-- Other Dependencies -->
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>
            <version>${jooq.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <dependency>
            <groupId>com.arangodb</groupId>
            <artifactId>arangodb-java-driver</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.rholder</groupId>
            <artifactId>guava-retrying</artifactId>
            <version>${guava-retrying.version}</version>
        </dependency>
        <dependency>
            <groupId>org.immutables</groupId>
            <artifactId>value</artifactId>
            <version>${immutables.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.immutables</groupId>
            <artifactId>func</artifactId>
            <version>${immutables.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.immutables.javaslang</groupId>
            <artifactId>javaslang-encodings</artifactId>
            <version>${immutables-javaslang.version}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>${log4j2.Version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>${log4j2.Version}</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>${log4j2.Version}</version>
        </dependency>
        <dependency>
            <groupId>io.javaslang</groupId>
            <artifactId>javaslang</artifactId>
            <version>${javaslang.version}</version>
        </dependency>
        <dependency>
            <groupId>io.javaslang</groupId>
            <artifactId>javaslang-match</artifactId>
            <version>${javaslang.version}</version>
        </dependency>
        <dependency>
            <groupId>io.javaslang</groupId>
            <artifactId>javaslang-jackson</artifactId>
            <version>${javaslang.version}</version>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>sql-utils</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>sql-test-utils</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.retry</groupId>
            <artifactId>spring-retry</artifactId>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.mnode.ical4j</groupId>
            <artifactId>ical4j</artifactId>
            <version>${ical4j.version}</version>
        </dependency>

        <!-- Test Scope -->
        <dependency>
            <groupId>org.assertj</groupId>
            <artifactId>assertj-core</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.javaslang</groupId>
            <artifactId>javaslang-test</artifactId>
            <version>${javaslang.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>it.unimi.dsi</groupId>
            <artifactId>fastutil</artifactId>
        </dependency>
    </dependencies>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <configuration>
                    <suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                  <configuration>
                    <serverId>docker-registry</serverId>
                  </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>com.vmturbo.group.GroupComponent</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>migrate</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>migrate</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>clean-db</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <url>${db.url}</url>
                    <user>${db.username}</user>
                    <password>${db.password}</password>
                    <locations>
                        <!-- Configure to the same location as configured in Spring Boot..-->
                        <location>filesystem:${basedir}/src/main/resources/db/migration</location>
                    </locations>
                    <schemas>
                        <schema>${db.schema}</schema>
                    </schemas>
                </configuration>
            </plugin>
            <!-- See comment from michael-simons at https://github.com/spring-projects/spring-boot/issues/6975
                 on recommended configuration for a Spring Boot + Flyway + jOOQ setup-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <systemPropertyVariables>
                        <dbs.postgresDefault.host>${postgresHost}</dbs.postgresDefault.host>
                        <dbs.postgresDefault.port>${postgresPort}</dbs.postgresDefault.port>
                        <dbs.postgresDefault.userName>${postgresUserName}</dbs.postgresDefault.userName>
                        <dbs.postgresDefault.password>${postgresPassword}</dbs.postgresDefault.password>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
            <plugin>
                <!-- Specify the maven code generator plugin -->
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>
                <version>${jooq.version}</version>

                <!-- The plugin should hook into the generate goal -->
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>
                    <!-- JDBC connection parameters -->
                    <jdbc>
                        <driver>${db.driver}</driver>
                        <url>${db.url}/${db.schema}</url>
                        <user>${db.username}</user>
                        <password>${db.password}</password>
                    </jdbc>

                    <!-- Generator parameters -->
                    <generator>
                        <database>
                            <name>org.jooq.meta.mysql.MySQLDatabase</name>
                            <!-- Retrieve schema version from Flyway info table -->
                            <schemaVersionProvider>SELECT CONCAT_WS('_', '${db.outputSchema}', MAX(version)) from schema_version</schemaVersionProvider>
                            <includes>.*</includes>
                            <excludes>schema_version</excludes>
                            <schemata>
                                <schema>
                                    <inputSchema>${db.schema}</inputSchema>
                                    <outputSchema>${db.outputSchema}</outputSchema>
                                </schema>
                            </schemata>
                            <customTypes>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.group.PolicyDTO.PolicyInfo</name>
                                    <converter>com.vmturbo.group.policy.PolicyInfoConverter</converter>
                                </customType>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.setting.SettingProto.Setting.ValueCase</name>
                                    <converter>com.vmturbo.group.setting.SettingTypeConverter</converter>
                                </customType>
                            </customTypes>

                            <!-- Then, associate custom types with database columns -->
                            <forcedTypes>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.setting.SettingProto.Setting.ValueCase</name>
                                    <expression>.*\.setting_policy_setting\.setting_type</expression>
                                </forcedType>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.group.PolicyDTO.PolicyInfo</name>
                                    <expression>.*\.policy\.policy_data</expression>
                                </forcedType>
                                <forcedType>
                                    <name>BOOLEAN</name>
                                    <includeTypes>(?i:TINYINT\(1\))</includeTypes>
                                </forcedType>
                                <forcedType>
                                    <userType>
                                        com.vmturbo.platform.common.dto.CommonDTO.GroupDTO.GroupType
                                    </userType>
                                    <includeExpression>.*\.group_type</includeExpression>
                                    <converter>com.vmturbo.group.group.GroupTypeConverter</converter>
                                </forcedType>
                                <forcedType>
                                    <userType>
                                        com.vmturbo.common.protobuf.common.EnvironmentTypeEnum.EnvironmentType
                                    </userType>
                                    <enumConverter>true</enumConverter>
                                    <expression>.*\.grouping\.optimization_environment_type</expression>
                                </forcedType>
                            </forcedTypes>
                        </database>
                        <generate>
                            <pojos>true</pojos>
                            <pojosEqualsAndHashCode>true</pojosEqualsAndHashCode>
                        </generate>
                        <target>
                            <packageName>com.vmturbo.group.db</packageName>
                            <directory>target/generated-sources/jooq</directory>
                        </target>
                    </generator>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.github.kongchen</groupId>
                <artifactId>swagger-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>internal-swagger</id>
                        <configuration>
                            <apiSources>
                                <apiSource>
                                    <locations>
                                        <location>com.vmturbo.group</location>
                                        <location>com.vmturbo.common.protobuf.group</location>
                                        <location>com.vmturbo.common.protobuf.logging</location>
                                        <location>com.vmturbo.common.protobuf.setting</location>
                                        <location>com.vmturbo.common.protobuf.schedule</location>
                                        <location>com.vmturbo.components.common</location>
                                    </locations>
                                </apiSource>
                            </apiSources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.xolstice.maven.plugins</groupId>
                <artifactId>protobuf-maven-plugin</artifactId>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>no-run-postgres-container</id>
            <!-- set default for postgres port only if we're not going to spin up a postgres container -->
            <activation>
                <property>
                    <name>postgresContainer.skip</name>
                </property>
            </activation>
            <properties>
                <postgresPort>5432</postgresPort>
            </properties>
        </profile>
        <profile>
            <id>run-postgres-container</id>
            <!--
                If you don't want a postgres container to be spun up during the build in order to
                perform live DB tests, specify -DpostgresContainer.skip` on maven command line. In
                that case you will need to have a postgres server available in your environment,
                and the postgresHost and postgresPort properties can be used to configure access
                if they're different from localhost and 5432, respectively.
            -->
            <activation>
                <property>
                    <name>!postgresContainer.skip</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-postgres</id>
                                <phase>process-test-classes</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                                <configuration>
                                    <dockerHost>${fabricateDockerHost}</dockerHost>
                                    <showLogs>false</showLogs>
                                    <images>
                                        <image>
                                            <alias>postgres</alias>
                                            <name>${postgres-image}</name>
                                            <run>
                                                <!--
                                                pattern needs to start with "maven-" so jenkins builds
                                                will properly clean up leaked containers
                                                -->
                                                <containerNamePattern>maven-%a-%t-%i</containerNamePattern>
                                                <ports>
                                                    <port>postgresPort:5432</port>
                                                </ports>
                                                <env>
                                                    <POSTGRES_USER>${postgresUserName}</POSTGRES_USER>
                                                    <POSTGRES_PASSWORD>${postgresPassword}</POSTGRES_PASSWORD>
                                                </env>
                                                <wait>
                                                    <log>
                                                        <!--
                                                        CDATA prevents intellij from wrapping the search
                                                        string, which would break things.
                                                        We wait for a message that shows that timescale
                                                        is ready, and we wait to see it twice, since the
                                                        container's entry-point script includes an internal
                                                        restart.
                                                        -->
                                                        <![CDATA[(?s)database system is ready to accept connections.*database system is ready to accept connections]]>
                                                    </log>
                                                    <time>120000</time>
                                                </wait>
                                            </run>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-postgres</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                                <configuration>
                                    <dockerHost>${fabricateDockerHost}</dockerHost>
                                    <images>
                                        <image>
                                            <name>${postgres-image}</name>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>
