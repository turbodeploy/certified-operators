<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>com.vmturbo</groupId>
        <artifactId>Turbonomic-XL</artifactId>
        <version>${revision}</version>
        <relativePath>../build</relativePath>
    </parent>

    <artifactId>kibitzer</artifactId>

    <properties>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <addClasspath>true</addClasspath>
                            <mainClass>com.vmturbo.kibitzer.Kibitzer</mainClass>
                            <classpathPrefix>lib/</classpathPrefix>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <phase>prepare-package</phase>
                        <configuration>
                            <outputDirectory>${project.build.directory}/lib</outputDirectory>
                            <includeScope>runtime</includeScope>
                            <useBaseVersion>false</useBaseVersion>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <!--  new module, so no checkstyle suppressions needed -->
            </plugin>
            <plugin>
                <groupId>com.github.spotbugs</groupId>
                <artifactId>spotbugs-maven-plugin</artifactId>
                <version>${spotbugs.version}</version>
                <configuration>
                    <maxAllowedViolations>9</maxAllowedViolations>
                    <failOnError>true</failOnError>
                </configuration>
                <executions>
                    <execution>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <systemPropertyVariables>
                        <dbs.postgresDefault.host>${postgresHost}</dbs.postgresDefault.host>
                        <dbs.postgresDefault.port>${postgresPort}</dbs.postgresDefault.port>
                        <dbs.postgresDefault.userName>${postgresUserName}</dbs.postgresDefault.userName>
                        <dbs.postgresDefault.password>${postgresPassword}</dbs.postgresDefault.password>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>docker</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>pl.project13.maven</groupId>
                        <artifactId>git-commit-id-plugin</artifactId>
                    </plugin>
                    <plugin>
                        <groupId>com.spotify</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <configuration>
                            <imageName>${docker.image.prefix}/${project.artifactId}</imageName>
                            <imageTags>
                                <imageTag>${project.version}</imageTag>
                            </imageTags>
                            <labels>
                                <label>com.vmturbo.version=${project.version}</label>
                            </labels>
                            <serverId>docker-registry</serverId>
                            <baseImage>${docker.image.prefix}/vmt-component-base:${project.version}</baseImage>
                            <entryPoint>["/entrypoint.sh", "${project.build.finalName}.jar"]</entryPoint>
                            <exposes>
                                <port>8889</port>
                            </exposes>
                            <resources>
                                <resource>
                                    <targetPath>/</targetPath>
                                    <directory>${project.build.directory}</directory>
                                    <include>${project.build.finalName}.jar</include>
                                </resource>
                                <resource>
                                    <targetPath>/lib</targetPath>
                                    <directory>${project.build.directory}/lib</directory>
                                </resource>
                                <resource>
                                    <targetPath>/config</targetPath>
                                    <directory>${project.build.directory}/classes</directory>
                                    <include>kafka-config.yml</include>
                                </resource>
                            </resources>
                        </configuration>
                        <executions>
                            <execution>
                                <id>build-docker-image</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                            </execution>
                            <execution>
                                <id>tag-docker-image</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>tag</goal>
                                </goals>
                                <configuration>
                                    <image>${docker.image.prefix}/${project.artifactId}</image>
                                    <newName>${docker.registry}/${docker.image.prefix}/${project.artifactId}:${project.version}</newName>
                                </configuration>
                            </execution>
                            <execution>
                                <id>push-docker-image</id>
                                <phase>deploy</phase>
                                <goals>
                                    <goal>push</goal>
                                </goals>
                                <configuration>
                                    <imageName>${docker.registry}/${docker.image.prefix}/${project.artifactId}</imageName>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <profile>
            <id>no-run-postgres-container</id>
            <!-- set default for postgres port only if we're not going to spin up a postgres container -->
            <activation>
                <property>
                    <name>postgresContainer.skip</name>
                </property>
            </activation>
            <properties>
                <postgresPort>5432</postgresPort>
            </properties>
        </profile>
        <profile>
            <id>run-postgres-container</id>
            <!--
                If you don't want a postgres container to be spun up during the build in order to
                perform live DB tests, specify -DpostgresContainer.skip` on maven command line. In
                that case you will need to have a postgres server available in your environment,
                and the postgresHost and postgresPort properties can be used to configure access
                if they're different from localhost and 5432, respectively.
            -->
            <activation>
                <property>
                    <name>!postgresContainer.skip</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-postgres</id>
                                <phase>process-test-classes</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                                <configuration>
                                    <dockerHost>${fabricateDockerHost}</dockerHost>
                                    <showLogs>false</showLogs>
                                    <images>
                                        <image>
                                            <alias>postgres</alias>
                                            <name>${postgres-image}</name>
                                            <run>
                                                <!--
                                                pattern needs to start with "maven-" so jenkins builds
                                                will properly clean up leaked containers
                                                -->
                                                <containerNamePattern>maven-%a-%t-%i</containerNamePattern>
                                                <ports>
                                                    <port>postgresPort:5432</port>
                                                </ports>
                                                <env>
                                                    <POSTGRES_USER>${postgresUserName}</POSTGRES_USER>
                                                    <POSTGRES_PASSWORD>${postgresPassword}</POSTGRES_PASSWORD>
                                                </env>
                                                <wait>
                                                    <log>
                                                        <!--
                                                        CDATA prevents intellij from wrapping the search
                                                        string, which would break things.
                                                        We wait for a message that shows that postgres
                                                        is ready, and we wait to see it twice, since the
                                                        container's entry-point script includes an internal
                                                        restart.
                                                        -->
                                                        <![CDATA[(?s)database system is ready to accept connections.*database system is ready to accept connections]]>
                                                    </log>
                                                    <time>120000</time>
                                                </wait>
                                            </run>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-postgres</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                                <configuration>
                                    <dockerHost>${fabricateDockerHost}</dockerHost>
                                    <images>
                                        <image>
                                            <name>${postgres-image}</name>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    <dependencies>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.history</artifactId>
            <version>${project.version}</version>
        </dependency>
    </dependencies>
</project>
