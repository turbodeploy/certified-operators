#!/bin/bash

# If LOG_TO_STDOUT is defined in the environment, tee the output so that it is also logged to stdout.
# This is generally desirable in a development setup where you want to see the output on the console when
# starting a component, but not in production where we do not want logging to be captured by Docker
# and consume disk space (Docker JSON log driver captures and saves them then docker logs shows them).
# In a production environment, get the logs from the rsyslog component instead.
if [[ -z ${LOG_TO_STDOUT} ]]; then
  export LOGGER_COMMAND="logger --tag zoo-${ZOO_MY_ID} -u /tmp/log.sock"
else
  export LOGGER_COMMAND="eval tee >(logger --tag zoo-${ZOO_MY_ID} -u /tmp/log.sock)"
fi

/usr/sbin/rsyslogd -f /etc/rsyslog.conf -i /tmp/rsyslog.pid

exit_error() {
    echo "$*" 2>&1 | $LOGGER_COMMAND
    exit 1
}

# We put configuration file into /tmp, as it is the only place to write something
export ZOOCFGDIR=/tmp/zoo-config
test -d "$ZOOFCGDIR" && rm -r "$ZOOCFGDIR"
mkdir $ZOOCFGDIR
ZOOKEEPER_CONF=$ZOOCFGDIR/zoo.cfg

echo "# This configuration is autogenerated during container startup. Refer to container entrypoint." > $ZOOKEEPER_CONF
echo "tickTime=2000" >> $ZOOKEEPER_CONF
echo "dataDir=/var/lib/zoo/data" >> $ZOOKEEPER_CONF
echo "clientPort=2181" >> $ZOOKEEPER_CONF
echo "initLimit=5" >> $ZOOKEEPER_CONF
echo "syncLimit=2" >> $ZOOKEEPER_CONF

test -n "$ZOO_SERVERS" || exit_error "ZOO_SERVERS must be specified to contain cluster-related data"

IFS=';' read -ra SERVER <<< "$ZOO_SERVERS"
for SRV in "${SERVER[@]}"; do
    echo "server.1=${SRV}:2888:3888" >> $ZOOKEEPER_CONF
done

test -n "$ZOO_MY_ID" || exit_error "ZOO_MY_ID variable must be specified"

echo "$ZOO_MY_ID" > $ZOOCFGDIR/myid
ln -fs /opt/zookeeper/conf/log4j.properties $ZOOCFGDIR/log4j.properties || exit_error "Could not create log4j config"

# Autoconfigure the max java heap based on container limit
SERVER_JVMFLAGS="-Xms16m -Xss512k -XX:MaxRAMPercentage=75.0"

env

# Zookeeper doesn't handle SIGTERM. By design, ZK doesn't have graceful shutdown.
exec /opt/zookeeper/bin/zkServer.sh start-foreground > >($LOGGER_COMMAND) 2>&1

