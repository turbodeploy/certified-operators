# Here we create map directives that will be used to obtain values for security-related headers
# that need to be present in all our responses. In some cases, upstream processing supplies these
# headers, and in that case we should not duplicate them (especially if our values differ from the
# those supplied upstream).
#
# The nginx if-statement would seem relevant, but it is actually part of the rewrite module, and
# it's only supposed to include other rewrite directives in its body. It's been hacked to perform
# a few minor things in location context (where rewrite normally can't appear), but in general,
# using if-stmt in location contexts is very unpredictable and even dangerous
# (see https://www.nginx.com/resources/wiki/start/topics/depth/ifisevil/).
#
# Even if we wanted to use if, it wouldn't work because it's part of the declarative nginx config
# language, so it's handled when parsing the config structure, not when a response is ready to
# go out. Instead, we use the nginx map statement to tie one variable's value to another's, in a
# way that depends on the other's value at the time the first variable is dereferenced.
#
# For each of our security headers, we use a map directive to give a value to a variable that
# will hold our desired value for that security header, unless the header has already been
# supplied by upstream processing. The source variable for the map is the $upstream_http_<header-name>
# variable that's automatically defined for every header added to the response.
#
# Our maps only have rules for empty values, meaning that the header is not presently set. In that
# case the map supplies our desired value. Any non-empty value is unmapped, so the map variable
# will be undefined, and the add_header that references it will be a no-op.
#
# This would have been much less complicated with lua, but lua appears to be out-of-reach for a
# UBI container. (It's available via EPEL, but only with an RHEL subscription).

map $upstream_http_strict_transport_security $strict_transport_security_value {
    '' 'max-age=63072000; includeSubDomains';
}

map $upstream_http_x_content_type_options $x_content_type_options_value {
    '' 'nosniff';
}

map $upstream_http_x_xss_protection $x_xss_protection_value {
    '' '1; mode=block';
}

map $upstream_http_x_frame_options $x_frame_options_value {
    '' 'SAMEORIGIN';
}
