{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "description": "",
  "editable": false,
  "gnetId": null,
  "graphTooltip": 0,
  "iteration": 1593543328735,
  "links": [],
  "panels": [
    {
      "columns": [],
      "datasource": "$DB",
      "description": "Test description",
      "fieldConfig": {
        "defaults": {
          "custom": {}
        },
        "overrides": []
      },
      "fontSize": "100%",
      "gridPos": {
        "h": 5,
        "w": 17,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "pageSize": null,
      "showHeader": true,
      "sort": {
        "col": 0,
        "desc": true
      },
      "styles": [
        {
          "alias": "Time",
          "align": "auto",
          "dateFormat": "MMM-DD YYYY",
          "pattern": "Time",
          "type": "date"
        },
        {
          "alias": "",
          "align": "",
          "colorMode": null,
          "colors": [
            "rgba(188, 189, 186, 0.97)",
            "rgb(0, 0, 0)",
            "rgba(245, 54, 54, 0.9)"
          ],
          "decimals": 0,
          "mappingType": 1,
          "pattern": "/.*This Month/",
          "thresholds": [
            "0"
          ],
          "type": "string",
          "unit": "short",
          "valueMaps": [
            {
              "text": "",
              "value": "-1"
            }
          ]
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 1,
          "mappingType": 1,
          "pattern": "VMs Per Host",
          "rangeMaps": [
            {
              "from": "",
              "text": "",
              "to": ""
            }
          ],
          "thresholds": [],
          "type": "number",
          "unit": "short",
          "valueMaps": [
            {
              "text": "",
              "value": "-1"
            }
          ]
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 0,
          "mappingType": 1,
          "pattern": "/.*/",
          "thresholds": [
            ""
          ],
          "type": "number",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "format": "time_series",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "with this_month_vms as (\nSELECT\n\tdistinct oid\nFROM entity\nINNER JOIN LATERAL (\n    SELECT true \n      FROM metric \n      WHERE metric.entity_oid = entity.oid\n      and metric.entity_hash = entity.hash \n      and metric.time between timestamptz $__timeTo() - interval '1 hour' and $__timeTo() \n      LIMIT 1\n) as foo ON true WHERE \n  (type = 'VIRTUAL_MACHINE') and\n  (timestamptz $__timeTo() - interval '1 hour', $__timeTo()) OVERLAPS (first_seen, last_seen)),\nlast_month_vms as (\nSELECT\n\tdistinct oid\nFROM entity\nINNER JOIN LATERAL (\n    SELECT true \n      FROM metric \n      WHERE metric.entity_oid = entity.oid\n      and metric.entity_hash = entity.hash \n      and metric.time between timestamptz $__timeTo() - interval '1 month' - interval '1 hour' \n                          and timestamptz $__timeTo() - interval '1 month'  \n      LIMIT 1\n) as foo on true WHERE \n  (type = 'VIRTUAL_MACHINE') and\n  (timestamptz $__timeTo() - interval '1 month' - interval '1 hour', \n   timestamptz $__timeTo() - interval '1 month') OVERLAPS (first_seen, last_seen)),\nthis_month_pm_count as (\nSELECT\n\tcount(distinct oid) as pmCount\nFROM entity\nINNER JOIN LATERAL (\n    SELECT true \n      FROM metric \n      WHERE metric.entity_oid = entity.oid\n      and metric.entity_hash = entity.hash \n      and metric.time between timestamptz $__timeTo() - interval '1 hour' and $__timeTo() \n      LIMIT 1\n) as foo ON true WHERE \n  (type = 'PHYSICAL_MACHINE') and\n  (timestamptz $__timeTo() - interval '1 hour', $__timeTo()) OVERLAPS (first_seen, last_seen)),\nlast_month_pm_count as (\nSELECT\n\tcount(distinct oid) as pmCount\nFROM entity\nINNER JOIN LATERAL (\n    SELECT true \n      FROM metric \n      WHERE metric.entity_oid = entity.oid\n      and metric.entity_hash = entity.hash \n      and metric.time between timestamptz $__timeTo() - interval '1 month' - interval '1 hour' \n                          and timestamptz $__timeTo() - interval '1 month'  \n      LIMIT 1\n) as foo on true WHERE \n  (type = 'PHYSICAL_MACHINE') and\n  (timestamptz $__timeTo() - interval '1 month' - interval '1 hour', \n   timestamptz $__timeTo() - interval '1 month') OVERLAPS (first_seen, last_seen))\nselect month as time, pmCount as \"Host Count\", vmCount as \"VM Count\", vmCount::float4/nullif(pmCount,0) as \"VMs Per Host\", \nvmsAdded \"VMs Added This Month\", vmsRemoved \"VMs Removed This Month\"\nfrom \n(SELECT\n  timestamptz $__timeTo() as month,\n\t(select pmCount from this_month_pm_count) as pmCount,\n\t(select count(oid) from this_month_vms) as vmCount,\n\t(select count(*)\n    from (\n    select oid from this_month_vms\n    except \n    select oid from last_month_vms\n    )  foo \n  ) as vmsAdded,\n  (select count(*)\n    from (\n    select oid from last_month_vms\n    except \n    select oid from this_month_vms\n    )  foo \n  ) as vmsRemoved\n\nunion\nSELECT\n  timestamptz $__timeTo() - interval '1 month' as month,\n\t(select pmCount from last_month_pm_count) as pmCount,\n\t(select count(oid) from last_month_vms) as vmCount,\n\t-1 as vmsAdded,\n\t-1 as vmsRemoved\n) foo\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "current"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "metric",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Stats",
      "transform": "timeseries_to_columns",
      "type": "table-old"
    },
    {
      "columns": [],
      "datasource": "$DB",
      "fieldConfig": {
        "defaults": {
          "custom": {}
        },
        "overrides": []
      },
      "fontSize": "100%",
      "gridPos": {
        "h": 4,
        "w": 17,
        "x": 0,
        "y": 5
      },
      "id": 4,
      "pageSize": null,
      "showHeader": true,
      "sort": {
        "col": 0,
        "desc": true
      },
      "styles": [
        {
          "alias": "Time",
          "align": "auto",
          "dateFormat": "MMM-DD YYYY",
          "pattern": "Time",
          "type": "date"
        },
        {
          "alias": "",
          "align": "left",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "VMs per TB",
          "thresholds": [],
          "type": "number",
          "unit": "short"
        },
        {
          "alias": "",
          "align": "left",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "decimals": 2,
          "pattern": "/.*/",
          "thresholds": [],
          "type": "number",
          "unit": "mbytes"
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "with\ncurStorage as (select distinct oid\n       \t  \t  from entity\n\t\t  where (type = 'STORAGE') and\n\t\t  (timestamptz $__timeTo() - interval '1 hour',\n\t\t   timestamptz $__timeTo()) OVERLAPS (first_seen, last_seen)),\n\ncurVMCount as (select count(distinct oid) vmCount\n       \t  \t  from entity\n\t\t  INNER JOIN LATERAL (\n\t\t  \tSELECT true\n\t\t\tFROM metric \n\t      \t\tWHERE metric.entity_oid = entity.oid\n\t\t\tand metric.time between timestamptz $__timeTo() - interval '1 hour' and\n\t\t\ttimestamptz $__timeTo()\n\t    LIMIT 1\n\t      \t  ) as metric ON TRUE\n\t\t  where (type = 'VIRTUAL_MACHINE') and\n\t\t  (timestamptz $__timeTo() - interval '1 hour',\n\t\t   timestamptz $__timeTo()) OVERLAPS (first_seen, last_seen)),\n\ncurAmount as (select\n\t  timestamptz $__timeTo() as time,\n\t  sum(metric.capacity) as total,\n\t  sum(metric.current) as used,\n\t  sum(metric.capacity) - sum(metric.current) as available,\n\t  avg(metric.utilization) as utilization\n\t  FROM curStorage as entity\n\t  INNER JOIN LATERAL (\n\t      SELECT metric.type, metric.current, metric.capacity, metric.utilization\n\t      FROM metric \n\t      WHERE metric.entity_oid = entity.oid\n\t      \t    and metric.type = 'STORAGE_AMOUNT'\n      \t    \t    and metric.provider_oid IS NULL\n\t\t    and metric.time between timestamptz $__timeTo() - interval '1 hour' and\n\t\t\ttimestamptz $__timeTo()\n\t      LIMIT 1\n\t      ) as metric ON TRUE),\n\ncurAlloc as (select\n\t  sum(metric.current) as allocated\n\t  FROM curStorage as entity\n\t  INNER JOIN LATERAL (\n\t      SELECT metric.type, metric.current, metric.capacity, metric.utilization\n\t      FROM metric \n\t      WHERE metric.entity_oid = entity.oid\n\t      \t    and metric.type = 'STORAGE_PROVISIONED'\n      \t    \t    and metric.provider_oid IS NULL\n\t\t    and metric.time between timestamptz $__timeTo() - interval '1 hour' and\n\t\t\ttimestamptz $__timeTo()\n\t      LIMIT 1\n\t      ) as metric ON TRUE),\n\nmonthStorage as (select distinct oid\n       \t  \t  from entity\n\t\t  where (type = 'STORAGE') and\n\t\t  (timestamptz $__timeTo() - interval '1 hour' - interval '1 month',\n\t\t   timestamptz $__timeTo() - interval '1 month') OVERLAPS (first_seen, last_seen)),\n\nmonthVMCount as (select count(distinct oid) vmCount\n       \t  \t  from entity\n\t\t  INNER JOIN LATERAL (\n\t\t  \tSELECT true\n\t\t\tFROM metric \n\t      \t\tWHERE metric.entity_oid = entity.oid\n\t\t\tand metric.time between timestamptz $__timeTo() - interval '1 hour'\n\t\t\t- interval '1 month'\n\t\t\tand timestamptz $__timeTo()  - interval '1 month'\n\t    LIMIT 1\n\t      \t  ) as metric ON TRUE\n\t\t  where (type = 'VIRTUAL_MACHINE') and\n\t\t  (timestamptz $__timeTo() - interval '1 hour',\n\t\t   timestamptz $__timeTo()) OVERLAPS (first_seen, last_seen)),\n\nmonthAmount as (select\n\t  timestamptz $__timeTo() - interval '1 month' as time,\n\t  sum(metric.capacity) as total,\n\t  sum(metric.current) as used,\n\t  sum(metric.capacity) - sum(metric.current) as available,\n\t  avg(metric.utilization) as utilization\n\t  FROM curStorage as entity\n\t  INNER JOIN LATERAL (\n\t      SELECT metric.type, metric.current, metric.capacity, metric.utilization\n\t      FROM metric \n\t      WHERE metric.entity_oid = entity.oid\n\t      \t    and metric.type = 'STORAGE_AMOUNT'\n      \t    \t    and metric.provider_oid IS NULL\n\t\t    and metric.time between timestamptz $__timeTo() - interval '1 hour' - interval '1 month'\n\t\t    and timestamptz $__timeTo() - interval '1 month'\n\t      LIMIT 1\n\t      ) as metric ON TRUE),\n\nmonthAlloc as (select\n\t  sum(metric.current) as allocated\n\t  FROM curStorage as entity\n\t  INNER JOIN LATERAL (\n\t      SELECT metric.type, metric.current, metric.capacity, metric.utilization\n\t      FROM metric \n\t      WHERE metric.entity_oid = entity.oid\n\t      \t    and metric.type = 'STORAGE_PROVISIONED'\n      \t    \t    and metric.provider_oid IS NULL\n\t\t    and metric.time between timestamptz $__timeTo() - interval '1 hour'\n\t\t    - interval '1 month'\n\t\t    and timestamptz $__timeTo() - interval '1 month'\n\t      LIMIT 1\n\t      ) as metric ON TRUE)\n\nselect time as \"Time\", total as \"Total\", used as \"Used\", available as \"Available\", allocated as \"Allocated\", vmCount/Allocated*1e6 as \"VMs per TB\", allocated/vmCount \"Storage per VM\"\nfrom curAmount, curAlloc, curVMCount\nunion\nselect time as \"Time\", total as \"Total\", used as \"Used\", available as \"Available\", allocated as \"Allocated\", vmCount/Allocated*1e6 as \"VMs per TB\", allocated/vmCount \"Storage per VM\"\nfrom monthAmount, monthAlloc, monthVMCount\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "current"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "metric",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Storage",
      "transform": "table",
      "type": "table-old"
    },
    {
      "columns": [],
      "datasource": "$DB",
      "description": "The following indicators compare cluster capacity vs consumption. Indicator colors show: green where consumption is below N-2 server total resources, orange for above N-2 but below N-1, and red where consumption is above N-1.",
      "fieldConfig": {
        "defaults": {
          "custom": {}
        },
        "overrides": []
      },
      "fontSize": "100%",
      "gridPos": {
        "h": 8,
        "w": 17,
        "x": 0,
        "y": 9
      },
      "id": 6,
      "pageSize": null,
      "showHeader": true,
      "sort": {
        "col": 0,
        "desc": true
      },
      "styles": [
        {
          "alias": "Time",
          "align": "auto",
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "pattern": "Time",
          "type": "date"
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Cluster",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "",
          "align": "right",
          "colorMode": "cell",
          "colors": [
            "rgb(242, 73, 92)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "decimals": 2,
          "mappingType": 2,
          "pattern": "/.*/",
          "rangeMaps": [
            {
              "from": "-1000000",
              "text": "",
              "to": "10000000"
            }
          ],
          "thresholds": [
            "1",
            "2"
          ],
          "type": "string",
          "unit": "none",
          "valueMaps": [
            {
              "text": "10000000",
              "value": "-10000000"
            }
          ]
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "with cluster as (select oid, name from entity where type = 'COMPUTE_CLUSTER'),\n\ncluster_pm as (select cluster.oid as clusterOid, cluster.name as clusterName, entity.oid as pmOid\n     \t\t   from entity, cluster\n\t\t   where (type = 'PHYSICAL_MACHINE') and\n\t\t         (scope && ARRAY[cluster.oid] and\n\t\t\t (timestamptz $__timeTo() - interval '1 hour',\n       \t\t\t  timestamptz $__timeTo()) OVERLAPS (first_seen, last_seen)))\n\nselect clusterName as \"Cluster\", (sum(mem.capacity) - sum(mem.current))/max(mem.capacity) as \"Mem\",\n       \t\t    (sum(cpu.capacity) - sum(cpu.current))/max(cpu.capacity) as \"CPU\",\n       \t\t    (sum(net.capacity) - sum(net.current))/max(net.capacity) as \"Network\"\n       \t\t    --,\n--       \t\t    (sum(storage.capacity) - sum(storage.current))/max(storage.capacity) as storageN,\n--       \t\t    (sum(net.capacity) - sum(net.current))/max(net.capacity) as storageN\n     \t\t    from cluster_pm\n\n\t\t    LEFT JOIN LATERAL (\n\t\t    SELECT current, capacity\n\t\t    FROM metric \n\t      \t    WHERE metric.entity_oid = cluster_pm.pmOid\n\t\t    and metric.type = 'MEM'\n\t\t    and metric.time between timestamptz $__timeTo() - interval '1 hour' and\n\t\t    timestamptz $__timeTo()\n\t\t    LIMIT 1\n\t      \t    ) as mem ON TRUE\n\n\t\t    LEFT OUTER JOIN LATERAL (\n\t\t    SELECT current, capacity\n\t\t    FROM metric \n\t      \t    WHERE metric.entity_oid = cluster_pm.pmOid\n\t\t    and metric.type = 'CPU'\n\t\t    and metric.time between timestamptz $__timeTo() - interval '1 hour' and\n\t\t    timestamptz $__timeTo()\n\t\t    LIMIT 1\n\t      \t    ) as cpu ON TRUE\n\n--\t\t     LEFT OUTER JOIN LATERAL (\n--\t\t     SELECT current, capacity\n--\t\t     FROM metric \n--\t      \t     WHERE metric.entity_oid = cluster_pm.pmOid\n--\t\t     and metric.type = 'STORAGE_AMOUNT'\n--\t\t     and metric.time between timestamptz $__timeTo() - interval '1 hour' and\n--\t\t     timestamptz $__timeTo()\n--\t\t     LIMIT 1\n--\t      \t     ) as storage ON TRUE\n\n\t\t     LEFT OUTER JOIN LATERAL (\n\t\t     SELECT current, capacity\n\t\t     FROM metric \n\t      \t     WHERE metric.entity_oid = cluster_pm.pmOid\n\t\t     and metric.type = 'NET_THROUGHPUT'\n\t\t     and metric.time between timestamptz $__timeTo() - interval '1 hour' and\n\t\t     timestamptz $__timeTo()\n\t\t     LIMIT 1\n\t      \t     ) as net ON TRUE\n\t\t    group by cluster_pm.clusterOid, cluster_pm.clusterName\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "current"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "metric",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamp",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Cluster Status",
      "transform": "table",
      "type": "table-old"
    }
  ],
  "refresh": false,
  "schemaVersion": 25,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "hide": 2,
        "includeAll": false,
        "label": null,
        "multi": false,
        "name": "DB",
        "options": [],
        "query": "postgres",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "type": "datasource"
      }
    ]
  },
  "timepicker": {
    "refresh_intervals": [
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Monthly Overview and Cluster Summary",
  "uid": "monthly_cluster_summary"
}
