---
annotations:
  list:
  - builtIn: 1
    datasource: -- Grafana --
    enable: true
    hide: true
    iconColor: rgba(0, 211, 255, 1)
    name: Annotations & Alerts
    type: dashboard
description: Average consumption of physical resources for a group of virtual machines.
editable: false
gnetId: null
graphTooltip: 0
iteration: 1600436048145
links: []
panels:
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  description: Average CPU usage measurement
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 6
    w: 24
    x: 0
    y: 0
  hiddenSeries: false
  id: 4
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 2
  nullPointMode: "null"
  options:
    dataLinks: []
  percentage: false
  pointradius: 2
  points: true
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      SELECT
          time,
          sum(cpu) as "CPU Usage"
      FROM
          (SELECT
            date_trunc('day', time) as "time",
            entity.oid,
            avg(metric.consumed) AS cpu
          FROM metric, entity
          WHERE
            $__timeFilter("time") AND
            metric.type = 'CPU' AND
            metric.entity_oid = entity.oid AND
            metric.entity_hash = entity.hash AND
            entity.type = 'VIRTUAL_MACHINE' AND
            ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen) AND
            CASE WHEN ARRAY[$Group]::text[] = ARRAY[ '0' ] THEN true ELSE (entity.scope && ARRAY[$Group]::bigint[]) END
          GROUP BY 1, 2) as a
      GROUP BY 1
      ORDER BY 1
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom: null
  timeRegions: []
  timeShift: null
  title: CPU Usage
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  type: graph
  xaxis:
    buckets: null
    mode: time
    name: null
    show: true
    values: []
  yaxes:
  - $$hashKey: object:1300
    format: none
    label: MHz
    logBase: 1
    max: null
    min: null
    show: true
  - $$hashKey: object:1301
    format: short
    label: null
    logBase: 1
    max: null
    min: null
    show: true
  yaxis:
    align: false
    alignLevel: null
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  description: Average memory usage measurement
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 7
    w: 24
    x: 0
    y: 6
  hiddenSeries: false
  id: 2
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 3
  nullPointMode: "null"
  options:
    dataLinks: []
  percentage: false
  pointradius: 2
  points: true
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      SELECT
          time,
          sum(mem)
      FROM
          (SELECT
            date_trunc('day', time) as time,
            entity.oid,
            avg(metric.consumed) AS mem
          FROM metric, entity
          WHERE
            $__timeFilter("time") AND
            metric.type = 'MEM' AND
            metric.entity_oid = entity.oid AND
            metric.entity_hash = entity.hash AND
            entity.type = 'VIRTUAL_MACHINE' AND
            ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen) AND
            CASE WHEN ARRAY[$Group]::text[] = ARRAY[ '0' ] THEN true ELSE (entity.scope && ARRAY[$Group]::bigint[]) END
          GROUP BY 1, 2) as a
      GROUP BY 1
      ORDER BY 1
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom: null
  timeRegions: []
  timeShift: null
  title: Mem Usage
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  type: graph
  xaxis:
    buckets: null
    mode: time
    name: null
    show: true
    values: []
  yaxes:
  - $$hashKey: object:1219
    format: kbytes
    label: null
    logBase: 1
    max: null
    min: null
    show: true
  - $$hashKey: object:1220
    format: short
    label: null
    logBase: 1
    max: null
    min: null
    show: true
  yaxis:
    align: false
    alignLevel: null
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  description: Average storage used measurement
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 7
    w: 24
    x: 0
    y: 13
  hiddenSeries: false
  id: 6
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 3
  nullPointMode: "null"
  options:
    dataLinks: []
  percentage: false
  pointradius: 2
  points: true
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      SELECT
          time,
          sum(storage_used) as "Storage Usage"
      FROM
          (SELECT
            date_trunc('day', time) as "time",
            entity.oid,
            avg(metric.consumed) AS storage_used
          FROM metric, entity
          WHERE
            $__timeFilter("time") AND
            metric.type = 'STORAGE_AMOUNT' AND
            metric.entity_oid = entity.oid AND
            metric.entity_hash = entity.hash AND
            entity.type = 'VIRTUAL_MACHINE' AND
            ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen) AND
            CASE WHEN ARRAY[$Group]::text[] = ARRAY[ '0' ] THEN true ELSE (entity.scope && ARRAY[$Group]::bigint[]) END
          GROUP BY 1, 2) as a
      GROUP BY 1
      ORDER BY 1
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom: null
  timeRegions: []
  timeShift: null
  title: Storage Usage
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  type: graph
  xaxis:
    buckets: null
    mode: time
    name: null
    show: true
    values: []
  yaxes:
  - $$hashKey: object:1386
    format: mbytes
    label: null
    logBase: 1
    max: null
    min: null
    show: true
  - $$hashKey: object:1387
    format: short
    label: null
    logBase: 1
    max: null
    min: null
    show: true
  yaxis:
    align: false
    alignLevel: null
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  description: Average storage IOPS measurement
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 7
    w: 24
    x: 0
    y: 20
  hiddenSeries: false
  id: 8
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 3
  nullPointMode: "null"
  options:
    dataLinks: []
  percentage: false
  pointradius: 2
  points: true
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      SELECT
          time,
          sum(iops) as "Storage Access - IOPS"
      FROM
          (SELECT
            date_trunc('day', time) as "time",
            entity.oid,
            avg(metric.consumed) AS iops
          FROM metric, entity
          WHERE
            $__timeFilter("time") AND
            metric.type = 'STORAGE_ACCESS' AND
            metric.entity_oid = entity.oid AND
            metric.entity_hash = entity.hash AND
            entity.type = 'VIRTUAL_MACHINE' AND
            ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen) AND
            CASE WHEN ARRAY[$Group]::text[] = ARRAY[ '0' ] THEN true ELSE (entity.scope && ARRAY[$Group]::bigint[]) END
          GROUP BY 1, 2) as a
      GROUP BY 1
      ORDER BY 1
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom: null
  timeRegions: []
  timeShift: null
  title: Storage Access - IOPS
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  type: graph
  xaxis:
    buckets: null
    mode: time
    name: null
    show: true
    values: []
  yaxes:
  - $$hashKey: object:1480
    format: none
    label: IOPS
    logBase: 1
    max: null
    min: null
    show: true
  - $$hashKey: object:1481
    format: short
    label: null
    logBase: 1
    max: null
    min: null
    show: true
  yaxis:
    align: false
    alignLevel: null
- columns: []
  datasource: $DB
  description: Average measurement for each VM in the selected group
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fontSize: 100%
  gridPos:
    h: 8
    w: 24
    x: 0
    y: 27
  id: 10
  pageSize: null
  showHeader: true
  sort:
    col: 1
    desc: true
  styles:
  - alias: Time
    align: auto
    dateFormat: YYYY-MM-DD HH:mm:ss
    pattern: Time
    type: date
  - alias: ""
    align: right
    colorMode: null
    colors:
    - rgba(245, 54, 54, 0.9)
    - rgba(237, 129, 40, 0.89)
    - rgba(50, 172, 45, 0.97)
    decimals: 2
    pattern: Mem
    thresholds: []
    type: number
    unit: kbytes
  - alias: ""
    align: auto
    colorMode: null
    colors:
    - rgba(245, 54, 54, 0.9)
    - rgba(237, 129, 40, 0.89)
    - rgba(50, 172, 45, 0.97)
    dateFormat: YYYY-MM-DD HH:mm:ss
    decimals: 2
    mappingType: 1
    pattern: Storage
    thresholds: []
    type: number
    unit: mbytes
  - alias: ""
    align: auto
    colorMode: null
    colors:
    - rgba(245, 54, 54, 0.9)
    - rgba(237, 129, 40, 0.89)
    - rgba(50, 172, 45, 0.97)
    dateFormat: YYYY-MM-DD HH:mm:ss
    decimals: 2
    mappingType: 1
    pattern: CPU
    thresholds: []
    type: number
    unit: none
  targets:
  - format: table
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      SELECT
        e.name as "VM Name",
        avg(m.consumed) FILTER (WHERE m.type = 'MEM') AS "Mem",
        avg(m.consumed) FILTER (WHERE m.type = 'CPU') AS "CPU",
        avg(m.consumed) FILTER (WHERE m.type = 'STORAGE_AMOUNT') AS "Storage"
      FROM metric as m, entity as e
      WHERE
        $__timeFilter(m.time) AND
        m.type IN ('MEM', 'CPU', 'STORAGE_AMOUNT') AND
        m.entity_oid = e.oid AND
        m.entity_hash = e.hash AND
        e.type = 'VIRTUAL_MACHINE' AND
        ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen) AND
        CASE WHEN ARRAY[$Group]::text[] = ARRAY[ '0' ] THEN true ELSE (e.scope && ARRAY[$Group]::bigint[]) END
      GROUP BY 1
      ORDER BY 1
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  timeFrom: null
  timeShift: null
  title: Virtual Machine Physical Resource Usage
  transform: table
  type: table-old
refresh: false
schemaVersion: 25
style: dark
tags: []
templating:
  list:
  - hide: 2
    includeAll: false
    label: null
    multi: false
    name: DB
    options: []
    query: postgres
    queryValue: ""
    refresh: 1
    regex: ""
    skipUrlSync: false
    type: datasource
  - allValue: '''0'''
    datasource: $DB
    definition: |-
      SELECT name as __text,
             oid as __value
      FROM entity
      WHERE entity.type = 'GROUP'
      AND ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen)
      AND attrs -> 'member_types' ? 'VIRTUAL_MACHINE'
      GROUP BY name, oid
      ORDER BY 1
    hide: 0
    includeAll: true
    label: null
    multi: false
    name: Group
    options: []
    query: |-
      SELECT name as __text,
             oid as __value
      FROM entity
      WHERE entity.type = 'GROUP'
      AND ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen)
      AND attrs -> 'member_types' ? 'VIRTUAL_MACHINE'
      GROUP BY name, oid
      ORDER BY 1
    refresh: 2
    regex: ""
    skipUrlSync: false
    sort: 0
    tagValuesQuery: ""
    tags: []
    tagsQuery: ""
    type: query
    useTags: false
time:
  from: now-7d
  to: now
timepicker:
  refresh_intervals:
  - 10s
  - 30s
  - 1m
  - 5m
  - 15m
  - 30m
  - 1h
  - 2h
  - 1d
timezone: ""
title: Consumption Summary of Physical Resources for Virtual Machines
uid: consumption_summary_physical_for_virtual
