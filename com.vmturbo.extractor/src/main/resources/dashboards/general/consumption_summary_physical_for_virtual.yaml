annotations:
  list:
  - builtIn: 1
    datasource: -- Grafana --
    enable: true
    hide: true
    iconColor: rgba(0, 211, 255, 1)
    name: Annotations & Alerts
    type: dashboard
description: |-
  Average consumption of physical resources for a group of virtual machines.
  Only on-prem VMs are represented in the panel.
editable: false
gnetId:
graphTooltip: 0
iteration: 1600436048145
links: []
panels:
- datasource: $DB
  description: The Capacity and Used figures are averages over the time window. The
    VM count indicates the number of unique VMs that have been part of the group over
    the time window and that provide information about the specific resource.
    Only on-prem VMs are represented in the panel.
  fieldConfig:
    defaults:
      custom:
        align: null
        filterable: false
      mappings: []
      thresholds:
        mode: absolute
        steps:
          - color: green
            value: null
          - color: red
            value: 80
    overrides:
      - matcher:
          id: byName
          options: Capacity
        properties:
          - id: custom.width
            value: 144
      - matcher:
          id: byName
          options: Units
        properties:
          - id: custom.width
            value: 90
  gridPos:
    h: 6
    w: 24
    x: 0
    y: 0
  id: 13
  options:
    showHeader: true
    sortBy: []
  pluginVersion: 7.3.4
  targets:
    - format: table
      group: []
      metricColumn: none
      rawQuery: true
      rawSql: |-
        WITH consumed_metrics AS (
          SELECT m.time, m.entity_oid, coalesce(m.consumed, 0.0) as value, m.type as metric_type
          FROM metric m,
            scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE', ARRAY[${Group}]::bigint[], '${Group:raw}' = '0') s,
            entity e
          WHERE m.time  BETWEEN $__timeFrom() AND $__timeTo()
             AND m.time BETWEEN s.from_time and s.to_time
             AND m.type IN ('CPU', 'MEM', 'STORAGE_AMOUNT', 'STORAGE_ACCESS')
             AND m.provider_oid IS NOT NULL
             AND s.oid = m.entity_oid
             AND e.oid = m.entity_oid
             AND e.environment = 'ON_PREM'
        ),
        time_entity_consumed_sums AS (
          SELECT time, entity_oid, metric_type, sum(value) as value
          FROM consumed_metrics
          GROUP BY 1, 2, 3
        ),
        daily_avg_consumed_metrics as (
          SELECT
            date_trunc('day', m.time) as "time",
            m.entity_oid,
            metric_type,
            avg(m.value) as value
          FROM time_entity_consumed_sums m
          GROUP BY 1, 2, 3
        ),
        daily_consumed AS (
          SELECT
            metric_type as type,
            m.time,
            sum(m.value) as consumed,
            count(entity_oid) AS numConsumers
          FROM daily_avg_consumed_metrics m
          GROUP BY 1,2
        ),
        capacity_metrics as (
          SELECT
            date_trunc('day', m.time) AS "time",
            m.type,
            s.e_type as entityType,
            m.entity_oid,
            avg(coalesce(m.capacity, 0.0)) AS capacity
          FROM metric m,
            scope_to_types($__timeFrom(), $__timeTo(), ARRAY['PHYSICAL_MACHINE', 'STORAGE']::entity_type[], ARRAY[${Group}]::bigint[], '${Group:raw}' = '0') s,
            entity e
          WHERE
            m.time BETWEEN $__timeFrom() AND $__timeTo()
            AND m.type in ('CPU', 'MEM', 'STORAGE_AMOUNT', 'STORAGE_ACCESS')
            AND m.provider_oid IS NULL
            AND m.entity_oid = s.oid
            AND m.time BETWEEN s.from_time AND s.to_time
            AND m.entity_oid = e.oid
            AND e.environment = 'ON_PREM'
          GROUP BY 1, 2, 3, 4
        ),
        daily_capacity AS (
          SELECT type, time, SUM(capacity) as capacity
          FROM capacity_metrics
          GROUP BY 1, 2
        )
        SELECT
          CASE
            WHEN con.type = 'STORAGE_AMOUNT' THEN 'Storage Usage'
            WHEN con.type = 'CPU' THEN 'CPU Usage'
            WHEN con.type = 'MEM' THEN 'Memory Usage'
            WHEN con.type = 'STORAGE_ACCESS' THEN 'Storage Access - IOPS'
          END::text AS "Resource",
          CASE
            WHEN con.type = 'STORAGE_AMOUNT' THEN ROUND(AVG(cap.capacity)::numeric / 1024 / 1000 , 2)
            WHEN con.type = 'CPU' THEN ROUND(AVG(cap.capacity)::numeric, 2)
            WHEN con.type = 'MEM' THEN ROUND(AVG(cap.capacity)::numeric / 1024 / 1024 / 1000, 2)
            ELSE AVG(capacity)
          END :: numeric as "Capacity",
          CASE
            WHEN con.type = 'STORAGE_AMOUNT' THEN ROUND(AVG(con.consumed)::numeric / 1024 / 1000, 2)
            WHEN con.type = 'CPU' THEN ROUND(AVG(con.consumed)::numeric, 2)
            WHEN con.type = 'MEM' THEN ROUND(AVG(con.consumed)::numeric / 1024 / 1024 / 1000, 2)
            WHEN con.type = 'STORAGE_ACCESS' THEN ROUND(AVG(con.consumed)::numeric, 2)
            ELSE AVG(consumed)
          END :: numeric as "Used",
          CASE
            WHEN con.type = 'STORAGE_AMOUNT' THEN 'TiB'
            WHEN con.type = 'CPU' THEN 'MHz'
            WHEN con.type = 'MEM' THEN 'TiB'
            WHEN con.type = 'STORAGE_ACCESS' THEN 'IOPS'
            ELSE '-'
          END as "Units",
          ROUND(AVG(numConsumers), 0) as "VM Count"
        FROM daily_consumed AS con FULL OUTER JOIN daily_capacity AS cap USING (type)
        GROUP BY 1, con.type
        ORDER BY CASE con.type WHEN 'CPU' then 1
          WHEN 'MEM' THEN 2
          WHEN 'STORAGE_AMOUNT' THEN 3
          WHEN 'STORAGE_ACCESS' THEN 4 ELSE 5
        END;
      refId: A
      select:
      - - params:
          - savings
          type: column
      table: action_spec
      timeColumn: first_seen
      timeColumnType: timestamp
      where:
      - name: $__timeFilter
        params: []
        type: macro
  timeFrom: null
  timeShift: null
  title: Total Resource Summary
  type: table
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  description: |-
    Average CPU usage measurement.
    Only on-prem VMs are represented in the panel.
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 6
    w: 24
    x: 0
    y: 6
  hiddenSeries: false
  id: 4
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 2
  nullPointMode: 'null'
  options:
    dataLinks: []
  percentage: false
  pointradius: 2
  points: false
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      WITH metrics_data AS (
        SELECT
          m.time,
          m.entity_oid,
          m.type as metric_type,
          coalesce(m.consumed, 0.0) as value
        FROM metric m,
          scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE', ARRAY[${Group}]::bigint[], '${Group:raw}' = '0') s,
          entity e
        WHERE
          m.time BETWEEN $__timeFrom() AND $__timeTo()
          AND m.entity_oid = s.oid
          AND m.time BETWEEN s.from_time AND s.to_time
          AND m.type = 'CPU'
          AND m.provider_oid IS NOT NULL
          AND s.oid = m.entity_oid
          AND m.entity_oid = e.oid
          AND e.environment = 'ON_PREM'
      ), results AS (
        SELECT time, sum(value) AS sum
        FROM metrics_data
        GROUP BY 1
      ), moving_average AS (
        SELECT time, avg(sum) OVER (ORDER BY time RANGE BETWEEN INTERVAL '1 day' PRECEDING AND CURRENT ROW) AS ma
        FROM results
      )
      SELECT
        r.time, r.sum AS "CPU Usage", ma.ma AS "1-Day Moving Average"
      FROM results r JOIN moving_average ma USING (time)
      ORDER BY 1
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom:
  timeRegions: []
  timeShift:
  title: CPU Usage
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  type: graph
  xaxis:
    buckets:
    mode: time
    name:
    show: true
    values: []
  yaxes:
  - $$hashKey: object:1300
    format: none
    label: MHz
    logBase: 1
    max:
    min:
    show: true
  - $$hashKey: object:1301
    format: short
    label:
    logBase: 1
    max:
    min:
    show: true
  yaxis:
    align: false
    alignLevel:
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  description: |-
    Average memory usage measurement.
    Only on-prem VMs are represented in the panel.
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 6
    w: 24
    x: 0
    y: 12
  hiddenSeries: false
  id: 2
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 3
  nullPointMode: 'null'
  options:
    dataLinks: []
  percentage: false
  pointradius: 2
  points: false
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      WITH metrics_data AS (
        SELECT
          m.time,
          m.entity_oid,
          m.type as metric_type,
          coalesce(m.consumed, 0.0) as value
        FROM metric m,
          scope_to($__timeFrom(), $__timeTo(),  'VIRTUAL_MACHINE', ARRAY[${Group}]::bigint[], '${Group:raw}' = '0') s,
          entity e
        WHERE
          m.time BETWEEN $__timeFrom() AND $__timeTo()
          AND m.entity_oid = s.oid
          AND m.time BETWEEN s.from_time AND s.to_time
          AND m.type = 'MEM'
          AND m.provider_oid IS NOT NULL
          AND m.entity_oid = e.oid
          AND e.environment = 'ON_PREM'
      ), results AS (
        SELECT time, sum(value) AS sum
        FROM metrics_data
        GROUP BY 1
      ), moving_average AS (
        SELECT time, avg(sum) OVER (ORDER BY time RANGE BETWEEN INTERVAL '1 day' PRECEDING AND CURRENT ROW) AS ma
        FROM results
      )
      SELECT
        r.time, r.sum AS "Mem Usage", ma.ma AS "1-Day Moving Average"
      FROM results r JOIN moving_average ma USING (time)
      ORDER BY 1
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom:
  timeRegions: []
  timeShift:
  title: Mem Usage
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  type: graph
  xaxis:
    buckets:
    mode: time
    name:
    show: true
    values: []
  yaxes:
  - $$hashKey: object:1219
    format: kbytes
    label:
    logBase: 1
    max:
    min:
    show: true
  - $$hashKey: object:1220
    format: short
    label:
    logBase: 1
    max:
    min:
    show: true
  yaxis:
    align: false
    alignLevel:
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  description: |-
    Average storage used measurement.
    Only on-prem VMs are represented in the panel.
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 6
    w: 24
    x: 0
    y: 18
  hiddenSeries: false
  id: 6
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 3
  nullPointMode: 'null'
  options:
    dataLinks: []
  percentage: false
  pointradius: 2
  points: false
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      WITH metrics_data AS (
        SELECT
          m.time,
          m.entity_oid,
          coalesce(m.consumed, 0.0) as value
        FROM metric m,
          scope_to($__timeFrom(), $__timeTo(),  'VIRTUAL_MACHINE', ARRAY[${Group}]::bigint[], '${Group:raw}' = '0') s,
          entity e
        WHERE
          m.time BETWEEN $__timeFrom() AND $__timeTo()
          AND m.entity_oid = s.oid
          AND m.time BETWEEN s.from_time AND s.to_time
          AND m.type = 'STORAGE_AMOUNT'
          AND m.provider_oid IS NOT NULL
          AND m.entity_oid = e.oid
          AND e.environment = 'ON_PREM'
      ), results AS (
        SELECT time, sum(value) AS sum
        FROM metrics_data
        GROUP BY 1
      ), moving_average AS (
        SELECT time, avg(sum) OVER (ORDER BY time RANGE BETWEEN INTERVAL '1 day' PRECEDING AND CURRENT ROW) AS ma
        FROM results
      )
      SELECT
        r.time, r.sum AS "Storage Used", ma.ma AS "1-Day Moving Average"
      FROM results r JOIN moving_average ma USING (time)
      ORDER BY 1
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom:
  timeRegions: []
  timeShift:
  title: Storage Usage
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  type: graph
  xaxis:
    buckets:
    mode: time
    name:
    show: true
    values: []
  yaxes:
  - $$hashKey: object:1386
    format: mbytes
    label:
    logBase: 1
    max:
    min:
    show: true
  - $$hashKey: object:1387
    format: short
    label:
    logBase: 1
    max:
    min:
    show: true
  yaxis:
    align: false
    alignLevel:
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  description: |-
    Average storage IOPS measurement.
    Only on-prem VMs are represented in the panel.
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 6
    w: 24
    x: 0
    y: 24
  hiddenSeries: false
  id: 8
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 3
  nullPointMode: 'null'
  options:
    dataLinks: []
  percentage: false
  pointradius: 2
  points: false
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      WITH metrics_data AS (
        SELECT
          m.time,
          m.entity_oid,
          m.type as metric_type,
          coalesce(m.consumed, 0.0) as value
        FROM metric m,
          scope_to($__timeFrom(), $__timeTo(),  'VIRTUAL_MACHINE', ARRAY[${Group}]::bigint[], '${Group:raw}' = '0') s,
          entity e
        WHERE
          m.time BETWEEN $__timeFrom() AND $__timeTo()
          AND m.entity_oid = s.oid
          AND m.time BETWEEN s.from_time AND s.to_time
          AND m.type = 'STORAGE_ACCESS'
          AND m.provider_oid IS NOT NULL
          AND m.entity_oid = e.oid
          AND e.environment = 'ON_PREM'
      ), results AS (
        SELECT time, sum(value) AS sum
        FROM metrics_data
        GROUP BY 1
      ), moving_average AS (
        SELECT time, avg(sum) OVER (ORDER BY time RANGE BETWEEN INTERVAL '1 day' PRECEDING AND CURRENT ROW) AS ma
        FROM results
      )
      SELECT
        r.time, r.sum AS "Storage Access - IOPS", ma.ma AS "1-Day Moving Average"
      FROM results r JOIN moving_average ma USING (time)
      ORDER BY 1
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom:
  timeRegions: []
  timeShift:
  title: Storage Access - IOPS
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  type: graph
  xaxis:
    buckets:
    mode: time
    name:
    show: true
    values: []
  yaxes:
  - $$hashKey: object:1480
    format: none
    label: IOPS
    logBase: 1
    max:
    min:
    show: true
  - $$hashKey: object:1481
    format: short
    label:
    logBase: 1
    max:
    min:
    show: true
  yaxis:
    align: false
    alignLevel:
- columns: []
  datasource: $DB
  description: |-
    Average measurements for each VM in the selected group.
    Only on-prem VMs are represented in the panel.
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fontSize: 100%
  gridPos:
    h: 22
    w: 24
    x: 0
    y: 30
  id: 10
  pageSize:
  showHeader: true
  sort:
    col: 1
    desc: true
  styles:
  - alias: Time
    align: auto
    dateFormat: YYYY-MM-DD HH:mm:ss
    pattern: Time
    type: date
  - alias: 'Memory'
    align: left
    colorMode:
    colors:
    - rgba(245, 54, 54, 0.9)
    - rgba(237, 129, 40, 0.89)
    - rgba(50, 172, 45, 0.97)
    decimals: 2
    pattern: Mem
    thresholds: []
    type: number
    unit: kbytes
  - alias: ''
    align: auto
    colorMode:
    colors:
    - rgba(245, 54, 54, 0.9)
    - rgba(237, 129, 40, 0.89)
    - rgba(50, 172, 45, 0.97)
    dateFormat: YYYY-MM-DD HH:mm:ss
    decimals: 2
    mappingType: 1
    pattern: Storage
    thresholds: []
    type: number
    unit: mbytes
  - alias: ''
    align: auto
    colorMode:
    colors:
    - rgba(245, 54, 54, 0.9)
    - rgba(237, 129, 40, 0.89)
    - rgba(50, 172, 45, 0.97)
    dateFormat: YYYY-MM-DD HH:mm:ss
    decimals: 2
    mappingType: 1
    pattern: IOPS
    thresholds: []
    type: number
    unit: null
  - alias: ''
    align: auto
    colorMode:
    colors:
    - rgba(245, 54, 54, 0.9)
    - rgba(237, 129, 40, 0.89)
    - rgba(50, 172, 45, 0.97)
    dateFormat: YYYY-MM-DD HH:mm:ss
    decimals: 2
    mappingType: 1
    pattern: CPU
    thresholds: []
    type: number
    unit: hertz
  targets:
  - format: table
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      WITH metrics_data AS (
        SELECT
          m.time,
          m.entity_oid,
          e.name as entity_name,
          m.type as metric_type,
          coalesce(m.consumed, 0.0) as value
        FROM metric m,
          scope_to($__timeFrom(), $__timeTo(),  'VIRTUAL_MACHINE', ARRAY[${Group}]::bigint[], '${Group:raw}' = '0') s,
          entity e
        WHERE
          m.time BETWEEN $__timeFrom() AND $__timeTo()
          AND m.entity_oid = s.oid
          AND m.time BETWEEN s.from_time AND s.to_time
          AND m.type IN ('CPU', 'MEM', 'STORAGE_AMOUNT', 'STORAGE_ACCESS')
          AND m.provider_oid IS NOT NULL
          AND s.oid = m.entity_oid
          AND e.oid = m.entity_oid
          AND e.environment = 'ON_PREM'
      ), time_entity_sums AS (
        SELECT time, entity_oid, entity_name, metric_type,  sum(value) as value
        FROM metrics_data
        GROUP BY 1, 2, 3, 4
      )
      SELECT
        m.entity_name as "VM Name",
        -- scale to hertz since mhz is not a unit handled by grafana
        avg(m.value*1000000) FILTER (WHERE m.metric_type = 'CPU') AS "CPU",
        avg(m.value) FILTER (WHERE m.metric_type = 'MEM') AS "Mem",
        avg(m.value) FILTER (WHERE m.metric_type = 'STORAGE_AMOUNT') AS "Storage",
        avg(m.value) FILTER (WHERE m.metric_type = 'STORAGE_ACCESS') AS "IOPS"
      FROM time_entity_sums m
      GROUP BY m.entity_oid, m.entity_name
      ORDER BY m.entity_name, m.entity_oid
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  timeFrom:
  timeShift:
  title: Virtual Machine Resource Usage
  transform: table
  type: table-old
refresh: false
schemaVersion: 26
style: dark
tags: []
templating:
  list:
    - hide: 2
      includeAll: false
      label:
      multi: false
      name: DB
      options: []
      query: postgres
      queryValue: ''
      refresh: 1
      regex: ''
      skipUrlSync: false
      type: datasource
    - allValue: "0"
      datasource: $DB
      definition: |-
        WITH candidates AS (
          SELECT oid, name
          FROM entity
          WHERE type IN ('GROUP', 'COMPUTE_CLUSTER')
            AND attrs -> 'member_types' ?| array['VIRTUAL_MACHINE', 'PHYSICAL_MACHINE']
            AND (first_seen, last_seen) OVERLAPS ($__timeFrom(), $__timeTo())
        )
        SELECT DISTINCT
          g.name AS __text,
          g.oid AS __value
        FROM
          candidates g,
          entity e,
          scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE',
            (SELECT array_agg(oid) FROM candidates)::bigint[], false) AS s
        WHERE
          s.seed = g.oid
          AND s.oid = e.oid
          AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())
          AND e.environment = 'ON_PREM'
      hide: 0
      includeAll: true
      label:
      multi: false
      name: Group
      options: []
      query: |-
        WITH candidates AS (
          SELECT oid, name
          FROM entity
          WHERE type IN ('GROUP', 'COMPUTE_CLUSTER')
            AND attrs -> 'member_types' ?| array['VIRTUAL_MACHINE', 'PHYSICAL_MACHINE']
            AND (first_seen, last_seen) OVERLAPS ($__timeFrom(), $__timeTo())
        )
        SELECT DISTINCT
          g.name AS __text,
          g.oid AS __value
        FROM
          candidates g,
          entity e,
          scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE',
            (SELECT array_agg(oid) FROM candidates)::bigint[], false) AS s
        WHERE
          s.seed = g.oid
          AND s.oid = e.oid
          AND (e.first_seen, e.last_seen) OVERLAPS ($__timeFrom(), $__timeTo())
          AND e.environment = 'ON_PREM'
      refresh: 2
      regex: ''
      skipUrlSync: false
      sort: 0
      tagValuesQuery: ''
      tags: []
      tagsQuery: ''
      type: query
      useTags: false
time:
  from: now-1d
  to: now
timepicker:
  refresh_intervals:
  - 10s
  - 30s
  - 1m
  - 5m
  - 15m
  - 30m
  - 1h
  - 2h
  - 1d
timezone: ''
title: Consumption Summary of Physical Resources for Virtual Machines
uid: consumption_summary_physical_for_virtual
