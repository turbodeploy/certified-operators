annotations:
  list:
  - builtIn: 1
    datasource: -- Grafana --
    enable: true
    hide: true
    iconColor: rgba(0, 211, 255, 1)
    name: Annotations & Alerts
    type: dashboard
description: Average consumption of physical resources for a group of virtual machines.
editable: false
gnetId:
graphTooltip: 0
iteration: 1600436048145
links: []
panels:
- datasource: Turbo Timescale
  description: The Capacity and Used figures are averages over the time window. The
    VM count indicates the number of unique VMs that have been part of the group over
    the time window and that provide information about the specific resource.
  fieldConfig:
    defaults:
      custom:
        align: null
        filterable: false
      mappings: []
      thresholds:
        mode: absolute
        steps:
          - color: green
            value: null
          - color: red
            value: 80
    overrides:
      - matcher:
          id: byName
          options: Capacity
        properties:
          - id: custom.width
            value: 144
      - matcher:
          id: byName
          options: Units
        properties:
          - id: custom.width
            value: 90
  gridPos:
    h: 8
    w: 9
    x: 7
    y: 5
  id: 13
  options:
    showHeader: true
    sortBy: []
  pluginVersion: 7.3.4
  targets:
    - format: table
      group: []
      metricColumn: none
      rawQuery: true
      rawSql: |-
        SELECT
                  CASE
                    WHEN daily_consumed.type = 'STORAGE_AMOUNT' THEN 'Storage Usage'
                    WHEN daily_consumed.type = 'CPU' THEN 'CPU Usage'
                    WHEN daily_consumed.type = 'MEM' THEN 'Memory Usage'
                    WHEN daily_consumed.type = 'STORAGE_ACCESS' THEN 'Storage Access - IOPS'
                    END::text AS "Resource",
                  CASE
                    WHEN daily_consumed.type = 'STORAGE_AMOUNT' THEN TRUNC(AVG(capacity)::numeric / 1024 / 1000 , 2)
                    WHEN daily_consumed.type = 'CPU' THEN TRUNC(AVG(capacity)::numeric, 2)
                    WHEN daily_consumed.type = 'MEM' THEN TRUNC(AVG(capacity)::numeric / 1024 / 1024 / 1000, 2)
                    ELSE AVG(capacity)
                  END :: numeric as "Capacity",
                  CASE
                    WHEN daily_consumed.type = 'STORAGE_AMOUNT' THEN TRUNC(AVG(consumed)::numeric / 1024 / 1000, 2)
                    WHEN daily_consumed.type = 'CPU' THEN TRUNC(AVG(consumed)::numeric, 2)
                    WHEN daily_consumed.type = 'MEM' THEN TRUNC(AVG(consumed)::numeric / 1024 / 1024 / 1000, 2)
                    WHEN daily_consumed.type = 'STORAGE_ACCESS' THEN TRUNC(AVG(consumed)::numeric, 2)
                    ELSE AVG(consumed)
                  END :: numeric as "Used",
                  CASE
                    WHEN daily_consumed.type = 'STORAGE_AMOUNT' THEN 'TiB'
                    WHEN daily_consumed.type = 'CPU' THEN 'MHz'
                    WHEN daily_consumed.type = 'MEM' THEN 'TiB'
                    WHEN daily_consumed.type = 'STORAGE_ACCESS' THEN 'IOPS'
                    ELSE '-'
                  END as "Units",
                  TRUNC(AVG(numConsumers), 0) as "VM Count"
                FROM (WITH metrics_data AS (
                      SELECT m.time, m.entity_oid, m.consumed as value, type as metric_type
                      FROM metric m,
                        scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE', ARRAY[ [[Group]] ]::bigint[], [[Group]] = '0') s
                      WHERE m.time  BETWEEN $__timeFrom() AND $__timeTo()
                        AND m.type IN ('CPU', 'MEM', 'STORAGE_AMOUNT', 'STORAGE_ACCESS')
                        AND s.oid = m.entity_oid),
                    entity_timestamp_aggregation AS (
                      SELECT time, entity_oid, sum(value) as value, metric_type
                      FROM metrics_data
                      GROUP BY time, entity_oid, metric_type),
                    daily_avg_metrics as (
                      SELECT
                        date_trunc('day', m.time) as "time",
                        m.entity_oid,
                        metric_type,
                        avg(m.value) as value
                        FROM entity_timestamp_aggregation m
                      GROUP BY 1, 2, 3
                    )
                    SELECT
                      metric_type as type,
                      daily_avg_metrics.time,
                      sum(daily_avg_metrics.value) as consumed,
                      count(entity_oid) AS numConsumers
                    FROM daily_avg_metrics
                    group by 1,2
                    ) AS daily_consumed,
                    (SELECT type, time, SUM(capacity) as capacity
                     FROM (
                    SELECT
                      date_trunc('day', metric.time) AS "time",
                      metric.type,
                      s.e_type as entityType,
                      metric.entity_oid,
                      AVG(metric.capacity) AS capacity
                    FROM extractor.metric, scope_to_types($__timeFrom(), $__timeTo(), ARRAY['PHYSICAL_MACHINE', 'STORAGE']::entity_type[], ARRAY[ [[Group]] ]::bigint[], [[Group]] = '0') s
                    WHERE
                      "time" BETWEEN $__timeFrom() AND $__timeTo() AND
                      metric.type in ('CPU', 'MEM', 'STORAGE_AMOUNT', 'STORAGE_ACCESS') AND
                      metric.entity_oid = s.oid and
                      metric.time BETWEEN s.from_time AND
                      s.to_time
                    GROUP BY 1, 2, 3, 4) as y
                  GROUP BY 1, 2) as daily_capacity
                WHERE daily_consumed.type = daily_capacity.type
                GROUP BY 1, daily_consumed.type
      refId: A
      select:
      - - params:
          - savings
          type: column
      table: action_spec
      timeColumn: first_seen
      timeColumnType: timestamp
      where:
      - name: $__timeFilter
        params: []
        type: macro
  timeFrom: null
  timeShift: null
  title: Total Resource Summary
  type: table
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  description: Average CPU usage measurement
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 6
    w: 24
    x: 0
    y: 8
  hiddenSeries: false
  id: 4
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 2
  nullPointMode: 'null'
  options:
    dataLinks: []
  percentage: false
  pointradius: 2
  points: true
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      WITH metrics_data AS (
        SELECT m.time, m.entity_oid, m.consumed as value
        FROM metric m,
          scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE', ARRAY[${Group}]::bigint[], '${Group:raw}' = '0') s
        WHERE
          m.entity_oid = s.oid
          AND m.time BETWEEN s.from_time AND s.to_time
          AND m.type = 'CPU'
          AND m.time  BETWEEN $__timeFrom() AND $__timeTo()
      ),
      daily_avg_metrics as (
        SELECT
          date_trunc('day', m.time) as "time",
          m.entity_oid,
          avg(m.value) as value
        FROM metrics_data m
        GROUP BY 1, 2
      )
      SELECT
        daily_avg_metrics.time,
        sum(daily_avg_metrics.value) as "CPU Usage"
      FROM daily_avg_metrics
      GROUP BY 1
      ORDER BY 1
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom:
  timeRegions: []
  timeShift:
  title: CPU Usage
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  type: graph
  xaxis:
    buckets:
    mode: time
    name:
    show: true
    values: []
  yaxes:
  - $$hashKey: object:1300
    format: none
    label: MHz
    logBase: 1
    max:
    min:
    show: true
  - $$hashKey: object:1301
    format: short
    label:
    logBase: 1
    max:
    min:
    show: true
  yaxis:
    align: false
    alignLevel:
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  description: Average memory usage measurement
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 7
    w: 24
    x: 0
    y: 14
  hiddenSeries: false
  id: 2
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 3
  nullPointMode: 'null'
  options:
    dataLinks: []
  percentage: false
  pointradius: 2
  points: true
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      WITH metrics_data AS (
        SELECT m.time, m.entity_oid, m.consumed as value
        FROM metric m,
          scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE', ARRAY[${Group}]::bigint[], '${Group:raw}' = '0') s
        WHERE m.time  BETWEEN $__timeFrom() AND $__timeTo()
          AND m.type = 'MEM'
          AND s.oid = m.entity_oid
      ), daily_avg_metrics as (
        SELECT
          date_trunc('day', m.time) as "time",
          m.entity_oid,
          avg(m.value) as value
          FROM metrics_data m
        GROUP BY 1, 2
      )
      SELECT
        daily_avg_metrics.time,
        sum(daily_avg_metrics.value) as "Mem Usage"
      FROM daily_avg_metrics
      GROUP BY 1
      ORDER BY 1
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom:
  timeRegions: []
  timeShift:
  title: Mem Usage
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  type: graph
  xaxis:
    buckets:
    mode: time
    name:
    show: true
    values: []
  yaxes:
  - $$hashKey: object:1219
    format: kbytes
    label:
    logBase: 1
    max:
    min:
    show: true
  - $$hashKey: object:1220
    format: short
    label:
    logBase: 1
    max:
    min:
    show: true
  yaxis:
    align: false
    alignLevel:
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  description: Average storage used measurement
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 7
    w: 24
    x: 0
    y: 21
  hiddenSeries: false
  id: 6
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 3
  nullPointMode: 'null'
  options:
    dataLinks: []
  percentage: false
  pointradius: 2
  points: true
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      WITH metrics_data AS (
        SELECT m.time, m.entity_oid, m.consumed as value
        FROM metric m,
          scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE', ARRAY[${Group}]::bigint[], '${Group:raw}' = '0') s
        WHERE m.time  BETWEEN $__timeFrom() AND $__timeTo()
          AND m.type = 'STORAGE_AMOUNT'
          AND s.oid = m.entity_oid
      ), entity_timestamp_aggregation AS (
        SELECT time, entity_oid, sum(value) as value
        FROM metrics_data
        GROUP BY time, entity_oid
      ), daily_avg_metrics as (
        SELECT
          date_trunc('day', m.time) as "time",
          m.entity_oid,
          avg(m.value) as value
          FROM entity_timestamp_aggregation m
        GROUP BY 1, 2
      )
      SELECT
        daily_avg_metrics.time,
        sum(daily_avg_metrics.value) as "Storage Used"
      FROM daily_avg_metrics
      GROUP BY 1
      ORDER BY 1
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom:
  timeRegions: []
  timeShift:
  title: Storage Usage
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  type: graph
  xaxis:
    buckets:
    mode: time
    name:
    show: true
    values: []
  yaxes:
  - $$hashKey: object:1386
    format: mbytes
    label:
    logBase: 1
    max:
    min:
    show: true
  - $$hashKey: object:1387
    format: short
    label:
    logBase: 1
    max:
    min:
    show: true
  yaxis:
    align: false
    alignLevel:
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  description: Average storage IOPS measurement
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 7
    w: 24
    x: 0
    y: 28
  hiddenSeries: false
  id: 8
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 3
  nullPointMode: 'null'
  options:
    dataLinks: []
  percentage: false
  pointradius: 2
  points: true
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      WITH metrics_data AS (
        SELECT m.time, m.entity_oid, m.consumed as value
        FROM metric m,
          scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE', ARRAY[${Group}]::bigint[], '${Group:raw}' = '0') s
        WHERE m.time  BETWEEN $__timeFrom() AND $__timeTo()
          AND m.type = 'STORAGE_ACCESS'
          AND s.oid = m.entity_oid
      ), entity_timestamp_aggregation AS (
        SELECT time, entity_oid, sum(value) as value
        FROM metrics_data
        GROUP BY time, entity_oid
      ), daily_avg_metrics as (
        SELECT
          date_trunc('day', m.time) as "time",
          m.entity_oid,
          avg(m.value) as value
          FROM entity_timestamp_aggregation m
        GROUP BY 1, 2
      )
      SELECT
        daily_avg_metrics.time,
        sum(daily_avg_metrics.value) as "Storage Access - IOPS"
      FROM daily_avg_metrics
      GROUP BY 1
      ORDER BY 1
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom:
  timeRegions: []
  timeShift:
  title: Storage Access - IOPS
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  type: graph
  xaxis:
    buckets:
    mode: time
    name:
    show: true
    values: []
  yaxes:
  - $$hashKey: object:1480
    format: none
    label: IOPS
    logBase: 1
    max:
    min:
    show: true
  - $$hashKey: object:1481
    format: short
    label:
    logBase: 1
    max:
    min:
    show: true
  yaxis:
    align: false
    alignLevel:
- columns: []
  datasource: $DB
  description: Average measurement for each VM in the selected group
  fieldConfig:
    defaults:
      custom: {}
    overrides: []
  fontSize: 100%
  gridPos:
    h: 8
    w: 24
    x: 0
    y: 35
  id: 10
  pageSize:
  showHeader: true
  sort:
    col: 1
    desc: true
  styles:
  - alias: Time
    align: auto
    dateFormat: YYYY-MM-DD HH:mm:ss
    pattern: Time
    type: date
  - alias: ''
    align: left
    colorMode:
    colors:
    - rgba(245, 54, 54, 0.9)
    - rgba(237, 129, 40, 0.89)
    - rgba(50, 172, 45, 0.97)
    decimals: 2
    pattern: Mem
    thresholds: []
    type: number
    unit: kbytes
  - alias: ''
    align: auto
    colorMode:
    colors:
    - rgba(245, 54, 54, 0.9)
    - rgba(237, 129, 40, 0.89)
    - rgba(50, 172, 45, 0.97)
    dateFormat: YYYY-MM-DD HH:mm:ss
    decimals: 2
    mappingType: 1
    pattern: Storage
    thresholds: []
    type: number
    unit: mbytes
  - alias: ''
    align: auto
    colorMode:
    colors:
    - rgba(245, 54, 54, 0.9)
    - rgba(237, 129, 40, 0.89)
    - rgba(50, 172, 45, 0.97)
    dateFormat: YYYY-MM-DD HH:mm:ss
    decimals: 2
    mappingType: 1
    pattern: CPU
    thresholds: []
    type: number
    unit: none
  targets:
  - format: table
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      WITH metrics_data AS (
        SELECT m.entity_oid, e.name as entity_name, m.consumed as value, m.type as metric_type, m.time
        FROM metric m,
          scope_to($__timeFrom(), $__timeTo(), 'VIRTUAL_MACHINE', ARRAY[${Group}]::bigint[], '${Group:raw}' = '0') s,
          entity e
        WHERE m.time  BETWEEN $__timeFrom() AND $__timeTo()
          AND m.type IN ('CPU', 'MEM', 'STORAGE_AMOUNT')
          AND s.oid = m.entity_oid
          AND e.oid = m.entity_oid
      ), entity_timestamp_aggregation AS (
         SELECT entity_oid, entity_name, sum(value) as value, metric_type
         FROM metrics_data
         GROUP BY time, entity_oid, entity_name, metric_type
      )
      SELECT
        m.entity_name as "VM Name",
        avg(m.value) FILTER (WHERE m.metric_type = 'MEM') AS "Mem",
        avg(m.value) FILTER (WHERE m.metric_type = 'CPU') AS "CPU",
        avg(m.value) FILTER (WHERE m.metric_type = 'STORAGE_AMOUNT') AS "Storage"
      FROM entity_timestamp_aggregation m
      GROUP BY m.entity_oid, m.entity_name
      ORDER BY m.entity_name, m.entity_oid
    refId: A
    select:
    - - params:
        - current
        type: column
    table: metric
    timeColumn: '"time"'
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  timeFrom:
  timeShift:
  title: Virtual Machine Physical Resource Usage
  transform: table
  type: table-old
refresh: false
schemaVersion: 26
style: dark
tags: []
templating:
  list:
    - hide: 2
      includeAll: false
      label:
      multi: false
      name: DB
      options: []
      query: postgres
      queryValue: ''
      refresh: 1
      regex: ''
      skipUrlSync: false
      type: datasource
    - allValue: "0"
      datasource: $DB
      definition: |-
        SELECT
          name as __text,
          oid as __value
        FROM entity
        WHERE
          entity.type = 'GROUP'
          AND ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen)
          AND attrs -> 'member_types' ? 'VIRTUAL_MACHINE'
        GROUP BY name, oid
        ORDER BY 1
      hide: 0
      includeAll: true
      label:
      multi: false
      name: Group
      options: []
      query: |-
        SELECT
          name as __text,
          oid as __value
        FROM entity
        WHERE
          entity.type = 'GROUP'
          AND ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen)
          AND attrs -> 'member_types' ? 'VIRTUAL_MACHINE'
        GROUP BY name, oid
        ORDER BY 1
      refresh: 2
      regex: ''
      skipUrlSync: false
      sort: 0
      tagValuesQuery: ''
      tags: []
      tagsQuery: ''
      type: query
      useTags: false
time:
  from: now-7d
  to: now
timepicker:
  refresh_intervals:
  - 10s
  - 30s
  - 1m
  - 5m
  - 15m
  - 30m
  - 1h
  - 2h
  - 1d
timezone: ''
title: Consumption Summary of Physical Resources for Virtual Machines
uid: consumption_summary_physical_for_virtual

