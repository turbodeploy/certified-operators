annotations:
  list:
  - builtIn: 1
    datasource: -- Grafana --
    enable: true
    hide: true
    iconColor: rgba(0, 211, 255, 1)
    name: Annotations & Alerts
    type: dashboard
editable: false
gnetId:
graphTooltip: 0
iteration: 1600812107378
links: []
panels:
- datasource: $DB
  description: This panel shows counts for the entire cluster based on the most recent
    date in the time selection
  fieldConfig:
    defaults:
      custom:
        align:
      mappings:
      - from: ''
        id: 0
        text: ''
        to: ''
        type: 1
        value: ''
      thresholds:
        mode: absolute
        steps:
        - color: green
          value:
      unit: none
    overrides: []
  gridPos:
    h: 6
    w: 7
    x: 0
    y: 0
  id: 6
  options:
    showHeader: true
  pluginVersion: 7.0.1
  targets:
  - format: table
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      with pm_counts as (
        SELECT
            count(distinct oid) as pm_count,
            sum(cpus) as cpu_count,
            sum(mem) as pm_mem
        from
            (
            select
                entity.oid,
                avg((entity.attrs -> 'num_cpus')::int) as cpus,
                avg(metric.capacity) as mem
            from
                metric, entity, scope
            where
                -- join conditions
                metric.entity_oid = entity.oid
                and entity.oid = scope.scoped_oid
                and metric.time between scope.start and scope.finish
                -- fixed conditions
                and metric.type = 'MEM'
                and scope.scoped_type = 'PHYSICAL_MACHINE'
                -- conditions involving dashboard vars
                and metric.time between timestamptz $__timeTo() - interval '1 hour' and $__timeTo()
                and (timestamptz $__timeTo() - interval '1 hour', $__timeTo()) overlaps (scope.start, scope.finish)
                and scope.seed_oid = ${Cluster:raw} + 0
            group by 1) as pm_data
      ),
      -- WITH...
      vm_counts as (
        select
            count(distinct oid) as vm_count, sum(vcpus) as vcpu_count, sum(vmem) as vm_vmem
        from
            (
            select
                entity.oid,
                avg((attrs -> 'num_cpus')::int) as vcpus,
                avg(capacity) as vmem
            from
                metric, entity, scope
            where
                -- join conditions
                metric.entity_oid = entity.oid
                and entity.oid = scope.scoped_oid
                and metric.time between scope.start and scope.finish
                -- fixed conditions
                and metric.type = 'VMEM'
                and scope.scoped_type = 'VIRTUAL_MACHINE'
                -- conditions involving dashboard vars
                and metric.time between timestamptz $__timeTo() - interval '1 hour' and $__timeTo()
                and (timestamptz $__timeTo() - interval '1 hour', $__timeTo()) overlaps (scope.start, scope.finish)
                and scope.seed_oid = ${Cluster:raw}
            group by 1) as vm_data
      ),
      -- WITH ...
      storage_stats as (
        select
            sum(stor_used) as stor_used, sum(stor_cap) as stor_cap, sum(stor_prov) as stor_prov
        from
            (
            select
                entity.oid,
                MAX(current) filter (where metric.type = 'STORAGE_AMOUNT') as stor_used,
                MAX(capacity) filter (where metric.type = 'STORAGE_AMOUNT') as stor_cap,
                MAX(current) filter (where metric.type = 'STORAGE_PROVISIONED') as stor_prov
            from
                metric, entity, scope
            where
                -- join conditions
                metric.entity_oid = entity.oid
                and entity.oid = scope.scoped_oid
                and metric.time between scope.start and scope.finish
                -- fixed conditions
                and metric.type in ('STORAGE_AMOUNT', 'STORAGE_PROVISIONED')
                and scope.scoped_type = 'STORAGE'
                -- conditions involving dashboard vars
                and metric.time between timestamptz $__timeTo() - interval '1 hour' and $__timeTo()
                and (timestamptz $__timeTo() - interval '1 hour', $__timeTo()) overlaps (scope.start, scope.finish)
                and scope.seed_oid = ${Cluster:raw}
            group by 1) as stg_data
      )
      select
      pm_count as "Hosts",
      vm_count as "VMs",
      pm_mem / 1024 / 1024 as "Mem Capacity",
      vm_vmem / 1024 / 1024 as "VMem Provisioned",
      cpu_count as "Host CPUs",
      vcpu_count as "VCPUs Provisioned",
      stor_cap / 1024 as "Total Storage",
      (stor_cap - stor_used)/ 1024 as "Available Storage",
      stor_prov / 1024 as "Allocated Storage"
      from
      pm_counts, vm_counts, storage_stats
    refId: A
    select:
    - - params:
        - savings
        type: column
    table: action_spec
    timeColumn: first_seen
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  timeFrom:
  timeShift:
  title: Current Counts
  transformations:
  - id: organize
    options:
      excludeByName:
        Allocated Storage: true
        Available Storage: true
        Hosts: false
        Mem: true
        Mem Capacity: true
        Total Storage: true
        VMem: true
        VMem Provisioned: true
        VMs: false
      indexByName: {}
      renameByName: {}
  - id: reduce
    options: {}
  - id: organize
    options:
      excludeByName: {}
      indexByName: {}
      renameByName:
        Max: Stats
  type: table
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  decimals: 2
  fieldConfig:
    defaults:
      custom:
        align:
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value:
        - color: red
          value: 80
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 7
    w: 17
    x: 7
    y: 0
  hiddenSeries: false
  id: 4
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 2
  nullPointMode: 'null'
  options:
    dataLinks: []
  percentage: false
  pluginVersion: 7.1.5
  pointradius: 2
  points: false
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      WITH pm_counts AS (
          SELECT
            date_trunc('day', metric.time) as time,
            count(distinct oid) as pm_count
          FROM
              metric
          JOIN scope ON metric.entity_oid = scope.scoped_oid
              AND metric.time between scope.start and scope.finish
          JOIN entity ON entity.oid = scope.seed_oid
          WHERE
            -- fixed conditions
            metric.type = 'MEM'
            AND scope.scoped_type = 'PHYSICAL_MACHINE'
            AND metric.time - date_trunc('day', metric.time) < interval '10 minutes'
            -- conditions involving dashboard vars
            AND metric.time between timestamptz $__timeFrom() and $__timeTo()
            AND ($__timeFrom(), $__timeTo()) OVERLAPS (scope.start, scope.finish)
            AND scope.seed_oid = ${Cluster:raw} + 0
          GROUP BY 1),
      -- WITH...
      vm_counts as (
          SELECT
             date_trunc('day', metric.time) as time,
             count(distinct oid) as vm_count
          FROM
              metric
          JOIN scope ON metric.entity_oid = scope.seed_oid
              AND metric.time between scope.start and scope.finish
              AND scope.scoped_type = 'COMPUTE_CLUSTER'
          JOIN entity ON entity.oid = scope.seed_oid
              AND entity.type = 'VIRTUAL_MACHINE'
          WHERE
            -- fixed conditions
            metric.type = 'VMEM'
            AND metric.time - date_trunc('day', metric.time) < interval '10 minutes'
            -- conditions involving dashboard vars
            AND metric.time between timestamptz $__timeFrom() and $__timeTo()
            AND ($__timeFrom(), $__timeTo()) OVERLAPS (start, finish)
            AND scope.scoped_oid = ${Cluster:raw}::bigint
          GROUP BY 1)
      SELECT
          pm_counts.time as time,
          pm_count as "Hosts",
          vm_count as "VMs"
      FROM
          pm_counts, vm_counts
      WHERE
          pm_counts.time = vm_counts.time
    refId: A
    select:
    - - params:
        - value
        type: column
    timeColumn: time
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom:
  timeRegions: []
  timeShift:
  title: VM and Host Count Over Time
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  transformations:
  - id: calculateField
    options:
      alias: VM / Host Ratio
      binary:
        left: VMs
        operator: /
        reducer: sum
        right: Hosts
      mode: binary
      reduce:
        reducer: sum
  type: graph
  xaxis:
    buckets:
    mode: time
    name:
    show: true
    values: []
  yaxes:
  - format: short
    label:
    logBase: 1
    max:
    min:
    show: true
  - format: short
    label:
    logBase: 1
    max:
    min:
    show: true
  yaxis:
    align: false
    alignLevel:
- datasource: -- Dashboard --
  description: This panel shows current Memory and Storage stats across the cluster,
    based on the most recent date in the time selection.
  fieldConfig:
    defaults:
      custom:
        align:
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value:
        - color: red
          value: 80
      unit: gbytes
    overrides: []
  gridPos:
    h: 7
    w: 7
    x: 0
    y: 6
  id: 14
  options:
    showHeader: true
    sortBy:
    - desc: false
      displayName: Stats
  pluginVersion: 7.0.1
  targets:
  - panelId: 6
    refId: A
  timeFrom:
  timeShift:
  title: Current Stats
  transformations:
  - id: filterFieldsByName
    options:
      include:
        names:
        - Total Storage
        - Available Storage
        - Allocated Storage
        - Mem Capacity
        - VMem Provisioned
  - id: reduce
    options: {}
  - id: organize
    options:
      excludeByName: {}
      indexByName: {}
      renameByName:
        Max: Stats
  type: table
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  fieldConfig:
    defaults:
      custom: {}
      unit: mbytes
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 7
    w: 17
    x: 7
    y: 7
  hiddenSeries: false
  id: 10
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 2
  nullPointMode: 'null'
  options:
    dataLinks: []
  percentage: false
  pluginVersion: 7.1.5
  pointradius: 2
  points: false
  renderer: flot
  seriesOverrides:
  - alias: Total Storage
    color: '#37872D'
  - alias: Allocated Storage
    color: '#E0B400'
  - alias: Used Storage
    color: '#8AB8FF'
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      SELECT
         time,
         sum(stor_cap) as "Total Storage",
         sum(stor_used) as "Used Storage",
         sum(stor_prov) as "Allocated Storage"
       FROM
         (SELECT
           date_trunc('day', metric.time) as time,
           metric.entity_oid,
           MAX(current) FILTER (WHERE metric.type = 'STORAGE_AMOUNT') as stor_used,
           MAX(capacity) FILTER (WHERE metric.type = 'STORAGE_AMOUNT') as stor_cap,
           MAX(current) FILTER (WHERE metric.type = 'STORAGE_PROVISIONED') as stor_prov
         FROM
           metric
           JOIN scope ON metric.entity_oid = scope.scoped_oid
             AND metric.time between scope.start and scope.finish
         WHERE
           -- fixed conditions
           metric.type in ('STORAGE_AMOUNT', 'STORAGE_PROVISIONED')
           AND scope.scoped_type = 'STORAGE'
           -- conditions involving dashboard vars
           AND metric.time between timestamptz $__timeFrom() and $__timeTo()
           AND ($__timeFrom(), $__timeTo()) OVERLAPS (scope.start, scope.finish)
           AND scope.seed_oid = ${Cluster:raw}::bigint + 0
         GROUP BY 1, 2) AS data
       GROUP BY 1
    refId: A
    select:
    - - params:
        - savings
        type: column
    table: action_spec
    timeColumn: first_seen
    timeColumnType: timestamp
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom:
  timeRegions: []
  timeShift:
  title: Storage Over Time
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  transformations: []
  type: graph
  xaxis:
    buckets:
    mode: time
    name:
    show: true
    values: []
  yaxes:
  - format: mbytes
    label:
    logBase: 1
    max:
    min:
    show: true
  - format: short
    label:
    logBase: 1
    max:
    min:
    show: true
  yaxis:
    align: false
    alignLevel:
- datasource: -- Dashboard --
  description: This panel shows current VM ratios across the cluster, based on the
    most recent date in the time selection.
  fieldConfig:
    defaults:
      custom:
        align:
      decimals: 2
      mappings: []
      thresholds:
        mode: absolute
        steps:
        - color: green
          value:
        - color: red
          value: 80
      unit: none
    overrides:
    - matcher:
        id: byName
        options: Field
      properties:
      - id: custom.width
        value: 196
  gridPos:
    h: 9
    w: 7
    x: 0
    y: 13
  id: 8
  options:
    showHeader: true
    sortBy: []
  pluginVersion: 7.0.1
  targets:
  - panelId: 6
    refId: A
  timeFrom:
  timeShift:
  title: Current Ratios
  transformations:
  - id: calculateField
    options:
      binary:
        left: VMs
        operator: /
        reducer: sum
        right: Hosts
      mode: binary
      reduce:
        reducer: sum
      replaceFields: false
  - id: calculateField
    options:
      alias: VMs / Mem (GB)
      binary:
        left: VMs
        operator: /
        reducer: sum
        right: Mem Capacity
      mode: binary
      reduce:
        include: []
        reducer: sum
  - id: calculateField
    options:
      alias: VMs / VCPUs
      binary:
        left: VMs
        operator: /
        reducer: sum
        right: VCPUs Provisioned
      mode: binary
      reduce:
        reducer: sum
  - id: calculateField
    options:
      alias: Mem (GB) / VMs
      binary:
        left: Mem Capacity
        operator: /
        reducer: sum
        right: VMs
      mode: binary
      reduce:
        reducer: sum
  - id: calculateField
    options:
      alias: VCPUs / VMs
      binary:
        left: VCPUs Provisioned
        operator: /
        reducer: sum
        right: VMs
      mode: binary
      reduce:
        reducer: sum
  - id: calculateField
    options:
      alias: Allocated_TB
      binary:
        left: Allocated Storage
        operator: /
        reducer: sum
        right: 1024
      mode: binary
      reduce:
        reducer: sum
  - id: calculateField
    options:
      alias: VMs / Storage Allocated (TB)
      binary:
        left: VMs
        operator: /
        reducer: sum
        right: Allocated_TB
      mode: binary
      reduce:
        reducer: sum
  - id: calculateField
    options:
      alias: VCPUs / CPUs
      binary:
        left: VCPUs Provisioned
        operator: /
        reducer: sum
        right: Host CPUs
      mode: binary
      reduce:
        reducer: sum
  - id: filterFieldsByName
    options:
      include:
        names:
        - time
        - VMs / Hosts
        - VMs / Mem (GB)
        - VMs / VCPUs
        - Mem (GB) / VMs
        - VCPUs / VMs
        - VMs / Storage Allocated (TB)
        - VCPUs / CPUs
  - id: organize
    options:
      excludeByName: {}
      indexByName:
        Mem (GB) / VMs: 6
        VCPUs / CPUs: 2
        VCPUs / VMs: 4
        VMs / Hosts: 1
        VMs / Mem (GB): 5
        VMs / Storage Allocated (TB): 7
        VMs / VCPUs: 3
        time: 0
      renameByName: {}
  - id: reduce
    options: {}
  - id: organize
    options:
      excludeByName: {}
      indexByName: {}
      renameByName:
        Max: Ratios
  type: table
- aliasColors: {}
  bars: false
  dashLength: 10
  dashes: false
  datasource: $DB
  fieldConfig:
    defaults:
      custom: {}
      unit: percent
    overrides: []
  fill: 0
  fillGradient: 0
  gridPos:
    h: 7
    w: 17
    x: 7
    y: 14
  hiddenSeries: false
  id: 12
  legend:
    avg: false
    current: false
    max: false
    min: false
    show: true
    total: false
    values: false
  lines: true
  linewidth: 2
  nullPointMode: 'null'
  options:
    dataLinks: []
  percentage: false
  pluginVersion: 7.1.5
  pointradius: 2
  points: false
  renderer: flot
  seriesOverrides: []
  spaceLength: 10
  stack: false
  steppedLine: false
  targets:
  - format: time_series
    group: []
    metricColumn: none
    rawQuery: true
    rawSql: |-
      SELECT
        date_trunc('day', metric.time) AS time,
         sum(CURRENT) FILTER (WHERE metric.type = 'CPU') /
            sum(capacity) FILTER (WHERE metric.type = 'CPU') * 100 AS "CPU Utilization",
         sum(CURRENT) FILTER (WHERE metric.type = 'MEM') /
            sum(capacity) FILTER (WHERE metric.type = 'MEM') * 100 AS "Mem Utilization"
      FROM metric
      JOIN scope ON
         metric.entity_oid = scope.scoped_oid
         AND metric.time BETWEEN scope.start AND scope.finish
      WHERE
         -- fixed conditions
         metric.type IN ('MEM', 'CPU')
         AND scope.scoped_type = 'PHYSICAL_MACHINE'
         -- conditions related to dashboard vars
         AND metric.time BETWEEN timestamptz $__timeFrom() AND $__timeTo()
         AND (timestamptz $__timeTo(), $__timeTo() ) OVERLAPS (START, finish)
         AND scope.seed_oid = ${Cluster:raw}::bigint + 0
      GROUP BY 1
      ORDER BY 1
    refId: A
    select:
    - - params:
        - value
        type: column
    timeColumn: time
    where:
    - name: $__timeFilter
      params: []
      type: macro
  thresholds: []
  timeFrom:
  timeRegions: []
  timeShift:
  title: CPU and Mem Utilization Over Time
  tooltip:
    shared: true
    sort: 0
    value_type: individual
  type: graph
  xaxis:
    buckets:
    mode: time
    name:
    show: true
    values: []
  yaxes:
  - format: percent
    label:
    logBase: 1
    max:
    min:
    show: true
  - format: short
    label:
    logBase: 1
    max:
    min:
    show: true
  yaxis:
    align: false
    alignLevel:
schemaVersion: 25
style: dark
tags: []
templating:
  list:
  - hide: 2
    includeAll: false
    label:
    multi: false
    name: DB
    options: []
    query: postgres
    refresh: 1
    regex: ''
    skipUrlSync: false
    type: datasource
  - allValue:
    datasource: $DB
    definition: ''
    hide: 0
    includeAll: false
    label:
    multi: false
    name: Cluster
    options: []
    query: |-
      SELECT
        name as __text,
        oid as __value
      FROM
        entity
      WHERE
        entity.type = 'COMPUTE_CLUSTER'
        AND ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen)
      ORDER BY 1
    refresh: 2
    regex: ''
    skipUrlSync: false
    sort: 0
    tagValuesQuery: ''
    tags: []
    tagsQuery: ''
    type: query
    useTags: false
time:
  from: now-7d
  to: now
timepicker:
  refresh_intervals:
  - 10s
  - 30s
  - 1m
  - 5m
  - 15m
  - 30m
  - 1h
  - 2h
  - 1d
timezone: ''
title: Individual Host Cluster Summary
uid: individual_cluster_summary
