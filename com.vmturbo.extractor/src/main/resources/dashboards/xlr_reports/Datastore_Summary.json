{
  "annotations": {
    "list": [
      {
        "builtIn": 1,
        "datasource": "-- Grafana --",
        "enable": true,
        "hide": true,
        "iconColor": "rgba(0, 211, 255, 1)",
        "name": "Annotations & Alerts",
        "type": "dashboard"
      }
    ]
  },
  "editable": true,
  "gnetId": null,
  "graphTooltip": 0,
  "iteration": 1591190269832,
  "links": [],
  "panels": [
    {
      "columns": [],
      "datasource": "$DB",
      "fontSize": "100%",
      "gridPos": {
        "h": 3,
        "w": 15,
        "x": 0,
        "y": 0
      },
      "id": 2,
      "pageSize": null,
      "showHeader": true,
      "sort": {
        "col": 1,
        "desc": false
      },
      "styles": [
        {
          "alias": "Time",
          "align": "auto",
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "pattern": "Time",
          "type": "date"
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "IOPS",
          "thresholds": [],
          "type": "number",
          "unit": "iops"
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Latency",
          "thresholds": [],
          "type": "number",
          "unit": "ms"
        },
        {
          "alias": "",
          "align": "right",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "decimals": 2,
          "pattern": "/.*/",
          "thresholds": [],
          "type": "number",
          "unit": "mbytes"
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \nmax(metric.capacity) FILTER (WHERE metric.type = 'STORAGE_AMOUNT') AS \"Capacity\",\navg(metric.current) FILTER (WHERE metric.type = 'STORAGE_PROVISIONED') AS \"Provisioned Used\",\navg(metric.current) FILTER (WHERE metric.type = 'STORAGE_AMOUNT') AS \"Used\",\navg(metric.current) FILTER (WHERE metric.type = 'STORAGE_ACCESS') AS \"IOPS\",\navg(metric.current) FILTER (WHERE metric.type = 'STORAGE_LATENCY') AS \"Latency\"\nFROM metric, entity\nWHERE   \n  ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen) AND\n  entity.type = 'STORAGE' and \n  CASE WHEN ARRAY[ [[Datastore]] ] = ARRAY[ '0' ] THEN true ELSE (entity.oid = any (array[ [[Datastore]] ]::bigint[])) END and \n  entity.oid = metric.entity_oid and\n  $__timeFilter(\"time\")\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "metric",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamptz",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Summary",
      "transform": "table",
      "type": "table-old"
    },
    {
      "columns": [],
      "datasource": "$DB",
      "fontSize": "100%",
      "gridPos": {
        "h": 5,
        "w": 15,
        "x": 0,
        "y": 3
      },
      "id": 19,
      "pageSize": null,
      "showHeader": true,
      "sort": {
        "col": null,
        "desc": false
      },
      "styles": [
        {
          "alias": "",
          "align": "left",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "IOPS",
          "thresholds": [],
          "type": "number",
          "unit": "iops"
        },
        {
          "alias": "",
          "align": "left",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Latency",
          "thresholds": [],
          "type": "number",
          "unit": "ms"
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "order",
          "thresholds": [],
          "type": "hidden",
          "unit": "short"
        },
        {
          "alias": "",
          "align": "left",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Utilization",
          "thresholds": [],
          "type": "number",
          "unit": "percent"
        },
        {
          "alias": "",
          "align": "left",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "decimals": 2,
          "pattern": "/.*/",
          "thresholds": [],
          "type": "number",
          "unit": "mbytes"
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT \nunnest(array['1','2','3']) as \"order\",\nunnest(array['AVG','MIN','MAX']) as \"Aggregation\",\nunnest(array[avg(metric.utilization) FILTER (WHERE metric.type = 'STORAGE_AMOUNT'),\nmin(metric.utilization) FILTER (WHERE metric.type = 'STORAGE_AMOUNT'),\nmax(metric.Utilization) FILTER (WHERE metric.type = 'STORAGE_AMOUNT')\n]) AS \"Utilization\",\nunnest(array[avg(metric.current) FILTER (WHERE metric.type = 'STORAGE_ACCESS'),\nmin(metric.current) FILTER (WHERE metric.type = 'STORAGE_ACCESS'),\nmax(metric.current) FILTER (WHERE metric.type = 'STORAGE_ACCESS')\n]) AS \"IOPS\",\nunnest(array[avg(metric.current) FILTER (WHERE metric.type = 'STORAGE_LATENCY'),\nmin(metric.current) FILTER (WHERE metric.type = 'STORAGE_LATENCY'),\nmax(metric.current) FILTER (WHERE metric.type = 'STORAGE_LATENCY')\n]) AS \"Latency\"\nFROM metric, entity\nWHERE entity.type = 'STORAGE' and \nCASE WHEN ARRAY[ [[Datastore]] ] = ARRAY[ '0' ] THEN true ELSE (entity.oid = any (array[ [[Datastore]] ]::bigint[])) END and \nentity.oid = metric.entity_oid and entity.hash = metric.entity_hash and\n  $__timeFilter(\"time\") and ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen)\nORDER BY \"order\" asc\n\n\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "table": "metric",
          "timeColumn": "\"time\"",
          "timeColumnType": "timestamptz",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "Resource Utilization",
      "transform": "table",
      "type": "table-old"
    },
    {
      "columns": [],
      "datasource": "$DB",
      "fontSize": "100%",
      "gridPos": {
        "h": 10,
        "w": 24,
        "x": 0,
        "y": 8
      },
      "id": 21,
      "pageSize": null,
      "showHeader": true,
      "sort": {
        "col": 5,
        "desc": true
      },
      "styles": [
        {
          "alias": "Time",
          "align": "auto",
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "pattern": "Time",
          "type": "date"
        },
        {
          "alias": "",
          "align": "left",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "VM Name",
          "thresholds": [],
          "type": "string",
          "unit": "short"
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "Storage Used",
          "thresholds": [],
          "type": "number",
          "unit": "mbytes"
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "/.*IOPS/",
          "thresholds": [],
          "type": "number",
          "unit": "iops"
        },
        {
          "alias": "",
          "align": "auto",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "dateFormat": "YYYY-MM-DD HH:mm:ss",
          "decimals": 2,
          "mappingType": 1,
          "pattern": "/.*Latency/",
          "thresholds": [],
          "type": "number",
          "unit": "ms"
        },
        {
          "alias": "",
          "align": "right",
          "colorMode": null,
          "colors": [
            "rgba(245, 54, 54, 0.9)",
            "rgba(237, 129, 40, 0.89)",
            "rgba(50, 172, 45, 0.97)"
          ],
          "decimals": 2,
          "pattern": "/.*/",
          "thresholds": [],
          "type": "number",
          "unit": "short"
        }
      ],
      "targets": [
        {
          "format": "table",
          "group": [],
          "metricColumn": "none",
          "rawQuery": true,
          "rawSql": "SELECT\nmax(sub.name) as \"VM Name\",\nmax(sub.value) FILTER (WHERE sub.type = 'STORAGE_AMOUNT') AS \"Storage Used\",\navg(sub.value) FILTER (WHERE sub.type = 'STORAGE_ACCESS') AS \"Avg IOPS\",\nmax(sub.value) FILTER (WHERE sub.type = 'STORAGE_ACCESS') AS \"Max IOPS\",\navg(sub.value) FILTER (WHERE sub.type = 'STORAGE_LATENCY') AS \"Avg Latency\",\nmax(sub.value) FILTER (WHERE sub.type = 'STORAGE_LATENCY') AS \"Max Latency\"\nFROM (\nselect entity.oid as oid, entity.name as name, metric.type as type, metric.consumed as value \nfrom metric, entity\nWHERE entity.type = 'VIRTUAL_MACHINE' and (entity.scope && (array[ [[Datastore]] ]::bigint[])) \nand entity.oid = metric.entity_oid and entity.hash = metric.entity_hash and (metric.type = 'STORAGE_LATENCY' or metric.type = 'STORAGE_ACCESS') \nand $__timeFilter(\"time\") and ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen)\nunion\nselect entity.oid as oid, max(entity.name) as name, max(metric.type) as type, sum(metric.consumed) as value \nfrom metric, entity\nWHERE entity.type = 'VIRTUAL_MACHINE' and \nCASE WHEN ARRAY[ [[Datastore]] ] = ARRAY[ '0' ] THEN true ELSE (entity.scope && (array[ [[Datastore]] ]::bigint[])) END\nand entity.oid = metric.entity_oid and entity.hash = metric.entity_hash and metric.type = 'STORAGE_AMOUNT'\nand $__timeFilter(\"time\") and  ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen)\nGROUP BY time, entity.oid\n) sub\ngroup by sub.oid\n",
          "refId": "A",
          "select": [
            [
              {
                "params": [
                  "value"
                ],
                "type": "column"
              }
            ]
          ],
          "timeColumn": "time",
          "where": [
            {
              "name": "$__timeFilter",
              "params": [],
              "type": "macro"
            }
          ]
        }
      ],
      "timeFrom": null,
      "timeShift": null,
      "title": "VM Summary",
      "transform": "table",
      "type": "table-old"
    }
  ],
  "refresh": false,
  "schemaVersion": 25,
  "style": "dark",
  "tags": [],
  "templating": {
    "list": [
      {
        "hide": 0,
        "includeAll": false,
        "label": null,
        "multi": false,
        "name": "DB",
        "options": [],
        "query": "postgres",
        "refresh": 1,
        "regex": "",
        "skipUrlSync": false,
        "type": "datasource"
      },
      {
        "allValue": "'0'",
        "datasource": "$DB",
        "definition": "select name as __text, oid as __value from entity where ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen) and entity.type = 'STORAGE' group by name, oid order by 1",
        "hide": 0,
        "includeAll": true,
        "label": null,
        "multi": true,
        "name": "Datastore",
        "options": [],
        "query": "select name as __text, oid as __value from entity where ($__timeFrom(),$__timeTo()) OVERLAPS (first_seen, last_seen) and entity.type = 'STORAGE' group by name, oid order by 1",
        "refresh": 2,
        "regex": "",
        "skipUrlSync": false,
        "sort": 0,
        "tagValuesQuery": "",
        "tags": [],
        "tagsQuery": "",
        "type": "query",
        "useTags": false
      }
    ]
  },
  "timepicker": {
    "refresh_intervals": [
      "10s",
      "30s",
      "1m",
      "5m",
      "15m",
      "30m",
      "1h",
      "2h",
      "1d"
    ]
  },
  "timezone": "",
  "title": "Datastore Summary",
  "uid": "datastore_summary"
}