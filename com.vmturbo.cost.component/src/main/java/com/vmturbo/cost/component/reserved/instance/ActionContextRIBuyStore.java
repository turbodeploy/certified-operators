package com.vmturbo.cost.component.reserved.instance;import static com.vmturbo.cost.component.db.Tables.ACTION_CONTEXT_RI_BUY;import java.time.LocalDateTime;import java.util.ArrayList;import java.util.Arrays;import java.util.Calendar;import java.util.Collections;import java.util.List;import java.util.Map.Entry;import java.util.Objects;import javax.annotation.Nonnull;import org.apache.logging.log4j.LogManager;import org.apache.logging.log4j.Logger;import org.jooq.DSLContext;import com.vmturbo.common.protobuf.topology.TopologyDTO.TopologyEntityDTO;import com.vmturbo.common.protobuf.topology.TopologyDTO.TypeSpecificInfo.ComputeTierInfo;import com.vmturbo.cost.component.db.tables.records.ActionContextRiBuyRecord;import com.vmturbo.cost.component.reserved.instance.recommendationalgorithm.ReservedInstanceAnalysisRecommendation;/** * The function of this class is to perform database operation on the cost.action_context_ri_buy table. */public class ActionContextRIBuyStore {    private final static Logger logger = LogManager.getLogger();    private static final int NUM_HOURS_IN_A_DAY = 24;    private static final int NUM_DAYS_IN_A_WEEK = 7;    private static final int NUM_HOURS_IN_A_WEEK = NUM_HOURS_IN_A_DAY * NUM_DAYS_IN_A_WEEK;    private final DSLContext dsl;    public ActionContextRIBuyStore(@Nonnull final DSLContext dsl) {        this.dsl = Objects.requireNonNull(dsl);    }    /**     * Performs the insert.     * @param recommendations The RI buy recommendations.     */    public void insertIntoActionContextRIBuy(@Nonnull final List<ReservedInstanceAnalysisRecommendation> recommendations,                                             final long topologyContextId) {        List<ActionContextRiBuyRecord> actionContextRiBuyRecords = createActionContextRIBuys(recommendations, topologyContextId);        dsl.batchInsert(actionContextRiBuyRecords).execute();    }    /**     * Creates a list of ActionContextRiBuyRecord records.     * @param recommendations     */    public List<ActionContextRiBuyRecord> createActionContextRIBuys(final List<ReservedInstanceAnalysisRecommendation> recommendations,                                                                    long topologyContextId) {        final List<ActionContextRiBuyRecord> actionContextRiBuyRecords = new ArrayList<>();        for (ReservedInstanceAnalysisRecommendation recommendation : recommendations) {            LocalDateTime now = LocalDateTime.now();            Calendar cal = Calendar.getInstance();            int actionHour = ((cal.get(Calendar.DAY_OF_WEEK) - 1) * NUM_HOURS_IN_A_DAY)                    + cal.get(Calendar.HOUR_OF_DAY);            for (Entry <TopologyEntityDTO, Float[]> e : recommendation.getTemplateTypeHourlyDemand().entrySet()) {                Float[] weeklyDemand = e.getValue();                TopologyEntityDTO topologyEntityDTO = e.getKey();                final ActionContextRiBuyRecord actionContextRiBuyRecord = dsl.newRecord(ACTION_CONTEXT_RI_BUY);                actionContextRiBuyRecord.setActionId(recommendation.getBuyRiId());                actionContextRiBuyRecord.setPlanId(topologyContextId);                actionContextRiBuyRecord.setCreateTime(now);                actionContextRiBuyRecord.setTemplateType(topologyEntityDTO.getDisplayName());                actionContextRiBuyRecord.setTemplateFamily(topologyEntityDTO.getTypeSpecificInfo()                        .getComputeTier().getFamily());                // Rotates the weekly demand to align with the recommended time.                Collections.rotate(Arrays.asList(weeklyDemand), NUM_HOURS_IN_A_WEEK - actionHour);                final String demand = Arrays.toString(weeklyDemand)                        .substring(1, Arrays.toString(weeklyDemand).length() - 1);                actionContextRiBuyRecord.setData(demand);                actionContextRiBuyRecords.add(actionContextRiBuyRecord);            }        }        return actionContextRiBuyRecords;    }}