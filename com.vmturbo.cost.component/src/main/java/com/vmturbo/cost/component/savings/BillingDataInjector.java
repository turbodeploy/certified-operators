package com.vmturbo.cost.component.savings;

import java.util.concurrent.atomic.AtomicBoolean;

import javax.annotation.Nonnull;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.vmturbo.cost.component.savings.DataInjectionMonitor.ScriptEvent;

/**
 * Translator for injected test data script events.
 */
public class BillingDataInjector implements ScenarioDataInjector {
    /**
     * Logger.
     */
    private static final Logger logger = LogManager.getLogger();

    /**
     * Event format passed between the data generator and the event injector.
     */
    public static class BillingScriptEvent extends ScriptEvent {
        boolean purgeState;

        /**
         * Return string representation of event.
         *
         * @return string representation of event
         */
        @Override
        public String toString() {
            return String.format("%s@%d", eventType, timestamp);
        }
    }

    /**
     * Get the script event class.
     *
     * @return the script event class
     */
    @Override
    public Class getScriptEventClass() {
        return BillingScriptEvent[].class;
    }

    /**
     * Convert a script event to a SavingsEvent and add it to the journal.
     *
     * @param scriptEvent event generated by the script
     * @param uuid resolved UUID of target of event
     * @param purgePreviousTestState true if the stats and entity for the entities in the UUID list
     */
    @Override
    public void handleScriptEvent(@Nonnull ScriptEvent scriptEvent, @Nonnull Long uuid,
            @Nonnull AtomicBoolean purgePreviousTestState) {
        BillingScriptEvent event = (BillingScriptEvent)scriptEvent;
        logger.debug("Adding event: " + event);
        /*
         * NOTE: There are currently no events defined for the billing based data injector, so this
         * is currently a stub.
         */
        if ("NOP".equals(event.eventType)) {
            // No-op - do nothing.
        } else if ("STOP".equals(event.eventType)) {
            purgePreviousTestState.set(event.purgeState);
            return;
        } else {
            logger.error("Invalid injected event type '{}' - ignoring", event.eventType);
            return;
        }
    }
}
