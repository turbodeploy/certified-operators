package com.vmturbo.cost.component.savings.bottomup;

import java.util.Map;
import java.util.concurrent.atomic.AtomicBoolean;

import javax.annotation.Nonnull;

import org.apache.commons.lang3.StringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.vmturbo.common.protobuf.action.ActionDTO.ActionCategory;
import com.vmturbo.common.protobuf.action.ActionDTO.ActionType;
import com.vmturbo.cost.component.savings.DataInjectionMonitor;
import com.vmturbo.cost.component.savings.ScenarioDataInjector;
import com.vmturbo.cost.component.savings.bottomup.TopologyEvent.EventType;
import com.vmturbo.cost.component.savings.tem.ProviderInfo;
import com.vmturbo.cost.component.savings.tem.VirtualMachineProviderInfo;
import com.vmturbo.cost.component.savings.tem.VolumeProviderInfo;
import com.vmturbo.platform.common.dto.CommonDTOREST.EntityDTO.EntityType;

/**
 * Translator for injected test data script events.
 */
public class EventInjector implements ScenarioDataInjector {
    /**
     * Logger.
     */
    private static final Logger logger = LogManager.getLogger();
    private final EntityEventsJournal entityEventsJournal;

    /**
     * Action lifetimes.
     */
    private final EntitySavingsRetentionConfig entitySavingsRetentionConfig;

    /**
     * Get the script event class.
     *
     * @return the script event class
     */
    @Override
    public Class getScriptEventClass() {
        return ScriptEvent[].class;
    }

    /**
     * Event format passed between the data generator and the event injector.
     */
    public static class ScriptEvent extends DataInjectionMonitor.ScriptEvent {
        long expirationTimestamp;
        boolean state;
        double destTier;
        double sourceTier;
        boolean purgeState;
        Map<Integer, Double> commodityUsage;

        /**
         * Return string representation of event.
         *
         * @return string representation of event
         */
        @Override
        public String toString() {
            return String.format("%s@%d", eventType, timestamp);
        }
    }

    /**
     * Constructor.
     * @param entityEventsJournal events journal to populate.
     * @param entitySavingsRetentionConfig savings action retention configuration.
     */
    public EventInjector(EntityEventsJournal entityEventsJournal,
            @Nonnull final EntitySavingsRetentionConfig entitySavingsRetentionConfig) {
        this.entityEventsJournal = entityEventsJournal;
        this.entitySavingsRetentionConfig = entitySavingsRetentionConfig;
    }


    /**
     * Convert a script event to a SavingsEvent and add it to the journal.
     *
     * @param scriptEvent event generated by the script
     * @param uuid resolved UUID of target of event
     * @param purgePreviousTestState true if the stats and entity for the entities in the UUID list
     */
     public void handleScriptEvent(@Nonnull DataInjectionMonitor.ScriptEvent scriptEvent, @Nonnull Long uuid,
             @Nonnull AtomicBoolean purgePreviousTestState) {
         ScriptEvent event = (ScriptEvent)scriptEvent;
        logger.debug("Adding event: " + event);
        SavingsEvent.Builder result = new SavingsEvent.Builder()
                .entityId(uuid)
                .timestamp(event.timestamp)
                .expirationTime(event.expirationTimestamp);
         if ("RECOMMENDATION_ADDED".equals(event.eventType)) {
            EntityPriceChange entityPriceChange =  new EntityPriceChange.Builder()
                    .sourceCost(event.sourceTier)
                    .destinationCost(event.destTier)
                    .sourceOid((long)event.sourceTier)
                    .destinationOid((long)event.destTier)
                    .build();
            ActionEvent actionEvent = new ActionEvent.Builder()
                    .actionId(uuid)
                    .eventType(ActionEvent.ActionEventType.RECOMMENDATION_ADDED)
                    .description(StringUtils.EMPTY)
                    .entityType(EntityType.VIRTUAL_MACHINE.getValue())
                    .actionType(ActionType.SCALE_VALUE)
                    .actionCategory(ActionCategory.EFFICIENCY_IMPROVEMENT_VALUE)
                    .build();
            result.actionEvent(actionEvent).entityPriceChange(entityPriceChange);
        } else if ("RECOMMENDATION_REMOVED".equals(event.eventType)) {
            EntityPriceChange dummyPriceChange =  new EntityPriceChange.Builder()
                    .sourceCost(0d).destinationCost(0d)
                    .sourceOid(0L)
                    .destinationOid(0L)
                    .build();
            ActionEvent actionEvent = new ActionEvent.Builder()
                    .actionId(uuid)
                    .eventType(ActionEvent.ActionEventType.RECOMMENDATION_REMOVED)
                    .description(StringUtils.EMPTY)
                    .entityType(EntityType.VIRTUAL_MACHINE.getValue())
                    .actionType(ActionType.SCALE_VALUE)
                    .actionCategory(ActionCategory.EFFICIENCY_IMPROVEMENT_VALUE)
                    .build();
            result.actionEvent(actionEvent).entityPriceChange(dummyPriceChange);
         } else if ("POWER_STATE".equals(event.eventType)) {
             result.topologyEvent(createTopologyEvent(uuid, EventType.STATE_CHANGE, event.timestamp)
                     .poweredOn(event.state)
                     .build());
        } else if ("RESIZE_EXECUTED".equals(event.eventType)) {
            EntityPriceChange entityPriceChange =  new EntityPriceChange.Builder()
                    .sourceCost(event.sourceTier)
                    .destinationCost(event.destTier)
                    .sourceOid((long)event.sourceTier)
                    .destinationOid((long)event.destTier)
                    .build();
            ActionEvent actionEvent = new ActionEvent.Builder()
                    .actionId(uuid)
                    .eventType(ActionEvent.ActionEventType.SCALE_EXECUTION_SUCCESS)
                    .description(StringUtils.EMPTY)
                    .entityType(EntityType.VIRTUAL_MACHINE.getValue())
                    .actionType(ActionType.SCALE_VALUE)
                    .actionCategory(ActionCategory.EFFICIENCY_IMPROVEMENT_VALUE)
                    .build();
            result.actionEvent(actionEvent).entityPriceChange(entityPriceChange);
        } else if ("DELETE_EXECUTED".equals(event.eventType)) {
            EntityPriceChange entityPriceChange =  new EntityPriceChange.Builder()
                    .sourceCost(event.sourceTier)
                    .destinationCost(0d)
                    .sourceOid((long)event.sourceTier)
                    .destinationOid((long)event.destTier)
                    .build();
            ActionEvent actionEvent = new ActionEvent.Builder()
                    .actionId(uuid)
                    .eventType(ActionEvent.ActionEventType.DELETE_EXECUTION_SUCCESS)
                    .description(StringUtils.EMPTY)
                    .entityType(EntityType.VIRTUAL_MACHINE.getValue())
                    .actionType(ActionType.SCALE_VALUE)
                    .actionCategory(ActionCategory.EFFICIENCY_IMPROVEMENT_VALUE)
                    .build();
            result.actionEvent(actionEvent).entityPriceChange(entityPriceChange);
        } else if ("ENTITY_REMOVED".equals(event.eventType)) {
            result.topologyEvent(createTopologyEvent(uuid, EventType.ENTITY_REMOVED, event.timestamp)
                    .entityRemoved(true)
                    .build());
        } else if ("PROVIDER_CHANGE".equals(event.eventType)) {
             ProviderInfo providerInfo = new VirtualMachineProviderInfo((long)event.destTier);
             result.topologyEvent(createTopologyEvent(uuid, EventType.PROVIDER_CHANGE, event.timestamp)
                    .providerOid((long)event.destTier)
                    .providerInfo(providerInfo)
                    .build());
        } else if ("COMMODITY_CHANGE".equals(event.eventType)) {
             // TODO How do I know the entity type?
             ProviderInfo providerInfo = new VolumeProviderInfo((long)event.destTier, event.commodityUsage);
             result.topologyEvent(createTopologyEvent(uuid, EventType.PROVIDER_CHANGE, event.timestamp)
                    .providerInfo(providerInfo)
                    .build());
        } else if ("STOP".equals(event.eventType)) {
            purgePreviousTestState.set(event.purgeState);
            return;
        } else {
            logger.error("Invalid injected event type '{}' - ignoring", event.eventType);
            return;
        }
        entityEventsJournal.addEvent(result.build());
    }

    private static TopologyEvent.Builder createTopologyEvent(long entityOid, EventType eventType, long timestamp) {
        return new TopologyEvent.Builder()
                .entityOid(entityOid)
                .entityType(EntityType.VIRTUAL_MACHINE.getValue())
                .eventType(eventType.getValue())
                .timestamp(timestamp);
    }
}
