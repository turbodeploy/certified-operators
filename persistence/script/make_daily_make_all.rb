require 'active_support'

# # #
# purge reports older than the retetion period from the file system

begin
  n_months_attr = EntityAttr.find_by_name('numRetainedMonths')
  retention = n_months_attr ? n_months_attr.value.to_i : 24

  earliest_date = (Date.today.months_ago(retention)).to_s
  
  Dir.new("#{ENV['VMT_REPORTS_HOME']}/pdf_files").each { |date_str|
    path = "#{ENV['VMT_REPORTS_HOME']}/pdf_files/#{date_str}"
    next unless File.directory?(path)
    if date_str =~ /^\d\d\d\d-\d\d-\d\d$/ && date_str < earliest_date then
      system("rm -r #{path}")
      puts("# removed retention expired #{path}")
    end
  }
  puts

rescue
  # ensure we continue

end


# # #
# output the reports to create given licesning and selection

puts
puts "# this script is generated by make_daily_make_all.rb"

do_host_reports     = StandardReport.host_feature_enabled?
do_storage_reports  = StandardReport.storage_feature_enabled?
do_planner_reports  = StandardReport.planner_feature_enabled?

# # #

if do_host_reports || do_storage_reports || do_planner_reports

  # write the run line for each licensed and enabled report
  reports = StandardReport.find(:all, :order => 'filename')
  
  for report in reports do
    next unless report.user_selected?
    next unless report.run_today?

    if (report.is_a_storage_report? && do_storage_reports) ||
       (report.is_a_host_report?    && do_host_reports) ||
       (report.is_a_planner_report? && do_planner_reports) then

      puts
      puts "echo `date +\"%Y/%m/%d-%H:%M\"` -- #{report.filename.to_s}"
      puts "$VMT_REPORTS_HOME/bin/make_pdf.sh #{report.filename.to_s}"

    end
  end
  puts "echo Finished generating reports! `date`"
else
  puts "echo No reports currently enabled by licensing"

end
