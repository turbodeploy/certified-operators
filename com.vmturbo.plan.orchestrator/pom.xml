<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.vmturbo</groupId>
        <artifactId>com.vmturbo.components</artifactId>
        <version>8.4.4-SNAPSHOT</version>
        <relativePath>../com.vmturbo.components/pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>com.vmturbo.plan.orchestrator</artifactId>

    <properties>
        <swagger.component.name>Plan Orchestrator</swagger.component.name>
        <maven.build.timestamp.format>yyyyMMddHHmmssSSS</maven.build.timestamp.format>

        <!-- TODO: user and password configuration should NOT be checked into source control -->
        <db.url>jdbc:mysql://localhost:3306</db.url>
        <db.username>root</db.username>
        <db.password>vmturbo</db.password>
        <db.schema>plan_build_${maven.build.timestamp}</db.schema>
        <db.outputSchema>plan</db.outputSchema>
        <db.driver>org.mariadb.jdbc.Driver</db.driver>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>com.vmturbo.plan.orchestrator.PlanOrchestratorComponent</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                  <serverId>docker-registry</serverId>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>migrate</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>migrate</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>clean-db</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <url>${db.url}</url>
                    <user>${db.username}</user>
                    <password>${db.password}</password>
                    <locations>
                        <!-- Configure to the same location as configured in Spring Boot..-->
                        <location>filesystem:${basedir}/src/main/resources/db/migration</location>
                    </locations>
                    <schemas>
                        <schema>${db.schema}</schema>
                    </schemas>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.github.kongchen</groupId>
                <artifactId>swagger-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>internal-swagger</id>
                        <configuration>

                            <apiSources>
                                <apiSource>
                                    <locations>
                                        <location>com.vmturbo.common.protobuf.logging</location>
                                        <location>com.vmturbo.common.protobuf.plan</location>
                                        <location>com.vmturbo.plan.orchestrator</location>
                                        <location>com.vmturbo.components.common</location>
                                    </locations>
                                </apiSource>
                            </apiSources>

                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- See comment from michael-simons at https://github.com/spring-projects/spring-boot/issues/6975
                 on recommended configuration for a Spring Boot + Flyway + jOOQ setup-->
            <plugin>
                <!-- Specify the maven code generator plugin -->
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>

                <!-- The plugin should hook into the generate goal -->
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>

                    <!-- JDBC connection parameters -->
                    <jdbc>
                        <driver>${db.driver}</driver>
                        <url>${db.url}/${db.schema}</url>
                        <user>${db.username}</user>
                        <password>${db.password}</password>
                    </jdbc>

                    <!-- Generator parameters -->
                    <generator>
                        <database>
                            <name>org.jooq.meta.mysql.MySQLDatabase</name>
                            <!-- Retrieve schema version from Flyway info table -->
                            <schemaVersionProvider>SELECT CONCAT_WS('_', '${db.outputSchema}', MAX(version)) from schema_version</schemaVersionProvider>
                            <includes>.*</includes>
                            <excludes>schema_version</excludes>
                            <schemata>
                                <schema>
                                    <inputSchema>${db.schema}</inputSchema>
                                    <outputSchema>${db.outputSchema}</outputSchema>
                                </schema>
                            </schemata>
                            <!-- Automatically convert timestamps to LocalDateTime using custom data bindings (see http://www.jooq.org/doc/3.6/manual/code-generation/custom-data-type-bindings/) -->
                            <customTypes>
                                <customType>
                                    <!-- Specify the fully-qualified class name of your custom type -->
                                    <name>java.time.LocalDateTime</name>
                                    <!-- Associate that custom type with your converter. Note, a
                                         custom type can only have one converter in jOOQ -->
                                    <converter>com.vmturbo.sql.utils.LocalDateTimeConverter</converter>
                                </customType>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.plan.ScenarioOuterClass.ScenarioInfo</name>
                                    <converter>com.vmturbo.plan.orchestrator.scenario.ScenarioInfoConverter</converter>
                                </customType>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.plan.PlanExportDTO.PlanDestination</name>
                                    <converter>com.vmturbo.plan.orchestrator.plan.export.PlanDestinationConverter</converter>
                                </customType>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.plan.PlanProjectOuterClass.PlanProjectInfo</name>
                                    <converter>com.vmturbo.plan.orchestrator.project.PlanProjectInfoConverter</converter>
                                </customType>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.plan.PlanDTO.PlanInstance</name>
                                    <converter>com.vmturbo.plan.orchestrator.plan.PlanInstanceConverter</converter>
                                </customType>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.plan.TemplateDTO.TemplateInfo</name>
                                    <converter>com.vmturbo.plan.orchestrator.templates.TemplateInfoConverter</converter>
                                </customType>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.plan.DeploymentProfileDTO.DeploymentProfileInfo</name>
                                    <converter>com.vmturbo.plan.orchestrator.deployment.profile.DeploymentProfileInfoConverter</converter>
                                </customType>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.plan.ReservationDTO.ConstraintInfoCollection</name>
                                    <converter>com.vmturbo.plan.orchestrator.reservation.ConstraintInfoCollectionConverter</converter>
                                </customType>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.plan.ReservationDTO.ReservationTemplateCollection</name>
                                    <converter>com.vmturbo.plan.orchestrator.reservation.ReservationTemplateCollectionConverter</converter>
                                </customType>
                            </customTypes>

                            <!-- Then, associate custom types with database columns -->
                            <forcedTypes>
                                <!-- Automatically convert timestamp fields to Java LocalDateTime-->
                                <forcedType>
                                    <!-- Specify again he fully-qualified class name of your custom type -->
                                    <name>java.time.LocalDateTime</name>
                                    <!-- Add a list of comma-separated regular expressions matching columns -->
                                    <expression>.*\..*_time</expression>
                                </forcedType>
                                <!-- Automatically deserialize the changes blob to a ScenarioInfo-->
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.plan.ScenarioOuterClass.ScenarioInfo</name>
                                    <expression>.*\.scenario\.scenario_info</expression>
                                </forcedType>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.plan.PlanDTO.PlanInstance</name>
                                    <expression>.*\.plan_instance\.plan_instance</expression>
                                </forcedType>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.plan.PlanExportDTO.PlanDestination</name>
                                    <expression>.*\.plan_destination\.plan_destination</expression>
                                </forcedType>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.plan.PlanProjectOuterClass.PlanProjectInfo</name>
                                    <expression>.*\.plan_project\.project_info</expression>
                                </forcedType>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.plan.TemplateDTO.TemplateInfo</name>
                                    <expression>.*\.template\.template_info</expression>
                                </forcedType>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.plan.DeploymentProfileDTO.DeploymentProfileInfo</name>
                                    <expression>.*\.deployment_profile\.deployment_profile_info</expression>
                                </forcedType>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.plan.ReservationDTO.ConstraintInfoCollection</name>
                                    <expression>.*\.reservation\.constraint_info_collection</expression>
                                </forcedType>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.plan.ReservationDTO.ReservationTemplateCollection</name>
                                    <expression>.*\.reservation\.reservation_template_collection</expression>
                                </forcedType>
                            </forcedTypes>
                        </database>
                        <generate>
                            <pojos>true</pojos>
                        </generate>
                        <target>
                            <packageName>com.vmturbo.plan.orchestrator.db</packageName>
                            <directory>target/generated-sources/jooq</directory>
                        </target>
                    </generator>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <configuration>
                    <suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <systemPropertyVariables>
                        <dbs.postgresDefault.host>${postgresHost}</dbs.postgresDefault.host>
                        <dbs.postgresDefault.port>${postgresPort}</dbs.postgresDefault.port>
                        <dbs.postgresDefault.userName>${postgresUserName}</dbs.postgresDefault.userName>
                        <dbs.postgresDefault.password>${postgresPassword}</dbs.postgresDefault.password>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <profiles>
        <profile>
            <id>no-run-postgres-container</id>
            <!-- set default for postgres port only if we're not going to spin up a postgres container -->
            <activation>
                <property>
                    <name>postgresContainer.skip</name>
                </property>
            </activation>
            <properties>
                <postgresPort>5432</postgresPort>
            </properties>
        </profile>
        <profile>
            <id>run-postgres-container</id>
            <!--
                If you don't want a postgres container to be spun up during the build in order to
                perform live DB tests, specify -DpostgresContainer.skip` on maven command line. In
                that case you will need to have a postgres server available in your environment,
                and the postgresHost and postgresPort properties can be used to configure access
                if they're different from localhost and 5432, respectively.
            -->
            <activation>
                <property>
                    <name>!postgresContainer.skip</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-postgres</id>
                                <phase>process-test-classes</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                                <configuration>
                                    <dockerHost>${dockerHost}</dockerHost>
                                    <showLogs>false</showLogs>
                                    <images>
                                        <image>
                                            <alias>postgres</alias>
                                            <name>postgres:${postgres-image-tag}</name>
                                            <run>
                                                <!--
                                                pattern needs to start with "maven-" so jenkins builds
                                                will properly clean up leaked containers
                                                -->
                                                <containerNamePattern>maven-%a-%t-%i</containerNamePattern>
                                                <ports>
                                                    <port>postgresPort:5432</port>
                                                </ports>
                                                <env>
                                                    <POSTGRES_USER>${postgresUserName}</POSTGRES_USER>
                                                    <POSTGRES_PASSWORD>${postgresPassword}</POSTGRES_PASSWORD>
                                                </env>
                                                <wait>
                                                    <log>
                                                        <!--
                                                        CDATA prevents intellij from wrapping the search
                                                        string, which would break things.
                                                        We wait for a message that shows that timescale
                                                        is ready, and we wait to see it twice, since the
                                                        container's entry-point script includes an internal
                                                        restart.
                                                        -->
                                                        <![CDATA[(?s)database system is ready to accept connections.*database system is ready to accept connections]]>
                                                    </log>
                                                    <time>120000</time>
                                                </wait>
                                            </run>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-postgres</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                                <configuration>
                                    <dockerHost>${dockerHost}</dockerHost>
                                    <images>
                                        <image>
                                            <name>postgres:${postgres-image-tag}</name>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>

    <dependencies>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.plan.orchestrator.api</artifactId>
            <version>${project.version}</version>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>history-component-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>action-orchestrator-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.repository.api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>cost-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>topology-processor-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>market-component-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.group.api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-websocket</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>components-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.turbonomic</groupId>
            <artifactId>com.turbonomic.cpucapacity</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>sql-utils</artifactId>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-core</artifactId>
            <scope>test</scope>
        </dependency>
        <!-- Common test utilities. -->
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>sql-test-utils</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>components-api-test</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>joda-time</groupId>
            <artifactId>joda-time</artifactId>
            <version>2.9.9</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-all</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.2.2</version>
            <scope>test</scope>
        </dependency>
    </dependencies>

</project>
