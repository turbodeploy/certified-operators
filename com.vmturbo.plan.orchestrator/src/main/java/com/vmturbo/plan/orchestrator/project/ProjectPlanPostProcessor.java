package com.vmturbo.plan.orchestrator.project;

import java.util.function.Consumer;

import javax.annotation.Nonnull;

import com.vmturbo.common.protobuf.plan.PlanDTO.PlanInstance;
import com.vmturbo.plan.orchestrator.plan.PlanStatusListener;

/**
 * A {@link ProjectPlanPostProcessor} is, essentially, a handler for updates to a single plan
 * that runs as part of a plan project.
 *
 * The flow is:
 *    - {@link com.vmturbo.plan.orchestrator.scheduled.PlanProjectScheduler} executes a plan project.
 *    - For each plan created by the plan project execution:
 *        - Create an instance of a {@link ProjectPlanPostProcessor}, and register it with
 *          {@link ProjectPlanPostProcessorRegistry}.
 *        - Run the plan.
 *          Whenever the plan completes, the {@link ProjectPlanPostProcessor} will handle the
 *          extraction of data into whatever format is required.
 */
public interface ProjectPlanPostProcessor extends PlanStatusListener {

    /**
     * @return The plan ID associated with this post processor. Each plan generated by a
     *         plan project has a separate post-processor.
     */
    long getPlanId();

    /**
     * Register a handler that will be called when the post-processing for this plan is
     * complete.
     *
     * @param handler The handler, which will consume this {@link ProjectPlanPostProcessor}.
     */
    void registerOnCompleteHandler(@Nonnull final Consumer<ProjectPlanPostProcessor> handler);
}
