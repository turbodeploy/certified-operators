# This represents a "factory-configured" list of the VmtComponent types we know of a-priori. This property is used
#      to initialize the Consul key/value store. Going forward, new VmtComponent types may be added via the API.
action-orchestrator:
  marketHost: 'market'
  <<: &topologyProcessorClient
    topologyProcessorHost: 'topology-processor'
    topologyProcessorPort: 8080
  groupHost: 'group'
  <<: &db_conn_info
    dbHost: 'db'
    dbPort: 3306
    dbUsername: 'root'
    sqlDialect: 'MARIADB'
  dbSchemaName: 'action'
  <<: &auth_conn_info
    authHost: 'auth'
    authPort: 8080
    authRetryDelaySecs: 10
  grpcPingIntervalSeconds: 300
  actionPaginationDefaultLimit: 100
  actionPaginationMaxLimit: 500
  mariadbHealthCheckIntervalSeconds: 60
  <<: &repository_conn_info
    repositoryHost: 'repository'
    repositoryPort: 8080
  entityTypeRetryIntervalMillis: 1000
  entityTypeMaxRetries: 6
  maxLiveActionPlanAgeSeconds: 600
  identityGeneratorPrefix: 9
  <<: &baseVmtComponentSettings
    consul_host: consul
    consul_port: 8500
    server_port: 8080
    server.grpcPort: 9001
    deadlockCheckIntervalSecs: 900
    maxHealthyUsedMemoryRatio: 0.95
    scheduledMetricsIntervalMs: 60000
    kvStoreRetryIntervalMillis: 1000
  #temp fix to resolve conflict between action.orchestrator.api project and
  #    action.orchestrator.api package in AO
  actionOrchestratorHost: 'action-orchestrator'


market:
  <<: *baseVmtComponentSettings
  <<: *topologyProcessorClient
  grpcPingIntervalSeconds: 300
  realtimeTopologyContextId: 777777
  identityGeneratorPrefix: 2
  groupHost: 'group'
  costHost: 'cost'
  # The maximum number of placement iterations the market should perform. Use to prevent ping-ponging VMs from
  # making analysis take too long. If this number is <= 0, uses the default set in the market analysis codebase.
  maxPlacementIterations: -1
  # If entity utilization is below the lower watermark, Market could generate resize down actions.
  rightsizeLowerWatermark: 0.7
  # If entity utilization is above the upper watermark, Market could generate resize up actions.
  rightsizeUpperWatermark: 0.7
  # Quote Factor to be used by alleviate pressure plans.
  alleviatePressureQuoteFactor: 0.2
  # Suspension throttling configuration
  suspensionThrottlingPerCluster: true

topology-processor:
  <<: *baseVmtComponentSettings
  # database-related properties.
  <<: *db_conn_info
  # This should be in sync with the schema in the Topology Processor's pom.xml
  dbSchemaName: 'topology_processor'
  sqlDialect: 'MARIADB'
  mariadbHealthCheckIntervalSeconds: 60
  activateOrMoveInProgressRecordExpiredSeconds: 3600
  moveSucceedRecordExpiredSeconds: 1800
  activateSucceedRecordExpiredSeconds: 14400
  # END - database-related properties

  # authentication-related properties
  <<: *auth_conn_info

  # cloud probe discovery involves downloading some large files, so we are setting the discovery
  # timeout to 120 seconds, instead of using the default of 30 seconds.
  # several keep-alive messages are sent by the client during this interval to keep the connection
  # open.
  discoveryTimeoutSeconds: 120
  validationTimeoutSeconds: 30
  topologyBroadcastIntervalMinutes: 10
  minimumAccountExpensesUploadIntervalMins: 60
  minimumRIDataUploadIntervalMins: 5
  actionTimeoutSeconds: 30
  groupHost: 'group'
  actionOrchestratorHost: 'action-orchestrator'
  historyHost: 'history'
  planOrchestratorHost: 'plan-orchestrator'
  costHost: 'cost'
  <<: *repository_conn_info
  grpcPingIntervalSeconds: 300
  identityGeneratorPrefix: 1
  # Urgent metrics are collected every 10 minutes, the offline every 3 days
  collectionIntervalUrgentSec: 600
  collectionIntervalOfflineSec: 259200
  anonymized: 'true'
  bridgeHost: 'clustermgr'
  bridgePort: 8120
  discoveredGroupUploadIntervalSeconds: 10
  # The interval at which to attempt to reload assigned IDs
  # after topology processor startup.
  assignedIdReloadReattemptIntervalSeconds: 10
  # This configuration value controls how often the commodity max values are
  # loaded from history component.
  maxValuesBackgroundLoadFrequencyMinutes: 180 # 3 hours
  # This configuration value controls the initial delay before triggering
  # the background load task when the initial load during startup fails.
  # For subsequent fetches from the DB or when the initial load succeeds,
  # the delay will be based on the maxValuesBackgroundLoadFrequencyMinutes
  # config value.
  maxValuesBackgroundLoadDelayOnInitFailureMinutes : 30
  # IOPS capacities for each type of disk in Storage Controller, Logical Pool,
  # and Disk Array entities.
  diskIopsCapacitySsd: 5000
  diskIopsCapacity7200Rpm: 800
  diskIopsCapacity10kRpm: 1200
  diskIopsCapacity15kRpm: 1600
  diskIopsCapacityVseriesLun: 5000
  # Factors by which to multiply IOPS Capacity if disk has certain properties
  hybridDiskIopsFactor: 1.5
  flashAvailableDiskIopsFactor: 1.3
  # The interval hours that how long the new discovered entities can not be generated
  # resize down actions by Market.
  resizeDownWarmUpIntervalHours: 4
  # Default timeout for async requests to topology processor.
  asyncRestRequestTimeoutSeconds: 300
  # Whether or not to periodically collect changes for random entities during stitching
  # in the stitching journal. Use the journal-related parameters below to tune
  # how much information is collected.
  #
  # Even if this parameter is turned to false the journal can be manually collected
  # using the /topology-processor/stitchingJournal REST endpoint.
  stitchingJournalEnabled: true
  # Control parameters for tuning how frequently and how many entities we trace
  # through the stitching journal. Tracking more changes in the journal introduces
  # a greater performance hit but also provides greater debugging information.
  # journalMaxChangesetsPerOperation controls the maximum number of changes to
  # be entered in the journal for a single operation.
  journalMaxChangesetsPerOperation: 100
  # The number of entities that should be chronicled in the journal when we create
  # a non-empty stitching journal. Setting to 0 produces a journal that tracks
  # no changes.
  journalNumEntitiesToRecord: 8
  # In production, in order to ensure the stitching journal has minimal performance impact
  # we usually create an empty journal that does not trace any changes. However, once
  # in every journalsPerRecording, we create a non-empty journal that does trace changes
  # according to the configurations above. So, for example, if journalsPerRecording is 6
  # we will trace stitching changes in one of every 6 broadcasts.
  #
  # To manually trigger the stitching journal at run-time using configurations you
  # can specify (permits custom journal filters and options), use the
  # /topology-processor/stitchingJournal REST endpoint.
  journalsPerRecording: 6
  # Time, in hours that a cpu_model -> scale_factor mapping is cached.
  scaleFactorCacheTimeoutHr: 8

repository:
  <<: *baseVmtComponentSettings
  <<: *topologyProcessorClient
  actionOrchestratorHost: 'action-orchestrator'
  grpcPingIntervalSeconds: 300
  arangodbHealthCheckIntervalSeconds: 60
  realtimeTopologyContextId: 777777
  repositorySearchPaginationDefaultLimit: 100
  repositorySearchPaginationMaxLimit: 500
  <<: *auth_conn_info
  repositoryEntityStatsPaginationDefaultLimit: 100
  repositoryEntityStatsPaginationMaxLimit: 300
  # Note - OM-36437 - The price index sorting doesn't actually work right now,
  # but there is no other good universally applicable default commodity.
  repositoryEntityStatsPaginationDefaultSortCommodity: 'priceIndex'


group:
  <<: *baseVmtComponentSettings
  <<: *repository_conn_info
  # TODO: Remove from source control and instead get these values from the auth component.
  mariadbHealthCheckIntervalSeconds: 60
  grpcPingIntervalSeconds: 300
  identityGeneratorPrefix: 4
  createDefaultSettingPolicyRetryIntervalSec: 30
  tempGroupExpirationTimeMins: 10
  realtimeTopologyContextId: 777777

  # START - database-related properties.
  <<: *db_conn_info
  # This should be in sync with the schema in the component's pom.xml
  # Because 'group' is a keyword in SQL, name the schema 'group_component'
  dbSchemaName: 'group_component'
  sqlDialect: 'MARIADB'
  mariadbHealthCheckIntervalSeconds: 60
  # END - database-related properties
  <<: *auth_conn_info
  actionOrchestratorHost: 'action-orchestrator'

api:
  <<: *baseVmtComponentSettings
  clusterMgrHost: 'clustermgr'
  <<: *topologyProcessorClient
  actionOrchestratorHost: 'action-orchestrator'
  <<: *repository_conn_info
  planOrchestratorHost: 'plan-orchestrator'
  groupHost: 'group'
  historyHost: 'history'
  reportingHost: 'reporting'
  costHost: 'cost'
  identityGeneratorPrefix: 5
  keystoreFile: '/home/turbonomic/data/keystore.p12'
  keystoreType: 'PKCS12'
  keystoreAlias: 'vmt'
  multipartConfigMaxFileSizeKb: 50
  multipartConfigMaxRequestSizeKb: 200
  grpcPingIntervalSeconds: 300
  targetValidationTimeoutSeconds: 120
  targetValidationPollIntervalSeconds: 2
  targetDiscoveryTimeoutSeconds: 120
  targetDiscoveryPollIntervalSeconds: 2
  supplyChainFetcherTimeoutSeconds: 360
  liveStatsRetrievalWindowSeconds: 60
  publicVersionString: 7.9.0
  groupBuildUseCaseFile: 'groupBuilderUsecases.json'
  settingManagersFile: 'settingManagers.json'
  settingStyleFile: 'settingSpecStyle.json'
  initialPlacementTimeoutSeconds: 600
  samlEnabled: false
  externalApiSwaggerUri: "/vmturbo/apidoc/**"
  externalApiFileSystemBase: "file:/swagger/"
  cpuInfoCacheLifetimeHours: 8
  <<: *auth_conn_info

auth:
  <<: *baseVmtComponentSettings
  <<: *db_conn_info
  dbSchemaName: 'auth'
  sqlDialect: 'MARIADB'
  mariadbHealthCheckIntervalSeconds: 60
  grpcPingIntervalSeconds: 300
  identityGeneratorPrefix: 7
  <<: *repository_conn_info

cost:
  <<: *baseVmtComponentSettings
  <<: *topologyProcessorClient
  <<: *repository_conn_info
  groupHost: 'group'
  marketHost: 'market'
  grpcPingIntervalSeconds: 300
  realtimeTopologyContextId: 777777
  persistEntityCostChunkSize: 1000
  numRetainedMinutes: 130
  numRetainedHours: 72
  numRetainedDays: 60
  riCoverageCacheExpireMinutes: 120
  # This first time interval to trigger buy RI analysis.
  initialBuyRIAnalysisIntervalHours: 24
  # The normal interval to trigger buy RI analysis after first time run.
  normalBuyRIAnalysisIntervalHours: 336
  # the cost component will receive some large messages over grpc, so we will increase the max
  # message size beyond the 4mb default.
  server.grpcMaxMessageBytes: 12000000

  # START - database-related properties.
  <<: *db_conn_info
  # This should be in sync with the schema in the component's pom.xml
  dbSchemaName: 'cost'
  mariadbHealthCheckIntervalSeconds: 60
  identityGeneratorPrefix: 9
  # END - database-related properties
  <<: *auth_conn_info

  # CurrentWeight for calculating the weighted_value in
  # instance_type_hourly_by_week table.
  # Value range from [0.0, 1.0]
  preferredCurrentWeight : 0.6
  # Number of records to commit in one batch.
  statsRecordsCommitBatchSize : 5000
  # Number of results to return when fetching lazily.
  statsRecordsQueryBatchSize : 5000

mediation-vcenter:
  <<: *baseVmtComponentSettings
  <<: &commonMediationComponentSettings
    serverAddress: 'ws://topology-processor:8080/remoteMediation'
    silentRetryTime: 0
    connRetryIntervalSeconds: 10
    sslKeystorePassword: ' '
    sslKeystorePath: ' '
    userName: vmtRemoteMediation
    userPassword: vmtRemoteMediation
    grpcPingIntervalSeconds: 300
    websocket.pong.timeout: 30000

mediation-vcenter-browsing:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-hyperv:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-netapp:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-ucs:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-vmax:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-vmm:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-hpe3par:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-pure:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-scaleio:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-hds:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-compellent:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-xtremio:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-vplex:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-rhv:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-openstack:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-ucsdirector:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-aws:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings
  turbonomic.aws.persistent.path: /home/turbonomic/data/

mediation-awsbilling:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings
  turbonomic.aws.persistent.path: /home/turbonomic/data/

mediation-awscost:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings
  turbonomic.aws.persistent.path: /home/turbonomic/data/

mediation-azure:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-oneview:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-vcd:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

mediation-mssql:
  <<: *baseVmtComponentSettings
  <<: *commonMediationComponentSettings

plan-orchestrator:
  <<: *baseVmtComponentSettings
  <<: *db_conn_info
  historyHost: 'history'
  groupHost: 'group'
  grpcPingIntervalSeconds: 300
  # TODO: Remove from source control and instead get these values from the auth component.
  dbSchemaName: 'plan'
  <<: *auth_conn_info
  mariadbHealthCheckIntervalSeconds: 60
  actionOrchestratorHost: 'action-orchestrator'
  <<: *topologyProcessorClient
  <<: *repository_conn_info
  historyHost: 'history'
  # cron spec for running cluster rollup at 1AM daily: second (0-60) ,minute (0-59), hour(0-23),
  #     day of month(1-31), month(1-12), day of week(0-7, 7=sun)
  clusterRollupSchedule: "0 0 1 * * *"
  # Run plan deletion at 2AM everyday
  planDeletionSchedule: "0 0 2 * * *"
  # Config parameter to control the batch size for deleting old plans.
  planDeletionBatchSize: 500
  # Delay before the next batch of old plans is deleted.
  planDeletionDelayBetweenDeletesSeconds: 120
  grpcPingIntervalSeconds: 300
  identityGeneratorPrefix: 3
  templateSpecFile: "defaultTemplateSpec.json"
  defaultTemplatesFile: "defaultTemplates.json"
  # Config parameter to control the time out hours for running plan.
  # If this value is changed, update defaultTimeOutHour value in PlanDaoImplTest#testCleanUpTimeOutedPlans
  planTimeOutHours: 6
  # Time-out for the CPU Info cache; this cache is updated very infrequently.
  cpuInfoCacheLifetimeHours: 8

history:
  <<: *baseVmtComponentSettings
  <<: *topologyProcessorClient
  writeTopologyChunkSize: 1000
  userName: vmtplatform
  requestHost: '%'
  adapter: mysql
  hostName: db
  portNumber: 3306
  databaseName: vmtdb
  readonlyUserName: vmtreader
  readonlyPassword: vmturbo
  queryTimeoutSeconds: 120
  migrationTimeoutSeconds: 600
  # Set the number of retained minutes to 130, because when UI request last two hours stats, it will
  # round the start time of the two hour time frame down to the nearest 10 min.
  numRetainedMinutes: 130
  latestTableTimeWindowMin: 15
  numRetainedHours: 72
  numRetainedDays: 60
  historyPaginationDefaultLimit: 100
  historyPaginationMaxLimit: 500
  historyPaginationDefaultSortCommodity: "priceIndex"
  mariadbHealthCheckIntervalSeconds: 60
  groupHost: 'group'
  # note: excluded commodities are case-insensitive, but in mixed case here for readability
  # and to match exactly the values from discovery
  # list obtained from $legacy/com.vmturbo.components.common/src/main/java/com/vmturbo/components/common/ClassicEnumMapper.java
  # The commodities for which stats are not maintained/tracked in the DB. These are typically access commodities.
  excludedCommodities: ApplicationCommodity CLUSTERCommodity DATACENTERCommodity DATASTORECommodity DRSSEGMENTATIONCommodity DSPMAccessCommodity NETWORKCommodity SEGMENTATIONCommodity STORAGECLUSTERCommodity VAPPAccessCommodity VDCCommodity VMPMAccessCommodity
  <<: *topologyProcessorClient
  grpcPingIntervalSeconds: 300
  <<: *auth_conn_info

reporting:
  <<: *baseVmtComponentSettings
  <<: *db_conn_info
  dbSchemaName: 'vmtdb'
  <<: *auth_conn_info
  identityGeneratorPrefix: 8
  scheduledReportsGenerationTime: 1
  groupHost: 'group'
  grpcPingIntervalSeconds: 300
