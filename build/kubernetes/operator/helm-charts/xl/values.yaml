# Default values for xl.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
#  registry: index.docker.io
#  imagePullSecret: turbocred
#  imageUsername: turbouser
#  imagePassword: turbopassword
  repository: turbonomic
  tag: 8.1.0
#  serviceAccountName: t8c-serviceaccount
#  pullPolicy: IfNotPresent
  customImageNames: true
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}
  # setting these to be more tolerant than the k8s defaults, since we run in some pretty resource
  # constrained environments where the readiness probe failures don't really fix anything. We should
  # adjust these back down when we have a horizontally-scaled environment.
  readinessPeriodSecs: 20
  readinessTimeoutSecs: 10
#  externalIP: 10.233.0.3 # byo k8s DNS
#              10.100.0.10 # eks DNS
#              10.0.0.10 # aks DNS
#              10.23.240.10 # gke DNS
#  externalArangoDBName: xl-arangodb.us-east-1.elb.amazonaws.com
#  externalConsul: xl-consul.ca-central-1.rds.amazonaws.com
#  externalDBName: xl-hackaton.cmachd0izjog.ca-central-1.rds.amazonaws.com
#  externalInfluxDBName: xl-influxdb.us-east-1.elb.amazonaws.com
#  externalKafka: xl-kafka.us-east-1.elb.amazonaws.com
#  externalSyslog: a608c38591a9f11e9ad190efbcf8c7e5-1236730884.us-east-1.elb.amazonaws.com
  elk: false
#  logtostdout: false
#  debug: true
  dev_options: "-agentlib:jdwp=transport=dt_socket,address=0.0.0.0:8000,server=y,suspend=n"
  storageAnnotations: {}
#  storageClassName: default
#  storageSelector: true
#  dbSecretName: foo
  # The above specifies the name of the Kubernetes secret holding the MariaDB credentials
  # - Relevant components are: action-orchestrator, auth, clustermgr, cost, group, history,
  #   plan-orchestrator, repository and topology-processor.
  # - Secret name is customizable for each component (by placing the same var under the
  #   component's section).
  # Secret format in yaml:
  #####################################
  # apiVersion: v1
  #   kind: Secret
  #   metadata:
  #     name: foo
  #   type: Opaque
  #   stringData:
  #     db-creds: |-
  #       username: 'db_user'
  #       password: 'db_password'
  #####################################
  # Notes:
  # - The metadata.name is the "dbSecretName" configured above
  # - The key in the data has to be the fixed word "db-creds", but it is customizable by an env
  #   var in each component as the following where the key is now "auth-creds"; this makes it
  #   possible to pack multiple credentials in the same k8s secret using different keys
  ######################################################################
  # auth:
  #   dbSecretName: foo
  #   env:
  #     ... (a copy of other env vars needed here; omitted for clarity)
  #     - name: secretsYamlPath
  #       value: file:/vault/secrets/auth-creds
  #######################################################################
  securityContext:
    fsGroup: 2000
  certmanager:
    enabled: false
    certissuer: letsencrypt-prod
  ingress:
    # domain: *.turbonomic.com
    secrets:
    ## If you're providing your own certificates, please use this to add the certificates as secrets
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or
    ## -----BEGIN RSA PRIVATE KEY-----
    ##
    ## It is also possible to create and manage the certificates outside of this helm chart
    # - name: nginx-ingressgateway-certs
    #   key:
    #   certificate:

nginxingress:
  enabled: true
openshiftingress:
  enabled: false
istioingress:
  enabled: false
  mtls: true
platform:
  enabled: true
ui:
  enabled: true
control:
  enabled: true
reporting:
  enabled: false
metron:
  enabled: false
kubeturbo:
  enabled: false
prometurbo:
  enabled: false
training:
  enabled: false

loki:
  enabled: false
promtail:
  enabled: false
fluent-bit:
  enabled: false
prometheus:
  enabled: false
prometheus-mysql-exporter:
  enabled: false
grafana:
  # We expect the grafana admin password to be set in the CR file, like:
  # grafana:
  #   adminPassword: somePassword
  grafana.ini:
    users:
      # Disallow explicit user creation.
      allow_sign_up: false
      auto_assign_org_role: Editor
      default_theme: light
    server:
      # This needs to be in sync with the UI, and the NGINX configuration.
      root_url: "https://%(domain)s/reports"
      serve_from_sub_path: true
    auth.proxy:
      enabled: true
    database:
      # SQLite by default, overridable to postgres.
      type: sqlite3

      # The following fields are configured for postgres, and pretty much ignored when the type
      # is SQLite. We also expect the password to use for the grafana user to be set in the CR file.
      # In order for the user to configure the postgres backend for Grafana, we need:
      # grafana:
      #   grafana.ini:
      #     database:
      #       type: postgres
      #       password: somePassword
      host: timescaledb
      name: grafana
      user: grafana_backend
chronograf:
  enabled: false
datacloud:
  enabled: false
datacloud-graph:
  enabled: false
intersight-integration:
  enabled: false
extractor:
  enabled: false
telemetry:
  secret: eyJzZXJ2aWNlQWNjb3VudCI6eyJuYW1lIjoiY29sbGVjdG9yIiwiZW1haWwiOiJjb2xsZWN0b3JAdHVyYm8tdGVsZW1ldHJ5LXByb2Quc2EuZGF0YWNsb3VkLnQ4Yy5pbyJ9LCJzZXJ2aWNlQWNjb3VudEtleSI6eyJpZCI6IjlmZTdmYmVjMzVkMmE4MmI0MTdiNDZjZDQyZWEyNTVhZjMxYTZlNDUiLCJwdWJsaWNLZXkiOiItLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLVxuTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUExRG9EQTkzWWRzMkFxdjBxOWR2blxuM2RPRkprMmphMmxlVTl6Qm9nU3E4UFF5RkEvQUVtcFJXMHN0U3ByYlBFbWdVaEwvSkZERzhSMFdnV1VSNjhIdFxuYjdIYmNJZHNKRGkrMkZsRjEvWWxrb00vS1hkSi9nVDNoYnJnMTU1U2s0MnNpV3VnTE1Nank0KzBzMXBQMHpGTlxuamt6VGl1bDZRZk1GQkxpdUhOeGNKQjFjWE9FWno4dlp0SmxXS3pmcS90QkZjSVkwa0w5UWxEdEJqNkdaYktqcVxuZENIWWxCa2duUURqVFhlbGFteWpDOFhKRmdrTGJzUEVLZEtCdmdneU5hNE14VmprTm9hRHVkUU5QV1d1Ry8yQ1xuc0Nhb0s5ZTBiUjNwRVVFMytuTHlIM3ovSzV0MjY2WmptbkloMExrZW1hQm56SzI2WWpHTHZYc3lBbnJsOVk1blxuM3dJREFRQUJcbi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLVxuIiwicHJpdmF0ZUtleSI6Ii0tLS0tQkVHSU4gUlNBIFBSSVZBVEUgS0VZLS0tLS1cbk1JSUVwQUlCQUFLQ0FRRUExRG9EQTkzWWRzMkFxdjBxOWR2bjNkT0ZKazJqYTJsZVU5ekJvZ1NxOFBReUZBL0FcbkVtcFJXMHN0U3ByYlBFbWdVaEwvSkZERzhSMFdnV1VSNjhIdGI3SGJjSWRzSkRpKzJGbEYxL1lsa29NL0tYZEpcbi9nVDNoYnJnMTU1U2s0MnNpV3VnTE1Nank0KzBzMXBQMHpGTmprelRpdWw2UWZNRkJMaXVITnhjSkIxY1hPRVpcbno4dlp0SmxXS3pmcS90QkZjSVkwa0w5UWxEdEJqNkdaYktqcWRDSFlsQmtnblFEalRYZWxhbXlqQzhYSkZna0xcbmJzUEVLZEtCdmdneU5hNE14VmprTm9hRHVkUU5QV1d1Ry8yQ3NDYW9LOWUwYlIzcEVVRTMrbkx5SDN6L0s1dDJcbjY2WmptbkloMExrZW1hQm56SzI2WWpHTHZYc3lBbnJsOVk1bjN3SURBUUFCQW9JQkFDaG9PemE3UUlHdU12ZGJcbmFKaVRIQnlTTDJIUm1uSFRDQkN6a1hLRnJQNWZvRUZObG1ack03NU1HLzErYW91YUFScGZYNURNaUhSVDgzc0RcbmdWdi8rbk12eS9ZcThwNGE1OHROaEF6UVl1cjRia2c0M0MrdlJtbUI0VmxzWFpDV2d1bFBRcG9ETlllR2Z3TS9cbkNML1BQVk1Bc2E1Yk1kbm9xV1h5dThQbStPd3ZDaU1Uby9CSEp4b3NleGFPQzVrLzV6ZEtTY1RlUWNGcEI3OTNcbkJJK0ErZ3J5eVR4Uld0bVlIcjdYS1Z1QUU2V0tudzZCYVErTy9oSUt3TUZZNDRibWlERU1tQ2gwQnU3ZWYxT1Vcbm50KzIxVDV1dkJzejd4VXZyTzQzMlhzbzFCb0JhSnA2b2FLaGZtbzRlYktTbzFuQjhTMTRMMStmL0YyWE5IQU9cbjFaT0xzcEVDZ1lFQTd4NDF4VkJDY1ZWNlo1L1RWSm83a0JIeUw0TzdRdERRdjk0amdQOHdWY2VmSURzRW4xQkdcbk9oZE5FQmdTS3p3TmpzMkJEb0dMZ1U1cDl2TU14RllDazlyV005UlFUQ3pDS3Nvb2ZHT2hsVGtHMTNtWVRkb2RcbnlvN250RlNRUW1OLzdxbWRwWmN5ZjkwdFVENzkzVVpoRTZFRmxKQmNkbWp6Sk1JZmRlZmJRTTBDZ1lFQTR6WEZcbkU5VkZqWm9DdDMvQjdyL3R4NlUwYnhoc0dVSmFoWFZJVjdySkEyRmRGdnlVMUhQYW5qeDh1Y2tuUEh5Vk53VEhcbkJicUxQR1RPOFRVT3gwbUlId1huWmZpQ1RhWW0rSnNmbWNWZlVFazFyS0ZYY0pBblYvVGF4WnRxZWl1UXI1ZU1cbmtRR3E1SEZYU09rVkNRVlhla0t3WUw3dC9YVklzb3RXaFhicjIxc0NnWUVBMDRZUDN1bnV2TDcydHZBbFMvUGJcbnVNaUhTd3ptL0dZb0kzSm9TZFowZFkxTzhINEV5c0dDUGlVYW9LQUtnb0J2SmVJWXhqSkdyQzRuZ3JMaW1sUFRcbmwrUEFGTDArQXdTZEJxa3FRMDhIUXkvZEk0T0cvV2R6YnhvWFVlaDBiS1lFSjZXWHRVSVpCQTh0NUl5MG1hZUdcbmZJeTJtUU5USjlRVE1uTWV6WGc2OWdrQ2dZRUFuM2huNEdtNkxZN0JCV1lJQ2Jodi9jWTRMUmxwRmJsNnExMExcbjczZE1DckZWa3dLb3V3eXRqbzVKeEdRb3c4MTFOVzZHK2NCYVpZTWp0Q3hYT1F5bEc1RWJQbmpUakFob0plbEtcbm5yVG5Gd1NyUllUZ1NFTUZPampETEJyTyt2eUV5cG1Gc1drSU50cE9Od0JSSVVtOGdqVTRjazdQM3l0b1lOaG5cblc3bUNCUzBDZ1lCQlBtdFBieUtCbDRXWFRMWDRzQjVITUMwaUNyMVNsVXVDV1hiemZzOUQ4WDZpM3c5S0NkMmRcbllSV0VCSmlYb1NiK05tbDFndURvWHQyZmxmMGpJemlEbEwrS2FvNXJKRWIrVndYY1JmaUtWdkZQN3dRT0l1SnFcbkhOb3IwalI4aE5nWWpLR1YwM2dXdE5pc2ZRc2dHYXRRUFQ2YW1HQjFTMEN3cmhLMEtQVEpwZz09XG4tLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLVxuIn19

# Enable mediation
actionscript:
  enabled: false
actionstream-kafka:
  enabled: false
aix:
  enabled: false
acims:
  enabled: false
apic:
  enabled: false
appdynamics:
  enabled: false
appinsights:
  enabled: false
aws:
  enabled: false
baremetal:
  enabled: false
datadog:
  enabled: false
awslambda:
  enabled: false
azure:
  enabled: false
cloudfoundry:
  enabled: false
compellent:
  enabled: false
dynatrace:
  enabled: false
gcp:
  enabled: false
hpe3par:
  enabled: false
hds:
  enabled: false
horizon:
  enabled: false
hyperflex:
  enabled: false
hyperv:
  enabled: false
instana:
  enabled: false
intersight:
  enabled: false
istio:
  enabled: false
mssql:
  enabled: false
mysql:
  enabled: false
oracle:
  enabled: false
tomcat:
  enabled: false
jvm:
  enabled: false
netapp:
  enabled: false
netflow:
  enabled: false
newrelic:
  enabled: false
weblogic:
  enabled: false
websphere:
  enabled: false
jboss:
  enabled: false
nutanix:
  enabled: false
oneview:
  enabled: false
openstack:
  enabled: false
pivotal:
  enabled: false
pure:
  enabled: false
rhv:
  enabled: false
scaleio:
  enabled: false
servicenow:
  enabled: false
snmp:
  enabled: false
terraform:
  enabled: false
tetration:
  enabled: false
ucs:
  enabled: false
ucsdirector:
  enabled: false
udt:
  enabled: false
vcd:
  enabled: false
vcenter:
  enabled: false
vmax:
  enabled: false
vmm:
  enabled: false
vplex:
  enabled: false
wmi:
  enabled: false
xtremio:
  enabled: false
