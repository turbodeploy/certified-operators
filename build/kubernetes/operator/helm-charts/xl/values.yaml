# Default values for xl.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
#  registry: index.docker.io
#  imagePullSecret: turbocred
#  imageUsername: turbouser
#  imagePassword: turbopassword
  repository: turbonomic
  tag: 8.0.2
#  serviceAccountName: t8c-serviceaccount
#  pullPolicy: IfNotPresent
  customImageNames: true
  nodeSelector: {}
  tolerations: []
  affinity: {}
  annotations: {}
  # setting these to be more tolerant than the k8s defaults, since we run in some pretty resource
  # constrained environments where the readiness probe failures don't really fix anything. We should
  # adjust these back down when we have a horizontally-scaled environment.
  readinessPeriodSecs: 20
  readinessTimeoutSecs: 10
#  externalIP: 10.233.0.3 # byo k8s DNS
#              10.100.0.10 # eks DNS
#              10.0.0.10 # aks DNS
#              10.23.240.10 # gke DNS
#  externalArangoDBName: xl-arangodb.us-east-1.elb.amazonaws.com
#  externalConsul: xl-consul.ca-central-1.rds.amazonaws.com
#  externalDBName: xl-hackaton.cmachd0izjog.ca-central-1.rds.amazonaws.com
#  externalInfluxDBName: xl-influxdb.us-east-1.elb.amazonaws.com
#  externalKafka: xl-kafka.us-east-1.elb.amazonaws.com
#  externalSyslog: a608c38591a9f11e9ad190efbcf8c7e5-1236730884.us-east-1.elb.amazonaws.com
  elk: false
#  logtostdout: false
#  debug: true
  dev_options: "-agentlib:jdwp=transport=dt_socket,address=0.0.0.0:8000,server=y,suspend=n"
  storageAnnotations: {}
#  storageClassName: default
#  storageSelector: true
#  dbSecretName: foo
  # The above specifies the name of the Kubernetes secret holding the MariaDB credentials
  # - Relevant components are: action-orchestrator, auth, clustermgr, cost, group, history,
  #   plan-orchestrator, repository and topology-processor.
  # - Secret name is customizable for each component (by placing the same var under the
  #   component's section).
  # Secret format in yaml:
  #####################################
  # apiVersion: v1
  #   kind: Secret
  #   metadata:
  #     name: foo
  #   type: Opaque
  #   stringData:
  #     db-creds: |-
  #       username: 'db_user'
  #       password: 'db_password'
  #####################################
  # Notes:
  # - The metadata.name is the "dbSecretName" configured above
  # - The key in the data has to be the fixed word "db-creds", but it is customizable by an env
  #   var in each component as the following where the key is now "auth-creds"; this makes it
  #   possible to pack multiple credentials in the same k8s secret using different keys
  ######################################################################
  # auth:
  #   dbSecretName: foo
  #   env:
  #     ... (a copy of other env vars needed here; omitted for clarity)
  #     - name: secretsYamlPath
  #       value: file:/vault/secrets/auth-creds
  #######################################################################
  securityContext:
    fsGroup: 2000
  certmanager:
    enabled: false
    certissuer: letsencrypt-prod
  ingress:
    # domain: *.turbonomic.com
    secrets:
    ## If you're providing your own certificates, please use this to add the certificates as secrets
    ## key and certificate should start with -----BEGIN CERTIFICATE----- or
    ## -----BEGIN RSA PRIVATE KEY-----
    ##
    ## It is also possible to create and manage the certificates outside of this helm chart
    # - name: nginx-ingressgateway-certs
    #   key:
    #   certificate:

nginxingress:
  enabled: true
openshiftingress:
  enabled: false
istioingress:
  enabled: false
  mtls: true
platform:
  enabled: true
ui:
  enabled: true
control:
  enabled: true
reporting:
  enabled: false
metron:
  enabled: false
kubeturbo:
  enabled: false
prometurbo:
  enabled: false
training:
  enabled: false

loki:
  enabled: false
promtail:
  enabled: false
fluent-bit:
  enabled: false
prometheus:
  enabled: false
prometheus-mysql-exporter:
  enabled: false
grafana:
  # We expect the grafana admin password to be set in the CR file, like:
  # grafana:
  #   adminPassword: somePassword
  grafana.ini:
    users:
      # Disallow explicit user creation.
      allow_sign_up: false
      auto_assign_org_role: Editor
      default_theme: light
    server:
      # This needs to be in sync with the UI, and the NGINX configuration.
      root_url: "https://%(domain)s/reports"
      serve_from_sub_path: true
    auth.proxy:
      enabled: true
    database:
      # SQLite by default, overridable to postgres.
      type: sqlite3

      # The following fields are configured for postgres, and pretty much ignored when the type
      # is SQLite. We also expect the password to use for the grafana user to be set in the CR file.
      # In order for the user to configure the postgres backend for Grafana, we need:
      # grafana:
      #   grafana.ini:
      #     database:
      #       type: postgres
      #       password: somePassword
      host: timescaledb
      name: grafana
      user: grafana_backend
chronograf:
  enabled: false
datacloud:
  enabled: false
intersight-integration:
  enabled: false
extractor:
  enabled: false
telemetry:
  secret: eyJzZXJ2aWNlQWNjb3VudCI6eyJuYW1lIjoiY29sbGVjdG9yIiwiZW1haWwiOiJjb2xsZWN0b3JAdHVyYm8tdGVsZW1ldHJ5LXByb2Quc2EuZGF0YWNsb3VkLnQ4Yy5pbyJ9LCJzZXJ2aWNlQWNjb3VudEtleSI6eyJpZCI6ImU1N2M0ODk1MDhjOWFhMWNlOTUxMjg5YjFmY2Y3ZGE5Zjg4MmY1OGIiLCJwdWJsaWNLZXkiOiItLS0tLUJFR0lOIFBVQkxJQyBLRVktLS0tLVxuTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQ0FROEFNSUlCQ2dLQ0FRRUE3WjhQa09vUERWOW1BclMzajFMMVxuR0orRWxSYUlMbkg5RVozSGVLbElTMjR4S0xscXRoLzNtMUlCdVpYbllUUTZobElqOWhSMm9mLzRkby9RdTdsalxuM1ZzN1ZLeEFkemRkbjRoU05QdS9SalpQaGNvaFBEcmJyclVKeVhXemRjZXEySGlFc0w4b0UwS0R2SVIyUEU1MVxuWElQYWhEdnVzZHlCcFVxN3RucGtnVzYzb1FlN3VORzRJaDFvQWx5cjg3cGp4ZVp2dXhrSzNUNVJxV1lvd1huNlxudm1tbFNCSW9QUnZYaEJWUTU0ZFFZbFNmSit0T21MZTZxMlhBVzVseHdJNUVZeFFTQ0k5Yi80cXpRMlQ5dERUWFxuRC9sVi9IOHNpbUNneThQQTlSMFplTE9pQ1l4NjFUL0JHaTdPOVZGYzQyZC9Jb0FRWTk5eGlPTnd1Ulg5NjVNR1xuOVFJREFRQUJcbi0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLVxuIiwicHJpdmF0ZUtleSI6Ii0tLS0tQkVHSU4gUlNBIFBSSVZBVEUgS0VZLS0tLS1cbk1JSUVwUUlCQUFLQ0FRRUE3WjhQa09vUERWOW1BclMzajFMMUdKK0VsUmFJTG5IOUVaM0hlS2xJUzI0eEtMbHFcbnRoLzNtMUlCdVpYbllUUTZobElqOWhSMm9mLzRkby9RdTdsajNWczdWS3hBZHpkZG40aFNOUHUvUmpaUGhjb2hcblBEcmJyclVKeVhXemRjZXEySGlFc0w4b0UwS0R2SVIyUEU1MVhJUGFoRHZ1c2R5QnBVcTd0bnBrZ1c2M29RZTdcbnVORzRJaDFvQWx5cjg3cGp4ZVp2dXhrSzNUNVJxV1lvd1huNnZtbWxTQklvUFJ2WGhCVlE1NGRRWWxTZkordE9cbm1MZTZxMlhBVzVseHdJNUVZeFFTQ0k5Yi80cXpRMlQ5dERUWEQvbFYvSDhzaW1DZ3k4UEE5UjBaZUxPaUNZeDZcbjFUL0JHaTdPOVZGYzQyZC9Jb0FRWTk5eGlPTnd1Ulg5NjVNRzlRSURBUUFCQW9JQkFRQ2NBbGFoK2tvdnFYYThcblNCSk1VMWIvOTV1QWx1NktMK1RMY0IvS3BMb0diQzV5WW1vaGNST01NbWRYaFlnSVZkWW00ajhpRFlWbUR6ejlcbitxWTgyaGNxK2Y4V05KR090QmNQNnR5dVZLcmNXa1FUdndYYkdYbXFWc282THNESWozTW45TmlKZ3JlNURXNllcbmt3OWR3TlZsREZ5bmZRSFdYTVB4MWdNd1oyTWRabVBkZktscnhxYWNKOU9xMGxXbi9VdDdSOHh3aDFrRGNtbG9cbjI0bUJkQUNHSUVWWFNpRkFBNkE5UkhsWEEwYTdpZkc2Z0lkQ0xqb1VKL1RXMUhvbDY2WDRJSUx6cU5LRkt3U0lcbjdtSzBTMW85VHExWlFNNTNDN3VQL0t2THNlcEJFM25vbm9NT1lBWG8zOC9BbGZVWVFFNzZ0NzdwNGpUM0dsckdcbkFsRDZMeTd4QW9HQkFQbk05Z2lxR2kwalpyUVp5ZVhVbTZtWThITzZmUzUrUFhJUTEyY2l6aCs4a1BtbDA4bElcbkNsRm9Vejg4aG1CaUhya1kzUEIzRjJnamZYNitsZllUZHA4YVJOajRYR0NSNVUwbFFzNm9JanZCQU9HYmsxamxcbmcrK2M5SXJnQ25GYStXVzM5djZsdE5qSTM0ZVIyTnBYdGttTzE2N29GMVRjQ3BzVnNuZjB4UEQzQW9HQkFQT0VcbnVOR1dteERZTjVLTkZJVXZmK1pGVDV4dEF4YmYrSDNEeXpiU1FlU2I3OGdydE9obmlLaE5MdWhiWHMvaFJMM0tcbkJ2UzJQU0Q5KzZ0LytMNkRBWW1icjBwMWZKb0NacTRKZFljMFdlcGpCdlN6Umx1VTUyNzZLblN4b2Z1enlrNDlcbkJRR3dsVlJiZGgwOU4ybENNYm04US9ja2IwZDdGcWJaS3JMWVVYaHpBb0dCQUlybC9kUlppVTZhQmF5VlBsOXVcbmRkTzY5OURSM0hOeXZJWGxlWENldU5DSzBHNFFXQS91MzlYZVZaT3UrdVV6Q2ZSUUwrSUJ4bUVnZ3RKcjlRU3NcblUrUXAvaWhMQ1VxbE5VUk5PTFdpWmM2bUJmQnN5bVMrMGpyMUlrRHFUTVExR3NJRnBmQjRnWE9kVmpXUzBtcXVcbkpPMEg0VVFmUjRIbkRIcXBlT0FjbVRtSEFvR0FIVHRTWUQ1ZThOK3psQkVCWkpkMkYvTThBa0FIdmVnMjBRbitcbnk5N2pjQWpUK01oZVdBT05vUDVhNGlPTnR4Q0lpdXZFZC8ya1N1Q1NKRjBoUStVLyt2L0lRL3prYnl4WW5RMmZcbm9SSkV0T0VjUmFWN2phVExQMFFpY28yY0x6VysxRE40OVdINEd2ODdwM2pndk83b1B5NTlUaDUraVNzYVpmN3RcbnBEaFpWMGNDZ1lFQWhFMW1LdHQwclRROVVNaVc0QnIwYzJhcmdaWUJ5UFFxSFdYTmZ4RWp2aUNDS3V0WVdZd2dcblF3WGJXekxaLzhYTGV4dWVaemlhUHNRWHdOc3dMdUduUVFXNFdjektCejZIL29YWEhUSVFkRGJWU0k5NmlNNTVcbjY0RklENDBOTFdkZ25HenE5N25JMjNtSXN0TlRmZlFpZnRKdm51cmVPTnN6VnVYZEFjcEFQdXc9XG4tLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLVxuIn19

# Enable mediation
actionscript:
  enabled: false
aix:
  enabled: false
acims:
  enabled: false
apic:
  enabled: false
appdynamics:
  enabled: false
appinsights:
  enabled: false
aws:
  enabled: false
baremetal:
  enabled: false
datadog:
  enabled: false
awslambda:
  enabled: false
azure:
  enabled: false
cloudfoundry:
  enabled: false
compellent:
  enabled: false
customdata:
  enabled: false
dynatrace:
  enabled: false
gcp:
  enabled: false
hpe3par:
  enabled: false
hds:
  enabled: false
horizon:
  enabled: false
hyperflex:
  enabled: false
hyperv:
  enabled: false
intersight:
  enabled: false
istio:
  enabled: false
mssql:
  enabled: false
mysql:
  enabled: false
oracle:
  enabled: false
tomcat:
  enabled: false
netapp:
  enabled: false
netflow:
  enabled: false
newrelic:
  enabled: false
nutanix:
  enabled: false
oneview:
  enabled: false
openstack:
  enabled: false
pivotal:
  enabled: false
pure:
  enabled: false
rhv:
  enabled: false
scaleio:
  enabled: false
servicenow:
  enabled: false
snmp:
  enabled: false
terraform:
  enabled: false
tetration:
  enabled: false
ucs:
  enabled: false
ucsdirector:
  enabled: false
udt:
  enabled: false
vcd:
  enabled: false
vcenter:
  enabled: false
vmax:
  enabled: false
vmm:
  enabled: false
vplex:
  enabled: false
wmi:
  enabled: false
xtremio:
  enabled: false
