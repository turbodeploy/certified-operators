{{- if .Values.flat.enabled }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    zone: public
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  template:
    metadata:
{{- if .Values.global }}
  {{- if or .Values.annotations .Values.global.annotations }}
      annotations:
    {{- with .Values.annotations }}
{{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.global.annotations }}
{{- toYaml . | nindent 8 }}
    {{- end }}
  {{- end }}
{{- end }}
      labels:
        zone: public
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
{{- if .Values.global }}
  {{- if or .Values.serviceAccountName .Values.global.serviceAccountName }}
      serviceAccountName: {{ template "serviceAccountName" . }}
  {{- end }}
{{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ template "datacloud.flatImage" . }}
        imagePullPolicy: {{ template "pullPolicy" . }}
        {{- if eq (include "datacloud.authType" .) "apikey" }}
        envFrom:
        - secretRef:
            name: {{ include "datacloud.apikeySecret" . | quote }}
        {{- end }}
        env:
        - name: TURBO_KAFKA_HOSTS
          value: "{{ .Values.kafka.host }}:{{ .Values.kafka.port }}"
        - name: TURBO_KAFKA_VERSION
          value: {{ .Values.kafka.version | quote }}
        - name: TURBO_KAFKA_TOPOLOGY_TOPIC
          value: "{{ .Release.Namespace }}.{{ .Values.kafka.topics.topology }}"
        - name: TURBO_ENABLE_ACTION_LOGS
          value: {{ .Values.api.action.enable | quote }}
        - name: TURBONOMIC_ACTION_GRPC_ADDRESS
          value: "{{ .Values.api.action.host }}:{{ .Values.api.action.port }}"
        - name: TURBONOMIC_GROUP_GRPC_ADDRESS
          value: "{{ .Values.api.group.host }}:{{ .Values.api.group.port }}"
        - name: TURBONOMIC_CONSUMER_GROUP_ID
          value: {{ .Values.kafka.client_id | quote }}
        - name: SEVONE_DE_HOST
          value: {{ include "datacloud.host" . | quote }}
        - name: SEVONE_DE_PROJECT_ID
          value: {{ include "datacloud.projectID" . | quote }}
        - name: SEVONE_GRPC_PORT
          value: 443
        - name: SEVONE_PERSIST
          value: none
        - name: SEVONE_TRANSPORT
          value: de-grpc
        - name: SEVONE_LOG_LEVEL
          value: {{ .Values.log_level | quote }}
        {{- range $name, $value := include "datacloud.env" . | fromYaml  }}
        - name: {{ $name | quote }}
          value: {{ $value | quote }}
        {{- end }}
{{- if .Values.sevone.tls_cert_secret_name }}
        - name: SEVONE_GRPC_CERT
          value: "/usr/share/pki/sevone/tls.crt"
{{- end }}
{{- if eq (include "datacloud.authType" .) "service_account" }}
        - name: COLLECTOR_SERVICE_ACCOUNT_CREDENTIALS_FILE
          value: /credentials.json
{{- end }}
        ports:
          - containerPort: 2112
        readinessProbe:
          httpGet:
            port: 2112
            path: /metrics
          initialDelaySeconds: 2
          timeoutSeconds: 2
          failureThreshold: 3
        livenessProbe:
          httpGet:
            port: 2112
            path: /metrics
          initialDelaySeconds: 2
          timeoutSeconds: 3
          failureThreshold: 4
        resources:
{{ toYaml .Values.resources | indent 12 }}
        securityContext:
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
            - name: persist-data
              mountPath: /data
            {{- if .Values.sevone.tls_cert_secret_name }}
            - name: sevone-tls
              mountPath: /usr/share/pki/sevone
            {{- end }}
            {{- if eq (include "datacloud.authType" .) "service_account" }}
            - name: service-account-credentials
              mountPath: /credentials.json
              subPath: {{ include "datacloud.saSecretKey" $ }}
            {{- end }}
{{- if .Values.global }}
  {{- if .Values.global.registry }}
    {{- if .Values.global.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.global.imagePullSecret }}
    {{- else -}}
      {{- if and .Values.global.imageUsername .Values.global.imagePassword }}
      imagePullSecrets:
      - name: turbocred
      {{- end -}}
    {{- end -}}
  {{- end -}}
  {{- with .Values.global.nodeSelector }}
      nodeSelector:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.affinity }}
      affinity:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.tolerations }}
      tolerations:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.securityContext }}
      securityContext:
{{- toYaml . | nindent 8 }}
  {{- end }}
{{- end }}
      restartPolicy: Always
      volumes:
      - name: persist-data
{{ toYaml .Values.sevone.data_volume | indent 8 }}
{{- if .Values.sevone.tls_cert_secret_name }}
      - name: sevone-tls
        secret:
          secretName: {{ .Values.sevone.tls_cert_secret_name | quote }}
          optional: true
          items:
          - key: {{ .Values.sevone.tls_cert_secret_key }}
            path: tls.crt
{{- end }}
{{- if eq (include "datacloud.authType" .) "service_account" }}
      - name: service-account-credentials
        secret:
          secretName: {{ include "datacloud.saSecret" . | quote }}
{{- end }}
{{- end }}
