apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ .Chart.Name }}
  labels:
    {{- include "turbonomic-agent-graph.labels" . | nindent 4 }}
spec:
  podManagementPolicy: Parallel
  replicas: 1
  revisionHistoryLimit: 10
  serviceName: {{ .Chart.Name }}
  selector:
    matchLabels:
      {{- include "turbonomic-agent-graph.labels" . | nindent 6 }}
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
{{- if .Values.global }}
  {{- if or .Values.annotations .Values.global.annotations }}
      annotations:
    {{- with .Values.annotations }}
{{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.global.annotations }}
{{- toYaml . | nindent 8 }}
    {{- end }}
  {{- end }}
{{- end }}
      labels:
        {{- include "turbonomic-agent-graph.labels" . | nindent 8 }}
      name: {{ .Chart.Name }}
    spec:
{{- if .Values.global }}
  {{- if .Values.global.registry }}
    {{- if .Values.global.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.global.imagePullSecret }}
    {{- else -}}
      {{- if and .Values.global.imageUsername .Values.global.imagePassword }}
      imagePullSecrets:
      - name: turbocred
      {{- end -}}
    {{- end -}}
  {{- end -}}
  {{- if or .Values.serviceAccountName .Values.global.serviceAccountName }}
      serviceAccountName: {{ template "serviceAccountName" . }}
  {{- end }}
  {{- with .Values.global.nodeSelector }}
      nodeSelector:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.affinity }}
      affinity:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.tolerations }}
      tolerations:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.securityContext }}
      securityContext:
{{- toYaml . | nindent 8 }}
  {{- end }}
{{- end }}
      containers:
{{- if .Values.enableDebugContainer }}
        - command:
          - sh
          - -c
          - |
            sleep infinity
          image: busybox
          name: shell
          volumeMounts:
          - mountPath: /data
            name: graphstate
{{- end }}
{{- $image :=  include "image" . }}
{{- $pullPolicy := include "pullPolicy" . }}
{{- range $k, $poller := .Values.collectors }}
        - name: {{ $poller }}
          command: ["/app/{{ $poller }}"]
          image: {{ $image }}
          imagePullPolicy: {{ $pullPolicy }}
          env:
          - name: DATACLOUD_GRAPH_STATE_DIR
            value: /data/{{ $poller }}
          - name: DATACLOUD_GRAPH_STATE_GC_PASSES
            value: "50"
          - name: DATACLOUD_LOG_LEVEL
            value: {{ $.Values.logLevel }}
          {{- if $.Values.configmap }}
          - name: TURBO_CONFIG_FILE
            value: "/config/config.yaml"
          {{- end }}
          {{- range $k, $v := $.Values.env }}
          - name: {{ $k | quote }}
            value: {{ $v | quote }}
          {{- end }}
          - name: {{ $.Values.credentials.type }}
          {{- if eq $.Values.credentials.type "COLLECTOR_SERVICE_ACCOUNT_CREDENTIALS_FILE" }}
            value: {{ print "/credentials/" (default "collector.json" $.Values.credentials.key) | quote }}
          {{- else if eq $.Values.credentials.type "DATACLOUD_GRPC_TOKEN" }}
            valueFrom:
              secretKeyRef:
                name: {{ $.Values.credentials.secretName }}
                key: {{ default "apikey" $.Values.credentials.key }}
          {{- else }}
            {{- fail "credentials.type must be supplied. Supported values are COLLECTOR_SERVICE_ACCOUNT_CREDENTIALS_FILE and DATACLOUD_GRPC_TOKEN" }}
          {{- end }}
          - name: DATACLOUD_PROJECT
            value: {{ $.Values.credentials.projectId | quote }}
          {{- with $.Values.resources }}
          resources:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          volumeMounts:
          - name: graphstate
            mountPath: /data
          {{- if $.Values.configmap }}
          - name: configyaml
            mountPath: /config
          {{- end }}
          {{- if eq $.Values.credentials.type "COLLECTOR_SERVICE_ACCOUNT_CREDENTIALS_FILE" }}
          - name: credentials
            mountPath: /credentials
          {{- end }}
{{- end }}
      volumes:
{{- if .Values.configmap }}
      - name: configyaml
        configMap:
          name: {{ .Values.configmap }}
{{- end }}
{{- if eq .Values.credentials.type "COLLECTOR_SERVICE_ACCOUNT_CREDENTIALS_FILE" }}
      - name: credentials
        secret:
          secretName: {{ default "datacloudserviceaccount" .Values.credentials.secretName }}
{{- end }}
      - name: graphstate
        persistentVolumeClaim:
          claimName: graphstate
  volumeClaimTemplates:
  - metadata:
      name: graphstate
    spec:
      accessModes:
      - ReadWriteOnce
    {{- if .Values.global }}
      {{- if .Values.global.storageSelector }}
      selector:
        matchLabels:
          partition: {{ .Release.Namespace }}-datacloud-graph
      {{- end }}
      {{- if .Values.global.storageClassName }}
      storageClassName: {{ .Values.global.storageClassName }}
      {{- end }}
    {{- end }}
      resources:
        requests:
          storage: {{ $.Values.persistence.size }}
      volumeMode: Filesystem
