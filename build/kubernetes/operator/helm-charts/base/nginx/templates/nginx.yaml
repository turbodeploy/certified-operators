apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Chart.Name }}-certs
  labels:
    zone: public
    app.kubernetes.io/name: {{ .Chart.Name }}-certs
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    zone: public
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        zone: public
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: {{ template "image" . }}
        imagePullPolicy: {{ template "pullPolicy" . }}
        env:
        - name: API
          value: api.{{ .Release.Namespace }}.svc.cluster.local
        - name: TOPOLOGY
          value: topology-processor.{{ .Release.Namespace }}.svc.cluster.local
{{ toYaml .Values.env | indent 8 -}}
        ports:
          - containerPort: 8000
          - containerPort: 8443
        readinessProbe:
          httpGet:
            path: {{ .Values.global.apiReadinessProbePath | default "/healthz/ready" | quote }}
            port: 8443
            scheme: HTTPS
        securityContext:
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /etc/nginx/certs
          name: nginx-certs
        - mountPath: /var/www/load-status
          name: nginx-load-status
        - mountPath: /var/cache/nginx
          name: nginx-data
        - mountPath: /var/run
          name: nginx-run
        - mountPath: /tmp
          name: nginx-tmpfs0
{{- if .Values.global }}
  {{- if and .Values.global.registry .Values.global.imageUsername .Values.global.imagePassword }}
      imagePullSecrets:
      - name: turbocred
  {{- end -}}
{{- end }}
      restartPolicy: Always
      securityContext:
        fsGroup: 2000
      volumes:
      - name: nginx-certs
        persistentVolumeClaim:
          claimName: {{ .Chart.Name }}-certs
      - name: nginx-load-status
        emptyDir: {}
      - name: nginx-data
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      - name: nginx-tmpfs0
        emptyDir: {}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
---
{{- if .Values.global }}
  {{- if not .Values.global.defaultNginxIngress }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Chart.Name }}
  labels:
    zone: internal
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
  - name: https-nginx
    port: 443
    targetPort: 8443
  - name: http-nginx
    port: 80
    targetPort: 8000
  selector:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    {{- if .Values.global.externalIP }}
  externalIPs:
    - {{ .Values.global.externalIP }}
    {{- end -}}
  {{- if .Values.global.apiLoadBalancerIP }}
    loadBalancerIP: {{ .Values.global.apiLoadBalancerIP }}
  {{- end }}
  {{- else }}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Chart.Name }}-nodeport-service
  labels:
    zone: internal
    app.kubernetes.io/name: {{ .Chart.Name }}-nodeport-service
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    {{- if eq (default .Values.global.cloudProvider "") "gcp" }}
    cloud.google.com/app-protocols: {{ .Values.global.gcpApiAppProtocols | default "{\"https\":\"HTTP2\"}" | quote }}
      {{- if .Values.global.gcpApiBackendConfig }}
    beta.cloud.google.com/backend-config: {{ .Values.global.gcpApiBackendConfig | quote }}
      {{- end }}
    {{- end }}
spec:
  type: NodePort
  ports:
  - port: 8000
    targetPort: 8000
    name: http
  - port: 8443
    targetPort: 8443
    name: https
  selector:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: {{ .Chart.Name }}-ingress
  labels:
    zone: internal
    app.kubernetes.io/name: {{ .Chart.Name }}-ingress
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  annotations:
    kubernetes.io/ingress.allow-http: {{ .Values.global.apiIngressAllowHttp | default "false" | quote }}
    {{- if .Values.global.apiIngressGlobalStaticIpName }}
    kubernetes.io/ingress.global-static-ip-name: {{ .Values.global.apiIngressGlobalStaticIpName }}
    {{- end }}
    {{- if .Values.global.gkeApiManagedCertificate }}
    networking.gke.io/managed-certificates: {{ .Values.global.gkeApiManagedCertificate }}
    {{- end }}
spec:
  backend:
    serviceName: {{ .Chart.Name }}-nodeport-service
    servicePort: 8443
  {{- end -}}
{{- end -}}
