{{ if .Values.global }}
  {{ if and (not .Values.global.externalKafka) (not .Values.global.externalKafkaIP) }}
    {{/* Kafka is not external, so define a PVC and a Deployment for it. */}}
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: {{ .Chart.Name }}-log
  {{- if or .Values.storageAnnotations .Values.global.storageAnnotations }}
  annotations:
    {{- with .Values.storageAnnotations }}
{{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.global.storageAnnotations }}
{{- toYaml . | nindent 8 }}
    {{- end }}
  {{- end }}
  labels:
    zone: internal
    app.kubernetes.io/name: {{ .Chart.Name }}-log
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  accessModes:
  - ReadWriteOnce
{{- if .Values.global }}
  {{- if .Values.global.storageSelector }}
  selector:
    matchLabels:
      partition: {{ .Release.Namespace }}-kafka-log
  {{- end }}
  {{- if .Values.global.storageClassName }}
  storageClassName: {{ .Values.global.storageClassName }}
  {{- end }}
{{- end }}
  resources:
    requests:
      storage: {{ .Values.persistence.size }}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    zone: internal
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  template:
    metadata:
{{- if .Values.global }}
  {{- if or .Values.annotations .Values.global.annotations }}
      annotations:
    {{- with .Values.annotations }}
{{- toYaml . | nindent 8 }}
    {{- end }}
    {{- with .Values.global.annotations }}
{{- toYaml . | nindent 8 }}
    {{- end }}
  {{- end }}
{{- end }}
      labels:
{{- include "labels" . | nindent 8 }}
        zone: internal
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/managed-by: {{ .Release.Service }}
    spec:
{{- if .Values.global }}
  {{- if or .Values.serviceAccountName .Values.global.serviceAccountName }}
      serviceAccountName: {{ template "serviceAccountName" . }}
  {{- end }}
{{- end }}
      containers:
      - name: {{ .Chart.Name }}
        image: {{ template "image" . }}
        imagePullPolicy: {{ template "pullPolicy" . }}
        env:
        - name: KAFKA_HEAP_OPTS
          value: {{ .Values.java.options | quote }}
{{- if .Values.global }}
  {{- if .Values.global.javaEnvironmentOptions }}
        - name: KAFKA_OPTS
          value: {{ .Values.global.javaEnvironmentOptions | quote }}
  {{- end }}
  {{- if or .Values.logtostdout .Values.global.logtostdout }}
        - name: LOG_TO_STDOUT
          value: "true"
  {{- end }}
{{- end }}
{{ toYaml .Values.env | indent 8 }}
        ports:
          - containerPort: 9092
        livenessProbe:
          tcpSocket:
            port: 9092
{{- include "common.getLivenessThresholds" . | indent 10 }}
        readinessProbe:
          tcpSocket:
            port: 9092
{{- include "common.getReadinessThresholds" . | indent 10 }}
        resources:
{{ toYaml .Values.resources | indent 12 }}
        securityContext:
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /home/kafka
          name: kafka-log
{{ if .Values.global }}
  {{ if .Values.global.disableSameTrustStore }}
        - mountPath: /vault/trust
          name: kafka-truststore-secret
          readOnly: true
  {{- else }}
        - mountPath: /vault/trust
          name: common-truststore-secret
          readOnly: true
  {{- end }}
{{- end }}
        - mountPath: /vault/key
          name: kafka-keystore-secret
          readOnly: true
        - mountPath: /vault/mtlsSecrets
          name: kafka-mtls-secret
          readOnly: true          
        - mountPath: /tmp
          name: kafka-tmpfs0
{{- if .Values.global }}
  {{- if .Values.global.registry }}
    {{- if .Values.global.imagePullSecret }}
      imagePullSecrets:
      - name: {{ .Values.global.imagePullSecret }}
    {{- else -}}
      {{- if and .Values.global.imageUsername .Values.global.imagePassword }}
      imagePullSecrets:
      - name: turbocred
      {{- end -}}
    {{- end -}}
  {{- end -}}
  {{- with .Values.global.nodeSelector }}
      nodeSelector:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.affinity }}
      affinity:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.tolerations }}
      tolerations:
{{- toYaml . | nindent 8 }}
  {{- end }}
  {{- with .Values.global.securityContext }}
      securityContext:
{{- toYaml . | nindent 8 }}
  {{- end }}
{{- end }}
      restartPolicy: Always
      volumes:
      - name: kafka-log
        persistentVolumeClaim:
          claimName: {{ .Chart.Name }}-log
      - name: kafka-truststore-secret
        secret:
          secretName: kafka-truststore-secret
          optional: true
      - name: common-truststore-secret
        secret:
          secretName: common-truststore-secret
          optional: true
      - name: kafka-keystore-secret
        secret:
          secretName: kafka-keystore-secret
          optional: true
      - name: kafka-mtls-secret
        secret:
          secretName: kafka-mtls-secret
          optional: true
      - name: kafka-tmpfs0
        emptyDir: {}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
  {{ end }}
{{ end }}
---
        {{/* We always need a service for Kafka. */}}
apiVersion: v1
kind: Service
metadata:
  name: {{ .Chart.Name }}
  annotations:
{{- include "serviceAnnotations" . | nindent 4 }}
  labels:
{{- include "serviceLabels" . | nindent 4 }}
    zone: internal
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  ports:
  - name: tcp-kafka
    port: {{ .Values.global.externalKafkaPort | default 9092 }}
{{- if .Values.global }}
  {{- if .Values.global.externalKafka }}
        {{/* Kafka is externalized by DNS name */}}
  type: ExternalName
  externalName: {{ .Values.global.externalKafka }}
  {{- end -}}
  {{- if and (not .Values.global.externalKafka) (not .Values.global.externalKafkaIP)}}
        {{/* Kafka is running as a container within Kubernetes */}}
  selector:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
  {{- end -}}
  {{- if and (.Values.global.externalKafkaIP) (not .Values.global.externalKafka)}}
        {{/* Kafka is externalized by IP; headless service requires a manual endpoint definition */}}
---
apiVersion: v1
kind: Endpoints
metadata:
  name: {{ .Chart.Name }}
  labels:
      zone: internal
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/managed-by: {{ .Release.Service }}
subsets:
  - addresses:
    - ip: {{ .Values.global.externalKafkaIP | quote }}
    ports:
    - name: tcp-kafka
      port: {{ .Values.global.externalKafkaPort | default 9092 }}
  {{- end -}}
{{- end }}
