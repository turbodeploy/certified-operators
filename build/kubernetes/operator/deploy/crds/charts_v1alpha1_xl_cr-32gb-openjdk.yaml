apiVersion: charts.helm.k8s.io/v1alpha1
kind: Xl
metadata:
  name: xl-release
spec:
  # Default values copied from <project_dir>/helm-charts/xl/values.yaml

  # Default values for xl.
  # This is a YAML-formatted file.
  # Declare variables to be passed into your templates.

  # Any changes run : kubectl apply -f deploy/crds/charts_v1alpha1_xl_cr.yaml -n turbonomic

  # Global settings
  global:
  #  registry: index.docker.io
  #  imageUsername: turbouser
  #  imagePassword: turbopassword
    repository: turbonomic
    tag: 8.0.3-SNAPSHOT
    externalIP: 10.0.2.15
    externalDbIP: 10.0.2.15
    externalTimescaleDBIP: 10.0.2.15

  grafana:
    # Grafana is disabled by default. To enable it, uncomment:
    #enabled: true
    adminPassword: admin
    grafana.ini:
      database:
        # Store data in sqlite3 (no persistence across restarts) by default. To persist, uncomment:
        #type: postgres

        # The password. TODO - figure out the correct/ideal way to deploy this without risking
        # losing/resetting the password on upgrade.
        # See: https://github.com/helm/charts/issues/5167
        password: grafana

  # Component selector - Probes
  actionscript:
    enabled: true
  appdynamics:
    enabled: true
  udt:
    enabled: true
  appinsights:
    enabled: false
  aws:
    enabled: true
  azure:
    enabled: true
  dynatrace:
    enabled: true
  hpe3par:
    enabled: true
  hyperv:
    enabled: true
  netapp:
    enabled: true
  nutanix:
    enabled: true
  oneview:
    enabled: true
  pure:
    enabled: true
  ucs:
    enabled: true
  vcenter:
    enabled: true
  vmax:
    enabled: true
  vmm:
    enabled: true
  wmi:
    enabled: true
  snmp:
    enabled: true
  mssql:
    enabled: true
  mysql:
    enabled: false
  oracle:
    enabled: false
  newrelic:
    enabled: true

  # Resource limits - Core Services
  action-orchestrator:
    resources:
      limits:
        memory: 2Gi
  api:
    resources:
      limits:
        memory: 1Gi
  auth:
    resources:
      limits:
        memory: 768Mi
  clustermgr:
    resources:
      limits:
        memory: 512Mi
  cost:
    resources:
      limits:
        memory: 1Gi
  group:
    resources:
      limits:
        memory: 768Mi
  history:
    resources:
      limits:
        memory: 2Gi
  market:
    resources:
      limits:
        memory: 3Gi
  ml-datastore:
    resources:
      limits:
        memory: 512Mi
  ml-training:
    resources:
      limits:
        memory: 512Mi
  plan-orchestrator:
    resources:
      limits:
        memory: 1Gi
  reporting:
    resources:
      limits:
        memory: 768Mi
  repository:
    resources:
      limits:
        memory: 3Gi
  topology-processor:
    resources:
      limits:
        memory: 4Gi

  # Resource limits - Core 3rd party
  arangodb:
    resources:
      limits:
        memory: 2Gi
  kafka:
    resources:
      limits:
        memory: 2Gi
  zookeeper:
    resources:
      limits:
        memory: 512Mi

  # Resources limits - Probes
  mediation-actionscript:
    resources:
      limits:
        memory: 512Mi
  mediation-appdynamics:
    resources:
      limits:
        memory: 1Gi
  mediation-dynatrace:
    resources:
      limits:
        memory: 512Mi
  mediation-hpe3par:
    resources:
      limits:
        memory: 512Mi
  mediation-hyperv:
    resources:
      limits:
        memory: 1Gi
  mediation-netapp:
    resources:
      limits:
        memory: 512Mi
  mediation-nutanix:
    resources:
      limits:
        memory: 1Gi
  mediation-oneview:
    resources:
      limits:
        memory: 512Mi
  mediation-pure:
    resources:
      limits:
        memory: 512Mi
  mediation-ucs:
    resources:
      limits:
        memory: 1Gi
  mediation-vcenter:
    resources:
      limits:
        memory: 2Gi
  mediation-vcenterbrowsing:
    resources:
      limits:
        memory: 512Mi
  mediation-udt:
    resources:
      limits:
        memory: 512Mi
  mediation-vmax:
    resources:
      limits:
        memory: 512Mi
  mediation-vmm:
    resources:
      limits:
        memory: 1Gi

