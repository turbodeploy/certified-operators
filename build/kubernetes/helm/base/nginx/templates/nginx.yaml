apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Chart.Name }}
  labels:
    zone: public
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        zone: public
        app.kubernetes.io/name: {{ .Chart.Name }}
        app.kubernetes.io/instance: {{ .Release.Name }}
    spec:
      containers:
      - name: {{ .Chart.Name }}
        image: {{ template "image" . }}
        imagePullPolicy: {{ template "pullPolicy" . }}
        env:
        - name: API
          value: api.{{ .Release.Namespace }}.svc.cluster.local
        - name: TOPOLOGY
          value: topology-processor.{{ .Release.Namespace }}.svc.cluster.local
{{ toYaml .Values.env | indent 8 -}}
        ports:
          - containerPort: 8000
          - containerPort: 8443
        readinessProbe:
          httpGet:
            path: "/healthz/ready"
            port: 8443
            scheme: HTTPS
        securityContext:
          readOnlyRootFilesystem: true
          capabilities:
            drop:
            - ALL
        volumeMounts:
        - mountPath: /etc/nginx/certs
          name: nginx-certs
        - mountPath: /var/www/load-status
          name: nginx-load-status
        - mountPath: /var/cache/nginx
          name: nginx-data
        - mountPath: /var/run
          name: nginx-run
        - mountPath: /tmp
          name: nginx-tmpfs0
{{- if .Values.global }}
  {{- if and .Values.global.registry .Values.global.imageUsername .Values.global.imagePassword }}
      imagePullSecrets:
      - name: turbocred
  {{- end -}}
{{- end }}
      restartPolicy: Always
      securityContext:
        fsGroup: 2000
      volumes:
      - name: nginx-certs
        secret:
          secretName: "nginx-ingressgateway-certs"
          optional: true
      - name: nginx-load-status
        emptyDir: {}
      - name: nginx-data
        emptyDir: {}
      - name: nginx-run
        emptyDir: {}
      - name: nginx-tmpfs0
        emptyDir: {}
  selector:
    matchLabels:
      app.kubernetes.io/name: {{ .Chart.Name }}
      app.kubernetes.io/instance: {{ .Release.Name }}
---
apiVersion: v1
kind: Service
metadata:
  name: {{ .Chart.Name }}
  labels:
    zone: internal
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/managed-by: {{ .Release.Service }}
spec:
  type: LoadBalancer
  externalTrafficPolicy: Local
  ports:
  - name: https-nginx
    port: 443
    targetPort: 8443
  - name: http-nginx
    port: 80
    targetPort: 8000
  selector:
    app.kubernetes.io/name: {{ .Chart.Name }}
    app.kubernetes.io/instance: {{ .Release.Name }}
{{- if .Values.global }}
    {{- if .Values.global.externalIP }}
  externalIPs:
    - {{ .Values.global.externalIP }}
  {{ end }}
---
  {{- if .Values.global.certmanager }}
apiVersion: certmanager.k8s.io/v1alpha1
kind: Certificate
metadata:
  name: t8c-nginx-gateway
spec:
  secretName: nginx-ingressgateway-certs
  issuerRef:
    name: letsencrypt-prod
  commonName: {{ .Values.global.ingress.domain | default "*.turbonomic.com" | quote }}
  acme:
    config:
      - dns01:
          provider: cloud-dns
        domains:
          - {{ .Values.global.ingress.domain | default "*.turbonomic.com" | quote }}
---
  {{ else }}
    {{- if .Values.global }}
      {{- range .Values.global.ingress.secrets }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ .name }}
type: kubernetes.io/tls
data:
  tls.crt: {{ .certificate | b64enc }}
  tls.key: {{ .key | b64enc }}
---
      {{- end }}
    {{- end }}
  {{- end -}}
{{- end -}}
