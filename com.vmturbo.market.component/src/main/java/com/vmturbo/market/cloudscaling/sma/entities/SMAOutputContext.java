package com.vmturbo.market.cloudscaling.sma.entities;

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Set;

import javax.annotation.Nonnull;

import com.vmturbo.common.protobuf.cloud.CloudCommitmentDTO.CloudCommitmentMapping;

/**
 * The Stable Marriage algorithm output context.
 * The output context contains a list of matches for this context
 */
public class SMAOutputContext {
    /**
     * base context.
     */
    private final SMAContext context;

    /**
     * This is the result of running SMA.
     */
    private final List<SMAMatch> matches;

    /**
     * A mapping from vm to individual cloud commitments.
     */
    private final Map<Long, Set<CloudCommitmentMapping>>
            projectedVMToCommitmentMappings = new HashMap<>();

    public Map<Long, Set<CloudCommitmentMapping>> getProjectedVMToCommitmentMappings() {
        return projectedVMToCommitmentMappings;
    }


    /**
     * Constructor for output context.
     * @param context Each SMAOutputContext is associated with a context.
     * @param matches The matches generated by SMA.
     */
    public SMAOutputContext(final SMAContext context,
                            @Nonnull final List<SMAMatch> matches) {
        this.context = context;
        this.matches = Objects.requireNonNull(matches, "matches are null!");
    }

    @Nonnull
    public SMAContext getContext() {
        return context;
    }

    @Nonnull
    public List<SMAMatch> getMatches() {
        return matches;
    }

    @Override
    public String toString() {
        StringBuffer buffer = new StringBuffer();
        buffer.append("SMAOutputContext ").append(matches.size()).append(" matches in ").append(context);
        for (SMAMatch match: matches) {
            buffer.append("\n  match=").append(match);
        }
        return buffer.toString();
    }

}
