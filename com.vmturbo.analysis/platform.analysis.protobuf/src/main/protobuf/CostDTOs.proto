syntax = "proto2";
package com.vmturbo.platform.analysis.protobuf;

import "CommodityDTOs.proto";

// A message to help build up the cloud cost information
message CostDTO {
    // the type of cost DTO that will be used to create cost function
    oneof cost_type {
       ComputeTierCostDTO compute_tier_cost = 1;
       StorageTierCostDTO storage_tier_Cost = 2;
       DatabaseTierCostDTO database_tier_Cost = 3;
       CbtpCostDTO cbtp_resource_bundle = 4;
    }

    // The DTOs specifically define discounted cost by AWS reserved instances
    message CbtpCostDTO {
        required int32 couponBaseType = 1;
        required double discountPercentage = 2;
        // Pricing to be used in case the Percentage RI Pricing flag is enabled
        optional CostTuple cost_tuple = 4;
    }

    // The DTOs used in XL to carry the pricing information and commodity dependency constraint for
    // compute tier service
    message ComputeTierCostDTO {
        // the base commodity and its dependent commodity type. The sum of base and
        // dependent commodity for a given shopping list should be within the capacity
        // of the base commodity sold by a given seller
        message ComputeResourceDependency {
            required CommoditySpecificationTO base_resource_type = 1;
            required CommoditySpecificationTO dependent_resource_type = 2;
        }
        repeated CostTuple cost_tuple_list = 1; // a list of cost tuple info
        repeated ComputeResourceDependency compute_resource_depedency = 2;// a list of dependency constraint
        optional int32 license_commodity_base_type = 3; // the base type of license commodity
        required int32 couponBaseType = 4;
    }

    message CostTuple {
        // if license does not exist, the license comm type should be -1
        optional int32 license_commodity_type = 1;
        optional double price = 2;
        // some business account can be used for applying discount, id of business account
        // maps to the discounted price of resource
        optional int64 business_account_id = 3;
        oneof location {
            int64 region_id = 4;
            int64 zone_id = 5;
        }
    }

    message StorageTierCostDTO {
        // the commodity specification to min and max capacity limitation mapping
        message StorageResourceLimitation {
            optional CommoditySpecificationTO resource_type = 1;
            optional double min_capacity = 2;
            optional double max_capacity = 3;
        }
        // the dependency commodity and its base commodity and the max ratio between dependent
        // commodity's capacity and base commodity's capacity
        message StorageResourceDependency {
            required CommoditySpecificationTO base_resource_type = 1;
            required CommoditySpecificationTO dependent_resource_type = 2;
            required int32 ratio = 3;
        }
        // the price information
        message StorageTierPriceData {
            optional double upper_bound = 1; // the commodity amount upper bound
            optional double price = 2; // the price after the discount is applied
            optional bool is_unit_price = 3; // if the price is unit price or total price
            optional bool is_accumulative_cost = 4; // if the cost should be accumulated
            // some business account can be used for applying discount, id of business account
            // maps to the discounted price of resource
            optional int64 business_account_id = 5;
        }
        // the commodity specification and its price data list
        message StorageResourceCost {
            required CommoditySpecificationTO resource_type = 1;
            repeated StorageTierPriceData storage_tier_price_data =2;
        }
        repeated StorageResourceCost storage_resource_cost = 1; // a list of commodity's pricing information
        repeated StorageResourceLimitation storage_resource_limitation = 2;// a list of commodity's capacity limitation
        repeated StorageResourceDependency storage_resource_dependency = 3; // a list of dependency information
    }

    // The DTOs used in XL to carry the pricing information and commodity dependency constraint for
    // database tier service
    message DatabaseTierCostDTO {
        repeated CostTuple cost_tuple_list = 1; // a list of cost tuple info
        optional int32 license_commodity_base_type = 2; // the base type of license commodity
        optional int32 region_commodity_base_type = 3; // the base type of region commodity
        required int32 couponBaseType = 4;
    }
}
