package com.vmturbo.platform.analysis.protobuf;

import "ActionDTOs.proto";
import "EconomyDTOs.proto";

// Market 2.0 isn't concerned with segments, groups, etc. because it's enough to know about
// commodities. Thus we need a limited number of messages.

// The intention is that the Validator sends a StartDiscoveredTopology message when it has a new
// validated topology, followed by a TraderTO message for each trader in the topology, followed by
// an EndDiscoveredTopology message. This will incur a two byte overhead per trader, but will
// guarantee WebSocket messages wont exceed the size supported by the implementation and allow the
// sender to start sending without converting the whole topology to Protobuf in memory first.
message StartDiscoveredTopology {
    // May think of additional data to add in the future.
}

// The intention is that the Analysis server will keep information in a staging area and atomically
// replace the old real-time topology with the new when it receives the EndDiscoveredTopology
// message. That way the Analysis server will have a valid topology at any time.
message EndDiscoveredTopology {
    // TODO: add the map from commodity specifications to generalized updating function here.
    // May think of additional data to add in the future.
}

message AnalysisCommand {
    oneof command {
        StartDiscoveredTopology start_discovered_topology = 1;
        TraderTO discovered_trader = 2;
        EndDiscoveredTopology end_discovered_topology = 3;
    }
}

// It shouldn't matter if the connection is dropped and reestablished in at any point between messages.

// Since in M2 there is no distinction between actions generated by the real-time market and by
// plans, we have a single results message for both

// Validator shouldn't expect this as a response to an EndDiscoveredTopology message, but rather
// be prepared to accept it at any time. This will allow analysis to choose whether it is best to
// run every time it has new data, or at specified intervals, or both.
message AnalysisResults {
    repeated ActionTO actions = 1; // The actions proposed by the economic decision engine.
    optional int64 time_to_analyze_ns = 3; // Just-for-fun field to allow showing how long it took
                                    // to compute the results. (Like the indication in Google Search)
}
