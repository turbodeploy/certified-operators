<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>com.vmturbo</groupId>
        <artifactId>com.vmturbo.components</artifactId>
        <relativePath>../com.vmturbo.components/pom.xml</relativePath>
        <version>8.4.2-SNAPSHOT</version>
    </parent>

    <artifactId>com.vmturbo.api.component</artifactId>

    <profiles>
        <profile>
            <!--
            This profile is activated if the rebrand property is undefined, or if it is defined
            with an empty value. An empty value cannot be used directly for branding, as it is not
            a valid branding key. Here we ensure that in either scenario, the default branding
            key will be used. If the rebrand property is defined, this profile will not be
            activated, and its value will be used as the branding key, per the global
            branding.key property definition.
            -->
            <id>branding.key</id>
            <activation>
                <property>
                    <name>!rebrand</name>
                </property>
            </activation>
            <properties>
                <branding.key>${branding.key.default}</branding.key>
            </properties>
        </profile>
        <profile>
            <id>developer-api-profile</id>
            <activation>
                <property>
                    <name>!env.SVN_REVISION</name>
                </property>
            </activation>
            <properties>
                <env.svn.revision>dev</env.svn.revision>
            </properties>
        </profile>
    </profiles>

    <properties>
        <swagger.component.name>API Component</swagger.component.name>
        <base.generated.docs.dir>${project.build.directory}/generated-docs/
        </base.generated.docs.dir>
        <swagger.conf.directory>${base.generated.docs.dir}/swagger</swagger.conf.directory>
        <env.svn.revision>${env.SVN_REVISION}</env.svn.revision>
        <api.version>v3</api.version>
        <branding.key.default>vmturbo</branding.key.default>
        <rebrand>${branding.key.default}</rebrand>
        <branding.key>${rebrand}</branding.key>
        <brand.locale>en</brand.locale>
        <branding.properties.url>
            classpath:brands/${branding.key}/i18n/locale-${brand.locale}.properties
        </branding.properties.url>
        <db.url>jdbc:mysql://localhost:3306</db.url>
        <db.username>root</db.username>
        <db.password>vmturbo</db.password>
        <db.schema>api_build_${maven.build.timestamp}</db.schema>
        <db.outputSchema>api</db.outputSchema>
        <db.driver>org.mariadb.jdbc.Driver</db.driver>
    </properties>

    <build>
        <plugins>
            <!-- generate swagger.json for the External API - requires https -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>properties-maven-plugin</artifactId>
                <version>1.0.0</version>
                <executions>
                    <execution>
                        <id>establish-branding</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>read-project-properties</goal>
                        </goals>
                        <configuration>
                            <urls>
                                <url>${branding.properties.url}</url>
                            </urls>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>com.vmturbo</groupId>
                        <artifactId>com.vmturbo.branding</artifactId>
                        <version>${com.vmturbo.api.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>com.github.kongchen</groupId>
                <artifactId>swagger-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>internal-swagger</id>
                        <!--
                        Here is the configuration for the execution defined in
                        com.vmturbo.components.common (the "internal" API for this component)
                        -->
                        <configuration>
                            <apiSources>
                                <apiSource>
                                    <locations>
                                        <location>com.vmturbo.components.common</location>
                                        <location>com.vmturbo.api.internal.controller</location>
                                        <location>com.vmturbo.common.protobuf.logging</location>
                                    </locations>
                                </apiSource>
                            </apiSources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy swagger file for tests</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>testResources</goal>
                        </goals>
                        <configuration>
                            <resources>
                                <resource>
                                    <directory>${swagger.conf.directory}</directory>
                                    <includes>external/*</includes>
                                </resource>
                            </resources>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>get-ux</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.vmturbo</groupId>
                                    <artifactId>com.vmturbo.UX</artifactId>
                                    <!-- note: dependency satisfied from MT -->
                                    <version>${ux.mt.branch.version}</version>
                                    <type>zip</type>
                                    <destFileName>com.vmturbo.UX.zip</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack-jar-features</id>
                        <phase>prepare-package</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <echo message="unpack jar file"/>
                                <mkdir dir="${project.build.directory}/www"/>
                                <unzip src="${project.build.directory}/dependency/com.vmturbo.UX.zip"
                                       dest="${project.build.directory}/www"
                                       failOnEmptyArchive="true">
                                </unzip>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>get-swagger-resources</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>copy</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.vmturbo</groupId>
                                    <artifactId>com.vmturbo.api</artifactId>
                                    <!-- note: Swagger resources (external API swagger.json and swagger.yaml are built in
                                         the API project repository. We pull a .jar file containing those resources and
                                          unpack them for use and inclusion in our docker container here. However, we do
                                          still codgen the internal component swagger.json and swagger.yaml directly in
                                          this project.-->
                                    <version>${com.vmturbo.api.version}</version>
                                    <classifier>swagger</classifier>
                                    <type>jar</type>
                                    <destFileName>swagger-resources.jar</destFileName>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack-swagger</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <!-- Unpack the swagger.yaml and swagger.json pulled from the API repository build.
                                     Place the files in the the <generated_docs_dir>/swagger/external and then cleanup. -->
                                <echo message="unpack swagger jar file"/>
                                <mkdir dir="${base.generated.docs.dir}/swagger/external"/>
                                <unzip src="${project.build.directory}/dependency/swagger-resources.jar"
                                       dest="${base.generated.docs.dir}/swagger/tmp"
                                       failOnEmptyArchive="true">
                                </unzip>
                                <path id="swagger_tmp_dir">
                                    <dirset dir="${base.generated.docs.dir}/swagger/tmp/">
                                        <include name="*${com.vmturbo.api.version}*"/>
                                    </dirset>
                                </path>
                                <property name="swagger.tmp.dir" refid="swagger_tmp_dir" />
                                <move todir="${base.generated.docs.dir}/swagger/external/" includeemptydirs="false">
                                    <fileset dir="${swagger.tmp.dir}/" includes="swagger*"/>
                                </move>
                                <delete dir="${swagger.tmp.dir}"/>
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>unpack-apidoc</id>
                        <phase>package</phase>
                        <goals>
                            <goal>unpack</goal>
                        </goals>
                        <configuration>
                            <artifactItems>
                                <artifactItem>
                                    <groupId>com.vmturbo</groupId>
                                    <artifactId>com.vmturbo.api</artifactId>
                                    <version>${com.vmturbo.api.version}</version>
                                    <type>jar</type>
                                    <outputDirectory>${project.build.directory}</outputDirectory>
                                    <includes>apidoc/**/*</includes>
                                    <!-- remove unused files to reduce api container image layers
                                     to below 40 -->
                                    <excludes>**/swagger.*, apidoc/swagger-ui-standalone-preset.*,
                                        apidoc/oauth2-redirect*, apidoc/index.html.gz
                                    </excludes>
                                </artifactItem>
                            </artifactItems>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                    <!-- override the <resources> from the docker-maven-plugin <pluginManagement>
                                in com.vmturbo.components in order to add the /www static web contents -->
                    <resources>
                        <resource>
                            <targetPath>/</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                        <resource>
                            <targetPath>/www</targetPath>
                            <directory>${project.build.directory}/www</directory>
                        </resource>
                        <resource>
                            <targetPath>/lib</targetPath>
                            <directory>${project.build.directory}/lib</directory>
                        </resource>
                        <resource>
                            <targetPath>/swagger</targetPath>
                            <directory>${project.build.directory}/apidoc</directory>
                        </resource>
                        <resource>
                            <targetPath>/swagger/external</targetPath>
                            <directory>${project.build.directory}/apidoc</directory>
                        </resource>
                        <resource>
                            <targetPath>/swagger</targetPath>
                            <directory>${swagger.conf.directory}</directory>
                        </resource>
                    </resources>
                    <serverId>docker-registry</serverId>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <argLine>-Duser.language=en -Duser.region=US ${jacoco.agent.argLine} -Dfile.encoding=UTF-8</argLine>
                </configuration>
            </plugin>
            <plugin>
                <groupId>pl.project13.maven</groupId>
                <artifactId>git-commit-id-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>com.vmturbo.api.component.ApiComponent</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-resources-plugin</artifactId>
                <configuration>
                    <nonFilteredFileExtensions>
                        <nonFilteredFileExtension>jks</nonFilteredFileExtension>
                    </nonFilteredFileExtensions>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <configuration>
                    <suppressionsLocation>checkstyle-suppressions.xml</suppressionsLocation>
                </configuration>
            </plugin>
            <plugin>
               <groupId>com.github.spotbugs</groupId>
               <artifactId>spotbugs-maven-plugin</artifactId>
               <version>${spotbugs.version}</version>
               <configuration>
                   <maxAllowedViolations>60</maxAllowedViolations>
                   <failOnError>true</failOnError>
               </configuration>
               <executions>
                   <execution>
                       <goals>
                           <goal>check</goal>
                       </goals>
                   </execution>
               </executions>
            </plugin>
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>migrate</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>migrate</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>clean-db</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <url>${db.url}</url>
                    <user>${db.username}</user>
                    <password>${db.password}</password>
                    <locations>
                        <!-- Configure to the same location as configured in Spring Boot..-->
                        <location>filesystem:${basedir}/src/main/resources/db
                            /api/migration</location>
                    </locations>
                    <schemas>
                        <schema>${db.schema}</schema>
                    </schemas>
                </configuration>
            </plugin>
            <!-- See comment from michael-simons at https://github.com/spring-projects/spring-boot/issues/6975
                 on recommended configuration for a Spring Boot + Flyway + jOOQ setup-->
            <plugin>
                <!-- Specify the maven code generator plugin -->
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>

                <!-- The plugin should hook into the generate goal -->
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>

                    <!-- JDBC connection parameters -->
                    <jdbc>
                        <driver>${db.driver}</driver>
                        <url>${db.url}/${db.schema}</url>
                        <user>${db.username}</user>
                        <password>${db.password}</password>
                    </jdbc>

                    <!-- Generator parameters -->
                    <generator>
                        <database>
                            <name>org.jooq.meta.mysql.MySQLDatabase</name>
                            <!-- Retrieve schema version from Flyway info table -->
                            <schemaVersionProvider>SELECT CONCAT_WS('_', '${db.outputSchema}', MAX(version)) from schema_version</schemaVersionProvider>
                            <includes>.*</includes>
                            <excludes>schema_version</excludes>
                            <schemata>
                                <schema>
                                    <inputSchema>${db.schema}</inputSchema>
                                    <outputSchema>${db.outputSchema}</outputSchema>
                                </schema>
                            </schemata>
                        </database>
                        <generate>
                            <pojos>true</pojos>
                        </generate>
                        <target>
                            <packageName>com.vmturbo.api.component.db</packageName>
                            <directory>target/generated-sources/jooq</directory>
                        </target>
                    </generator>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-websocket</artifactId>
        </dependency>
        <!-- dependencies shared from Legacy OpsManager -->
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.api</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>io.springfox</groupId>
                    <artifactId>springfox-swagger2</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.proactivesupport</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.hateoas</groupId>
            <artifactId>spring-hateoas</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.platform.sdk.common</artifactId>
            <exclusions>
                <exclusion>
                    <groupId>log4j</groupId>
                    <artifactId>log4j</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!-- XL project dependencies -->
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.components.common</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.clustermgr.api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>topology-processor-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>action-orchestrator-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.group.api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>history-component-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.history.schema</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.repository.api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.reports.api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.communication</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>common-protobuf</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>kvstore</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>auth-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>cost-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.licensing</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>system-notification-receiver</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>extractor-schema</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>search-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>common-api</artifactId>
        </dependency>
        <dependency>
            <groupId>io.opentracing</groupId>
            <artifactId>opentracing-api</artifactId>
        </dependency>
        <dependency>
            <groupId>io.jaegertracing</groupId>
            <artifactId>jaeger-client</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.extractor.api</artifactId>
        </dependency>

        <!-- return XML from REST endpoints if requested -->
        <dependency>
            <groupId>org.glassfish.jersey.media</groupId>
            <artifactId>jersey-media-jaxb</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-web</artifactId>
            <version>${spring.security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-core</artifactId>
            <version>${spring.security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-config</artifactId>
            <version>${spring.security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-saml2-service-provider</artifactId>
            <version>${spring.security.version}</version>
            <exclusions>
                <!-- Excluding org.apache.velocity 1.7 which is transitively introduced by
                    org.springframework.security:spring-security-saml2-service-provider:jar:5.5.1.
                    This library has security vulnerabilities.
                    See CVE-2015-7501 for details.
                    Note: We have verified basic SAML functions still works after removing this library.
                    Although further investigation might be needed.
                -->
                <exclusion>
                    <groupId>org.apache.velocity</groupId>
                    <artifactId>velocity</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-oauth2-client</artifactId>
            <version>${spring.security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.security</groupId>
            <artifactId>spring-security-oauth2-jose</artifactId>
            <version>${spring.security.version}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.session</groupId>
            <artifactId>spring-session-jdbc</artifactId>
            <version>${spring.session.jdbc.version}</version>
        </dependency>
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
        </dependency>
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-collections4</artifactId>
        </dependency>
        <!-- Excluding commons-collections 3.2.1 which is transitively introduced by
          org.springframework.security:spring-security-saml2-service-provider:jar:5.3.0.RELEASE.
          This library has security vulnerabilities.
          See https://www.cvedetails.com/vulnerability-list/vendor_id-45/product_id-32731/version_id-187982/Apache-Commons-Collections-3.2.1.html
          Note: We have verified basic SAML functions still works after removing this library.
          Although further investigation might be needed.
        -->
        <dependency>
            <groupId>commons-collections</groupId>
            <artifactId>commons-collections</artifactId>
            <version>3.2.1</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <!-- ical4j library is used for its support of recurring events.
            In particular, we define recurring event as a string using recurring rule format
            parseable by ical4j.
            See https://tools.ietf.org/html/rfc2445#section-4.3.10 for more details.
            -->
            <groupId>org.mnode.ical4j</groupId>
            <artifactId>ical4j</artifactId>
            <version>3.0.10</version>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>sql-utils</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>sql-test-utils</artifactId>
        </dependency>

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-validator</artifactId>
        </dependency>

        <!-- test dependencies -->
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.group</artifactId>
            <scope>test</scope>
            <exclusions>
                <exclusion>
                    <groupId>org.apache.tomcat.embed</groupId>
                    <artifactId>tomcat-embed-websocket</artifactId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>org.hamcrest</groupId>
            <artifactId>hamcrest-all</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.plan.orchestrator.api</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty.websocket</groupId>
            <artifactId>websocket-server</artifactId>
        </dependency>
        <dependency>
            <groupId>org.eclipse.jetty.websocket</groupId>
            <artifactId>javax-websocket-server-impl</artifactId>
        </dependency>
        <dependency>
            <groupId>commons-beanutils</groupId>
            <artifactId>commons-beanutils</artifactId>
        </dependency>
        <dependency>
            <groupId>com.github.spotbugs</groupId>
            <artifactId>spotbugs-annotations</artifactId>
            <version>4.2.0</version>
            <optional>true</optional>
        </dependency>
        <dependency>
            <groupId>com.github.stefanbirkner</groupId>
            <artifactId>system-rules</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.skyscreamer</groupId>
            <artifactId>jsonassert</artifactId>
            <scope>test</scope>
        </dependency>
    </dependencies>
</project>
