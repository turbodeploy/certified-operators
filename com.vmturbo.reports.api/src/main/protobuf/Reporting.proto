syntax = "proto2";
package reporting;

option java_package = "com.vmturbo.reporting.api.protobuf";

// Request for the report
message GenerateReportRequest {
    // Format of the report to be represented.
    // This is an literal value from ReportOutputFormat enum
    required string format = 1;
    // ID of the report to generate
    required ReportTemplateId template = 2;
    // Parameters for the report
    map<string, string> parameters = 3;
    // emails to send generated report to. Each GenerateReportRequest may have 0 or more subscribers.
    repeated string subcribers_emails = 4;
}

// Report template
message ReportTemplate {
    // Id of the report
    required ReportTemplateId id = 1;
    // Title of the report
    optional string title = 2;
    // Category of the report
    optional string category = 3;
    // Short description of the report
    optional string short_description = 4;
    // Full description of the report
    required string description = 5;
    // Type of recurrency period
    // These 2 numbers represents ordinal in appropriate enums.
    optional int32 period = 6;
    // Day of recurrency
    optional int32 day_type = 7;
}

// Represents report template - a link to real report template
message ReportTemplateId {
    // Id of the template
    required int32 id = 1;
    // Report type for this template
    required int32 report_type = 2;
}

// Represents reporting response - an internal link to a report instance record
message ReportInstanceId {
    // Path to the file in the server, where generated report is stored
    required int64 id = 1;
}

// Report instance represents already generated instance of report
message ReportInstance {
    // Id of the report instance
    required int64 id = 1;
    // Template id
    required ReportTemplateId template = 2;
    // Refers tp RreportOurputFormat
    required string format = 3;
    // Timestamp when the report generation started
    required int64 generation_time = 4;
}

// Input type for Delete schedule and Get schedule methods
message ScheduleId {
    required int64 id = 1;
}

// DTO for report schedule with Id generated in backend
message ScheduleDTO {
    required int64 id = 1;
    // All schedule parameters
    required ScheduleInfo schedule_info = 2;
}

// Parameters of schedule
message ScheduleInfo {
    // day of week when scheduled report should be generated
    optional string day_of_week = 1;
    // file format (for now PDF or XLSX)
    required string format = 2;
    // Daily, weekly or monthly
    required string period = 4;
    // type of generated report
    required int32 report_type = 5;
    // UUID of scope (like group or cluster) if it's presented
    optional string scope_oid = 6;
    required bool show_charts = 8;
    // Template for scheduled report
    required int32 template_id = 9;
    // emails to send scheduled report
    repeated string subscribers_emails = 10;
    // Day when monthly report should be generated
    optional int32 dayOfMonth = 11;
}

// Request param for getting schedule by report type and template id
message GetSchedulesByRequest {
    required int32 report_type = 1;
    required int32 template_id = 2;
}

message Empty {}

// Message holds report data, suitable for download or view by browser/end user.
message ReportData {
    // Format of the report instance.
    required string format = 1;
    // Bytes of the report.
    required bytes data = 2;
    // Name of the report to show.
    required string report_name = 3;
}

// Report notification holds the status update for report generation. One notification should be
// fired for one report, sent for generation.
message ReportNotification {
    required int64 report_id = 1;
    oneof notification {
        Empty generated = 2;
        string failed = 3;
    }
}

// GRPC service to process reporting requests
service ReportingService {
    // Triggeres generation of report. Method return as soon, as report instance id is assigned.
    // When report generation will be finished, ReportNotification will be sent asyncrhonously.
    rpc GenerateReport (GenerateReportRequest) returns (ReportInstanceId);
    // Lists all the existing reporting templates
    rpc ListAllTemplates (Empty) returns (stream ReportTemplate);
    // Retrieves report instance (its bytes, name and what is required to show it to the end-user).
    rpc GetReportData (ReportInstanceId) returns (ReportData);
    // Lists all the instances available in the appliance
    rpc ListAllInstances (Empty) returns (stream ReportInstance);
    // Lists all the report instances, created for the spcified report template
    rpc GetInstancesByTemplate (ReportTemplateId) returns (stream ReportInstance);
    // Create and store schedule to db
    rpc AddSchedule (ScheduleInfo) returns (ScheduleDTO);
    // Get all stored schedules
    rpc GetAllSchedules(Empty) returns (stream ScheduleDTO);
    // Delete schedule by id
    rpc DeleteSchedule(ScheduleId) returns (Empty);
    // Edit stored schedule.
    rpc EditSchedule(ScheduleDTO) returns (ScheduleDTO);
    // Get stored schedule by id
    rpc GetSchedule(ScheduleId) returns (ScheduleDTO);
    // Get all schedules with specified parameters
    rpc GetSchedulesBy(GetSchedulesByRequest) returns (stream ScheduleDTO);
}
