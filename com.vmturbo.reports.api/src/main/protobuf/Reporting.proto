syntax = "proto2";
package reporting;

option java_package = "com.vmturbo.reporting.api.protobuf";

// Request for the report
message GenerateReportRequest {
    // Format of the report to be represented.
    // This is an literal value from ReportOutputFormat enum
    required string format = 1;
    // ID of the report to generate
    required int32 report_id = 2;
    // Parameters for the report
    map<string, string> parameters = 3;
}

// Report template
message ReportTemplate {
    // Id of the report (represents id in the DB)
    required int32 id = 1;
    // Report type. Reffers to ReportType enumeration
    required int32 reportType = 2;
    // File name to be used for this report
    // TODO decide, whether we need this field in UI at all.
    optional string filename = 3;
    // Title of the report
    optional string title = 4;
    // Category of the report
    optional string category = 5;
    // Short description of the report
    optional string short_description = 6;
    // Full description of the report
    required string description = 7;
    // Type of recurrency period
    // These 2 numbers represents ordinal in appropriate enums.
    optional int32 period = 8;
    // Day of recurrency
    optional int32 day_type = 9;
}

// Represents reporting response - an internal link to a report instance record
message ReportInstanceId {
    // Path to the file in the server, where generated report is stored
    required int64 id = 1;
}

message Empty {}

// Message holds report data, suitable for download or view by browser/end user.
message ReportData {
    // Format of the report instance.
    required string format = 1;
    // Bytes of the report.
    required bytes data = 2;
    // Name of the report to show.
    required string report_name = 3;
}

// Report notification holds the status update for report generation. One notification should be
// fired for one report, sent for generation.
message ReportNotification {
    required int64 report_id = 1;
    oneof notification {
        Empty generated = 2;
        string failed = 3;
    }
}

// GRPC service to process reporting requests
service ReportingService {
    // Triggeres generation of report. Method return as soon, as report instance id is assigned.
    // When report generation will be finished, ReportNotification will be sent asyncrhonously.
    rpc GenerateReport (GenerateReportRequest) returns (ReportInstanceId);
    // Lists all the existing reporting templates
    rpc ListAllTemplates (Empty) returns (stream ReportTemplate);
    // Retrieves report instance (its bytes, name and what is required to show it to the end-user).
    rpc GetReportData (ReportInstanceId) returns (ReportData);
}
