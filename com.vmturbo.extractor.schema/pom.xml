<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <artifactId>Turbonomic-XL</artifactId>
        <groupId>com.vmturbo</groupId>
        <version>8.5.1-SNAPSHOT</version>
        <relativePath>../build/pom.xml</relativePath>
    </parent>

    <artifactId>extractor-schema</artifactId>

    <properties>
        <swagger.component.name>Extractor</swagger.component.name>
        <maven.build.timestamp.format>yyyyMMddHHmmssSSS</maven.build.timestamp.format>

        <targetSchemaName>extractor</targetSchemaName>
        <postgresSchemaName>${targetSchemaName}_${maven.build.timestamp}</postgresSchemaName>
        <postgresDriver>org.postgresql.Driver</postgresDriver>

        <mysqlDbUrl>jdbc:mysql://localhost:3306</mysqlDbUrl>
        <mysqlUsername>root</mysqlUsername>
        <mysqlPassword>vmturbo</mysqlPassword>
        <mysqlTargetSchemaName>search</mysqlTargetSchemaName>
        <mysqlSchemaName>${mysqlTargetSchemaName}_${maven.build.timestamp}</mysqlSchemaName>
        <mysqlDriver>org.mariadb.jdbc.Driver</mysqlDriver>
    </properties>
    <build>
        <plugins>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>create-mysql-search-schema</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>com.vmturbo.search.schema.SchemaCreator</mainClass>
                            <arguments>
                                <argument>-create</argument>
                                <argument>${mysqlDbUrl}</argument>
                                <argument>${mysqlSchemaName}</argument>
                                <argument>${mysqlUsername}</argument>
                                <argument>${mysqlPassword}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                    <!-- a temporary mysql database used for jooq generation needs to be deleted -->
                    <!-- e.g. flyway:clean for mysql only removes the contents but not the db itself -->
                    <execution>
                        <id>drop-mysql-search-schema</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>com.vmturbo.search.schema.SchemaCreator</mainClass>
                            <arguments>
                                <argument>-drop</argument>
                                <argument>${mysqlDbUrl}</argument>
                                <argument>${mysqlSchemaName}</argument>
                                <argument>${mysqlUsername}</argument>
                                <argument>${mysqlPassword}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <plugin>
                <!-- flyway is only needed for PostgreSQL -->
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>migrate-postgresql</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>migrate</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>clean-db-postgresql</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <url>jdbc:postgresql://${postgresHost}:${postgresPort}/</url>
                    <user>${postgresUserName}</user>
                    <password>${postgresPassword}</password>
                    <locations>
                        <location>filesystem:${basedir}/src/main/resources/db/migration/extractor</location>
                    </locations>
                    <schemas>
                        <schema>${postgresSchemaName}</schema>
                    </schemas>
                </configuration>
            </plugin>

            <plugin>
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>

                <executions>
                    <!-- PostgreSQL codegen -->
                    <execution>
                        <id>postgresql-jooq-codegen</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <jdbc>
                                <driver>${postgresDriver}</driver>
                                <url>jdbc:postgresql://${postgresHost}:${postgresPort}/</url>
                                <user>${postgresUserName}</user>
                                <password>${postgresPassword}</password>
                            </jdbc>
                            <generator>
                                <database>
                                    <name>org.jooq.meta.postgres.PostgresDatabase</name>
                                    <schemaVersionProvider>SELECT CONCAT_WS('_', '${targetSchemaName}',
                                        MAX(version)) from "${postgresSchemaName}".schema_version
                                    </schemaVersionProvider>
                                    <includes>.*</includes>
                                    <excludes>schema_version</excludes>
                                    <schemata>
                                        <schema>
                                            <inputSchema>${postgresSchemaName}</inputSchema>
                                            <outputSchema>${targetSchemaName}</outputSchema>
                                        </schema>
                                    </schemata>
                                </database>
                                <generate>
                                    <pojos>true</pojos>
                                </generate>
                                <target>
                                    <packageName>com.vmturbo.extractor.schema</packageName>
                                    <directory>${project.build.directory}/generated-sources/jooq</directory>
                                </target>
                            </generator>
                        </configuration>
                    </execution>

                    <!-- MySQL codegen -->
                    <execution>
                        <id>mysql-jooq-codegen</id>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                        <configuration>
                            <jdbc>
                                <driver>${mysqlDriver}</driver>
                                <url>${mysqlDbUrl}</url>
                                <user>${mysqlUsername}</user>
                                <password>${mysqlPassword}</password>
                            </jdbc>
                            <generator>
                                <database>
                                    <name>org.jooq.meta.mysql.MySQLDatabase</name>
                                    <includes>.*</includes>
                                    <excludes>schema_version</excludes>
                                    <inputSchema>${mysqlSchemaName}</inputSchema>
                                    <outputSchema>${mysqlTargetSchemaName}</outputSchema>
                                </database>
                                    <generate>
                                        <pojos>true</pojos>
                                    </generate>
                                <target>
                                    <packageName>com.vmturbo.search.schema</packageName>
                                    <directory>${project.build.directory}/generated-sources/jooq</directory>
                                </target>
                            </generator>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.mariadb.jdbc</groupId>
                        <artifactId>mariadb-java-client</artifactId>
                        <version>1.1.7</version>
                    </dependency>
                </dependencies>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <systemPropertyVariables>
                        <dbHost>${postgresHost}</dbHost>
                        <dbPort>${postgresPort}</dbPort>
                    </systemPropertyVariables>
                </configuration>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <profile>
            <id>no-run-postgres-container</id>
            <!-- set default for postgres port only if we're not going to spin up a postgres container -->
            <activation>
                <property>
                    <name>postgresContainer.skip</name>
                </property>
            </activation>
            <properties>
                <postgresPort>5432</postgresPort>
            </properties>
        </profile>
        <profile>
            <id>run-postgres-container</id>
            <!--
                If you don't want a postgres container to be spun up during the build in order to
                perform live DB tests, specify -DpostgresContainer.skip` on maven command line. In
                that case you will need to have a postgres server available in your environment,
                and the postgresHost and postgresPort properties can be used to configure access
                if they're differnet from lcoalhost and 5432, respectively.
            -->
            <activation>
                <property>
                    <name>!postgresContainer.skip</name>
                </property>
            </activation>
            <build>
                <plugins>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-tsdb-for</id>
                                <phase>initialize</phase>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                                <configuration>
                                    <dockerHost>${fabricateDockerHost}</dockerHost>
                                    <showLogs>false</showLogs>
                                    <images>
                                        <image>
                                            <alias>tsdb</alias>
                                            <name>timescale/timescaledb:${timescaledb-image-tag}</name>
                                            <run>
                                                <!--
                                                pattern needs to start with "maven-" so jenkins builds
                                                will properly clean up leaked containers
                                                -->
                                                <containerNamePattern>maven-%a-%t-%i</containerNamePattern>
                                                <ports>
                                                    <port>postgresPort:5432</port>
                                                </ports>
                                                <env>
                                                    <POSTGRES_USER>${postgresUserName}</POSTGRES_USER>
                                                    <POSTGRES_PASSWORD>${postgresPassword}</POSTGRES_PASSWORD>
                                                </env>
                                                <wait>
                                                    <log>
                                                        <!--
                                                        CDATA prevents intellij from wrapping the search
                                                        string, which would break things.
                                                        We wait for a message that shows that timescale
                                                        is ready, and we wait to see it twice, since the
                                                        container's entry-point script includes an internal
                                                        restart.
                                                        -->
                                                        <![CDATA[(?s)TimescaleDB background worker launcher connected to shared catalogs.*TimescaleDB background worker launcher connected to shared catalogs]]>
                                                    </log>
                                                    <time>120000</time>
                                                </wait>
                                            </run>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-tsdb</id>
                                <phase>test</phase>
                                <goals>
                                    <goal>stop</goal>
                                </goals>
                                <configuration>
                                    <dockerHost>${fabricateDockerHost}</dockerHost>
                                    <images>
                                        <image>
                                            <name>timescale/timescaledb:${timescaledb-image-tag}</name>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    <dependencies>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-core</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-context</artifactId>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
        </dependency>
        <dependency>
            <groupId>org.jooq</groupId>
            <artifactId>jooq</artifactId>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>sql-utils</artifactId>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>sql-test-utils</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.search.schema</artifactId>
        </dependency>
    </dependencies>
</project>
