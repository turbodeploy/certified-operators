package com.vmturbo.identity.store;

import java.util.List;
import java.util.Objects;
import java.util.stream.Collectors;

import javax.annotation.Nonnull;

import com.vmturbo.identity.attributes.AttributeExtractor;
import com.vmturbo.identity.attributes.IdentityMatchingAttributes;

/**
 * Identity lookup and storage for items of type T.
 *
 * @param <T> the type of items this instance of {@link IdentityLookup} will manage
 **/
public class IdentityLookup<T> {

    // the routine to use to extract the IdentityMatchingAttributes from a given type T
    private final AttributeExtractor<T> attributeExtractor;

    // the underlying store for the IdentityMatchingAttributes -> OID mapping; this store
    // may implement persistence if needed
    private final IdentityStore identityStore;

    /**
     * A store that maps Items of type T to their corresponding OIDs using an
     * attributeExtractor -> the corresponding {@link IdentityMatchingAttributes}.
     * The mappings are persisted to the given IdentityStore.
     *
     * @param attributeExtractor the class to map an input type T into the
     *                           {@link IdentityMatchingAttributes} to be compared
     *                           against the other T objects
     * @param identityStore the storage for the mappings from {@link IdentityMatchingAttributes}
     *                     to the corresponding OID
     */
    public IdentityLookup(@Nonnull AttributeExtractor<T> attributeExtractor,
                          @Nonnull IdentityStore identityStore) {

        this.attributeExtractor = Objects.requireNonNull(attributeExtractor);
        this.identityStore = Objects.requireNonNull(identityStore);
    }

    /**
     * Return the unique OID for each item based on attributes extracted from the item.
     * An OID for each item we have not seen yet will be generated by this call, persisted,
     * and returned in the result list.
     *
     * For each item in the input list
     * <ol>
     *     <li>extract the matching attributes for the item
     *     <li>look for an item in the cache that matches the item for this list
     *     <li>if found - return the oid for that item
     *     <li>if not found - allocate a new OID and store that OID with the attributes;
     *         then return the new oid
     * </ol>
     * At the end persist all newly generated (IdentityMachingAttributes -> oid) mappings
     *
     * @param itemlist the list of input items of type T.
     * @return the list of the OID for each item in the input
     */
    @Nonnull
    public List<Long> getOids(@Nonnull List<T> itemlist) {

        Objects.requireNonNull(itemlist);
        List<IdentityMatchingAttributes> itemAttrsList = itemlist.stream()
                .map(attributeExtractor::extractAttributes)
                .collect(Collectors.toList());
        return identityStore.fetchOrAssignOids(itemAttrsList);
    }

}
