<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <parent>
        <groupId>com.vmturbo</groupId>
        <artifactId>com.vmturbo.components</artifactId>
        <version>7.16.0-SNAPSHOT</version>
        <relativePath>../com.vmturbo.components/pom.xml</relativePath>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>action-orchestrator</artifactId>

    <properties>
        <swagger.component.name>Action Orchestrator</swagger.component.name>
        <maven.build.timestamp.format>yyyyMMddHHmmssSSS</maven.build.timestamp.format>

        <!-- TODO: user and password configuration should NOT be checked into source control -->
        <db.url>jdbc:mysql://localhost:3306</db.url>
        <db.username>root</db.username>
        <db.password>vmturbo</db.password>
        <db.schema>action_build_${maven.build.timestamp}</db.schema>
        <db.outputSchema>action</db.outputSchema>
        <db.driver>org.mariadb.jdbc.Driver</db.driver>
    </properties>

    <build>
        <plugins>
            <plugin>
                <groupId>com.github.kongchen</groupId>
                <artifactId>swagger-maven-plugin</artifactId>
                <configuration>
                    <apiSources>
                        <apiSource>
                            <locations>
                                <location>com.vmturbo.action</location>
                                <location>com.vmturbo.common.protobuf.action</location>
                                <location>com.vmturbo.common.protobuf.logging</location>
                                <location>com.vmturbo.common.protobuf.workflow</location>
                                <location>com.vmturbo.components.common</location>
                            </locations>
                        </apiSource>
                    </apiSources>
                </configuration>
            </plugin>
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <configuration>
                  <serverId>registry.turbonomic.com</serverId>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <archive>
                        <manifest>
                            <mainClass>com.vmturbo.action.orchestrator.ActionOrchestratorComponent</mainClass>
                        </manifest>
                    </archive>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
            </plugin>
            <plugin>
                <groupId>org.flywaydb</groupId>
                <artifactId>flyway-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>migrate</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>clean-db</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
                <configuration>
                    <url>${db.url}</url>
                    <user>${db.username}</user>
                    <password>${db.password}</password>
                    <locations>
                        <!-- Configure to the same location as configured in Spring Boot..-->
                        <location>filesystem:${basedir}/src/main/resources/db/migration</location>
                    </locations>
                    <schemas>
                        <schema>${db.schema}</schema>
                    </schemas>
                </configuration>
            </plugin>
            <!-- See comment from michael-simons at https://github.com/spring-projects/spring-boot/issues/6975
                 on recommended configuration for a Spring Boot + Flyway + jOOQ setup-->
            <plugin>
                <!-- Specify the maven code generator plugin -->
                <groupId>org.jooq</groupId>
                <artifactId>jooq-codegen-maven</artifactId>

                <!-- The plugin should hook into the generate goal -->
                <executions>
                    <execution>
                        <phase>generate-sources</phase>
                        <goals>
                            <goal>generate</goal>
                        </goals>
                    </execution>
                </executions>

                <configuration>

                    <!-- JDBC connection parameters -->
                    <jdbc>
                        <driver>${db.driver}</driver>
                        <url>${db.url}/${db.schema}</url>
                        <user>${db.username}</user>
                        <password>${db.password}</password>
                    </jdbc>

                    <!-- Generator parameters -->
                    <generator>
                        <database>
                            <name>org.jooq.util.mysql.MySQLDatabase</name>
                            <!-- Retrieve schema version from Flyway info table -->
                            <schemaVersionProvider>SELECT CONCAT_WS('_', '${db.outputSchema}', MAX(version)) from schema_version</schemaVersionProvider>
                            <includes>.*</includes>
                            <excludes>schema_version</excludes>
                            <schemata>
                                <schema>
                                    <inputSchema>${db.schema}</inputSchema>
                                    <outputSchema>${db.outputSchema}</outputSchema>
                                </schema>
                            </schemata>
                            <!-- Automatically convert timestamps to LocalDateTime using custom data bindings (see http://www.jooq.org/doc/3.6/manual/code-generation/custom-data-type-bindings/) -->
                            <customTypes>
                                <customType>
                                    <!-- Specify the fully-qualified class name of your custom type -->
                                    <name>java.time.LocalDateTime</name>
                                    <!-- Associate that custom type with your converter. Note, a
                                         custom type can only have one converter in jOOQ -->
                                    <converter>com.vmturbo.sql.utils.LocalDateTimeConverter</converter>
                                </customType>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.action.ActionDTO.Action</name>
                                    <converter>com.vmturbo.action.orchestrator.store.MarketActionConverter</converter>
                                </customType>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.action.ActionDTO.ActionDecision</name>
                                    <converter>com.vmturbo.action.orchestrator.store.ActionDecisionConverter</converter>
                                </customType>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.action.ActionDTO.ExecutionStep</name>
                                    <converter>com.vmturbo.action.orchestrator.store.ExecutionStepConverter</converter>
                                </customType>
                                <customType>
                                    <name>com.vmturbo.common.protobuf.workflow.WorkflowDTO.WorkflowInfo</name>
                                    <converter>com.vmturbo.action.orchestrator.workflow.store.WorkflowInfoConverter</converter>
                                </customType>
                            </customTypes>

                            <!-- Then, associate custom types with database columns -->
                            <forcedTypes>
                                <!-- Automatically convert timestamp fields to Java LocalDateTime-->
                                <forcedType>
                                    <!-- Specify again he fully-qualified class name of your custom type -->
                                    <name>java.time.LocalDateTime</name>
                                    <!-- Add a list of comma-separated regular expressions matching columns -->
                                    <expression>.*\..*_time</expression>
                                </forcedType>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.action.ActionDTO.Action</name>
                                    <expression>.*\.market_action\.recommendation</expression>
                                </forcedType>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.action.ActionDTO.Action</name>
                                    <expression>.*\.action_history\.recommendation</expression>
                                </forcedType>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.action.ActionDTO.ActionDecision</name>
                                    <expression>.*\.action_history\.action_decision</expression>
                                </forcedType>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.action.ActionDTO.ExecutionStep</name>
                                    <expression>.*\.action_history\.execution_step</expression>
                                </forcedType>
                                <forcedType>
                                    <name>com.vmturbo.common.protobuf.workflow.WorkflowDTO.WorkflowInfo</name>
                                    <expression>.*\.workflow\.workflow_info</expression>
                                </forcedType>
                            </forcedTypes>
                        </database>
                        <generate>
                            <pojos>true</pojos>
                        </generate>
                        <target>
                            <packageName>com.vmturbo.action.orchestrator.db</packageName>
                            <directory>target/generated-sources/jooq</directory>
                        </target>
                    </generator>
                </configuration>
            </plugin>
        </plugins>
    </build>

    <dependencies>
        <!-- vmturbo dependencies -->
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>auth-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>sql-utils</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>topology-processor-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>action-orchestrator-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>identity</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>market-component-api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.repository.api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>com.vmturbo.group.api</artifactId>
        </dependency>
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>common-protobuf</artifactId>
        </dependency>
        <!-- 3rd party dependencies-->
        <dependency>
            <groupId>com.google.protobuf</groupId>
            <artifactId>protobuf-java</artifactId>
        </dependency>
        <dependency>
            <groupId>org.immutables</groupId>
            <artifactId>value</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>io.prometheus</groupId>
            <artifactId>simpleclient</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-websocket</artifactId>
        </dependency>
        <dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-web</artifactId>
        </dependency>
        <dependency>
            <groupId>javax.persistence</groupId>
            <artifactId>javax.persistence-api</artifactId>
        </dependency>

        <!-- test dependencies -->
        <dependency>
            <groupId>com.vmturbo</groupId>
            <artifactId>auth-test</artifactId>
            <scope>test</scope>
        </dependency>

    </dependencies>
</project>
